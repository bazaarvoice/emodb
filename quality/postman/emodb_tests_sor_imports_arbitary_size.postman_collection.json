{
	"info": {
		"_postman_id": "35e03935-2c3a-4786-a0b6-8edbd9a45595",
		"name": "EmoDB_Tests_sor_imports_arbitary_size",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Imports an arbitrary size stream of deltas and/or JSON objects",
			"item": [
				{
					"name": "TC: Request with api key without access",
					"item": [
						{
							"name": "Imports an arbitrary size stream of deltas and/or JSON objects",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.json().reason).to.be.oneOf([`not authorized to update table ${pm.environment.get('table')}`, 'not authorized']);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-BV-API-Key",
										"value": "{{api_key_no_rights}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n         {\n            \"~id\": \"1\",\n            \"~table\": \"{{table}}\",\n            \"table\": \"{{table}}\",\n            \"key\": \"demo1\",\n            \"delta\": \"{\\\"field1\\\":\\\"value1\\\",\\\"field2\\\":\\\"value2\\\",\\\"field3\\\":\\\"value3\\\"}\",\n            \"consistency\": \"STRONG\",\n            \"audit\": {\n              \"comment\": \"Adding demo1 document\"\n            }\n          },\n          {\n            \"~id\": \"2\",\n            \"~table\": \"{{table}}\",\n            \"table\": \"{{table}}\",\n            \"key\": \"demo2\",\n            \"delta\": \"{\\\"field1\\\":\\\"value1.1\\\",\\\"field5\\\":\\\"value5\\\",\\\"field32\\\":\\\"value33\\\"}\",\n            \"consistency\": \"STRONG\",\n            \"audit\": {\n            \"comment\": \"Update and Add\"\n        }\n      }\n]"
								},
								"url": {
									"raw": "{{baseurl_dc1}}/sor/1?audit=comment:'imports+stream+of+deltas'&consistency=STRONG&facade=false",
									"host": [
										"{{baseurl_dc1}}"
									],
									"path": [
										"sor",
										"1"
									],
									"query": [
										{
											"key": "changeId",
											"value": "<string>",
											"disabled": true
										},
										{
											"key": "audit",
											"value": "comment:'imports+stream+of+deltas'"
										},
										{
											"key": "consistency",
											"value": "STRONG"
										},
										{
											"key": "facade",
											"value": "false"
										}
									]
								},
								"description": "Imports an arbitrary size stream of deltas and/or JSON objects.  Two formats are supported: array syntax\n     * ('[' object ',' object ',' ... ']') and whitespace-separated objects (object whitespace object whitespace ...)\n     * Each piece of content must have top-level \"~id\" and \"~table\" attributes that determines the table and object\n     * key in the SoR."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sor/1?changeId=<string>&audit=<string>&consistency=STRONG&facade=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sor",
												"1"
											],
											"query": [
												{
													"key": "changeId",
													"value": "<string>"
												},
												{
													"key": "audit",
													"value": "<string>"
												},
												{
													"key": "consistency",
													"value": "STRONG"
												},
												{
													"key": "facade",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"success\": false,\n \"debug\": {}\n}"
								}
							]
						}
					]
				},
				{
					"name": "TC: Request without audit param",
					"item": [
						{
							"name": "Imports an arbitrary size stream of deltas and/or JSON objects",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.eql(\"Missing required query parameter: audit\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-BV-API-Key",
										"value": "{{api_key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n         {\n            \"table\": \"{{table}}\",\n            \"key\": \"demo1\",\n            \"delta\": \"{\\\"field1\\\":\\\"value1\\\",\\\"field2\\\":\\\"value2\\\",\\\"field3\\\":\\\"value3\\\"}\",\n            \"consistency\": \"STRONG\",\n            \"audit\": {\n              \"comment\": \"Adding demo1 document\"\n            }\n          },\n          {\n            \"table\": \"{{table}}\",\n            \"key\": \"demo2\",\n            \"delta\": \"{\\\"field1\\\":\\\"value1.1\\\",\\\"field5\\\":\\\"value5\\\",\\\"field32\\\":\\\"value33\\\"}\",\n            \"consistency\": \"STRONG\",\n            \"audit\": {\n            \"comment\": \"Update and Add\"\n        }\n      }\n]"
								},
								"url": {
									"raw": "{{baseurl_dc1}}/sor/1?consistency=STRONG&facade=false",
									"host": [
										"{{baseurl_dc1}}"
									],
									"path": [
										"sor",
										"1"
									],
									"query": [
										{
											"key": "changeId",
											"value": "<string>",
											"disabled": true
										},
										{
											"key": "audit",
											"value": "comment:'imports+stream+of+deltas'",
											"disabled": true
										},
										{
											"key": "consistency",
											"value": "STRONG"
										},
										{
											"key": "facade",
											"value": "false"
										}
									]
								},
								"description": "Imports an arbitrary size stream of deltas and/or JSON objects.  Two formats are supported: array syntax\n     * ('[' object ',' object ',' ... ']') and whitespace-separated objects (object whitespace object whitespace ...)\n     * Each piece of content must have top-level \"~id\" and \"~table\" attributes that determines the table and object\n     * key in the SoR."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sor/1?changeId=<string>&audit=<string>&consistency=STRONG&facade=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sor",
												"1"
											],
											"query": [
												{
													"key": "changeId",
													"value": "<string>"
												},
												{
													"key": "audit",
													"value": "<string>"
												},
												{
													"key": "consistency",
													"value": "STRONG"
												},
												{
													"key": "facade",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"success\": false,\n \"debug\": {}\n}"
								}
							]
						}
					]
				},
				{
					"name": "TC: Request with wrong changeId param",
					"item": [
						{
							"name": "Imports an arbitrary size stream of deltas and/or JSON objects",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.eql(\"Invalid uuid parameter (must be a RFC 4122 version 1 time-based uuid): wrong_changeId\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-BV-API-Key",
										"value": "{{api_key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n         {\n            \"~id\": \"1\",\n            \"~table\": \"{{table}}\",\n            \"table\": \"{{table}}\",\n            \"key\": \"demo1\",\n            \"delta\": \"{\\\"field1\\\":\\\"value1\\\",\\\"field2\\\":\\\"value2\\\",\\\"field3\\\":\\\"value3\\\"}\",\n            \"consistency\": \"STRONG\",\n            \"audit\": {\n              \"comment\": \"Adding demo1 document\"\n            }\n          },\n          {\n            \"~id\": \"1\",\n            \"~table\": \"{{table}}\",\n            \"table\": \"{{table}}\",\n            \"key\": \"demo2\",\n            \"delta\": \"{\\\"field1\\\":\\\"value1.1\\\",\\\"field5\\\":\\\"value5\\\",\\\"field32\\\":\\\"value33\\\"}\",\n            \"consistency\": \"STRONG\",\n            \"audit\": {\n            \"comment\": \"Update and Add\"\n        }\n      }\n]"
								},
								"url": {
									"raw": "{{baseurl_dc1}}/sor/1?changeId=wrong_changeId&audit=comment:'imports+stream+of+deltas'&consistency=STRONG&facade=false",
									"host": [
										"{{baseurl_dc1}}"
									],
									"path": [
										"sor",
										"1"
									],
									"query": [
										{
											"key": "changeId",
											"value": "wrong_changeId"
										},
										{
											"key": "audit",
											"value": "comment:'imports+stream+of+deltas'"
										},
										{
											"key": "consistency",
											"value": "STRONG"
										},
										{
											"key": "facade",
											"value": "false"
										}
									]
								},
								"description": "Imports an arbitrary size stream of deltas and/or JSON objects.  Two formats are supported: array syntax\n     * ('[' object ',' object ',' ... ']') and whitespace-separated objects (object whitespace object whitespace ...)\n     * Each piece of content must have top-level \"~id\" and \"~table\" attributes that determines the table and object\n     * key in the SoR."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sor/1?changeId=<string>&audit=<string>&consistency=STRONG&facade=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sor",
												"1"
											],
											"query": [
												{
													"key": "changeId",
													"value": "<string>"
												},
												{
													"key": "audit",
													"value": "<string>"
												},
												{
													"key": "consistency",
													"value": "STRONG"
												},
												{
													"key": "facade",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"success\": false,\n \"debug\": {}\n}"
								}
							]
						}
					]
				},
				{
					"name": "TC: Request to table without facade, with audit, consistency are set",
					"item": [
						{
							"name": "Creates a table",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set('table', 'postman_'+uuid.v4());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-BV-API-Key",
										"type": "text",
										"value": "{{api_key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
									"host": [
										"{{baseurl_dc1}}"
									],
									"path": [
										"sor",
										"1",
										"_table",
										"{{table}}"
									],
									"query": [
										{
											"key": "options",
											"value": "placement:'ugc_global:ugc'"
										},
										{
											"key": "audit",
											"value": "comment:'initial+provisioning'"
										}
									]
								},
								"description": "Returns a SuccessResponse if table is created"
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"_table",
												":table"
											],
											"query": [
												{
													"key": "options",
													"value": "<string>"
												},
												{
													"key": "audit",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "table"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"success\": false,\n \"debug\": {}\n}"
								}
							]
						},
						{
							"name": "Imports an arbitrary size stream of deltas and/or JSON objects",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.json()).to.eql({ success: true });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-BV-API-Key",
										"value": "{{api_key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n         {\n            \"~id\": \"1\",\n            \"~table\": \"{{table}}\",\n            \"table\": \"{{table}}\",\n            \"key\": \"demo1\",\n            \"delta\": \"{\\\"field1\\\":\\\"value1\\\",\\\"field2\\\":\\\"value2\\\",\\\"field3\\\":\\\"value3\\\"}\",\n            \"consistency\": \"STRONG\",\n            \"audit\": {\n              \"comment\": \"Adding demo1 document\"\n            }\n          },\n          {\n            \"~id\": \"2\",\n            \"~table\": \"{{table}}\",\n            \"table\": \"{{table}}\",\n            \"key\": \"demo2\",\n            \"delta\": \"{\\\"field1\\\":\\\"value1.1\\\",\\\"field5\\\":\\\"value5\\\",\\\"field32\\\":\\\"value33\\\"}\",\n            \"consistency\": \"STRONG\",\n            \"audit\": {\n            \"comment\": \"Update and Add\"\n        }\n      }\n]"
								},
								"url": {
									"raw": "{{baseurl_dc1}}/sor/1?audit=comment:'imports+stream+of+deltas'&consistency=STRONG&facade=false",
									"host": [
										"{{baseurl_dc1}}"
									],
									"path": [
										"sor",
										"1"
									],
									"query": [
										{
											"key": "changeId",
											"value": "<string>",
											"disabled": true
										},
										{
											"key": "audit",
											"value": "comment:'imports+stream+of+deltas'"
										},
										{
											"key": "consistency",
											"value": "STRONG"
										},
										{
											"key": "facade",
											"value": "false"
										}
									]
								},
								"description": "Imports an arbitrary size stream of deltas and/or JSON objects.  Two formats are supported: array syntax\n     * ('[' object ',' object ',' ... ']') and whitespace-separated objects (object whitespace object whitespace ...)\n     * Each piece of content must have top-level \"~id\" and \"~table\" attributes that determines the table and object\n     * key in the SoR."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sor/1?changeId=<string>&audit=<string>&consistency=STRONG&facade=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sor",
												"1"
											],
											"query": [
												{
													"key": "changeId",
													"value": "<string>"
												},
												{
													"key": "audit",
													"value": "<string>"
												},
												{
													"key": "consistency",
													"value": "STRONG"
												},
												{
													"key": "facade",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"success\": false,\n \"debug\": {}\n}"
								}
							]
						},
						{
							"name": "Drops a table",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-BV-API-Key",
										"type": "text",
										"value": "{{api_key}}"
									}
								],
								"url": {
									"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
									"host": [
										"{{baseurl_dc1}}"
									],
									"path": [
										"sor",
										"1",
										"_table",
										"{{table}}"
									],
									"query": [
										{
											"key": "audit",
											"value": "comment:'table_removal'"
										}
									]
								},
								"description": "Returns a SuccessResponse if table is dropped"
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"_table",
												":table"
											],
											"query": [
												{
													"key": "audit",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "table"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"success\": false,\n \"debug\": {}\n}"
								}
							]
						}
					]
				},
				{
					"name": "TC: Request to table without facade, with all params without ~id and ~table",
					"item": [
						{
							"name": "Creates a table",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set('table', 'postman_'+uuid.v4());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-BV-API-Key",
										"type": "text",
										"value": "{{api_key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
									"host": [
										"{{baseurl_dc1}}"
									],
									"path": [
										"sor",
										"1",
										"_table",
										"{{table}}"
									],
									"query": [
										{
											"key": "options",
											"value": "placement:'ugc_global:ugc'"
										},
										{
											"key": "audit",
											"value": "comment:'initial+provisioning'"
										}
									]
								},
								"description": "Returns a SuccessResponse if table is created"
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"_table",
												":table"
											],
											"query": [
												{
													"key": "options",
													"value": "<string>"
												},
												{
													"key": "audit",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "table"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"success\": false,\n \"debug\": {}\n}"
								}
							]
						},
						{
							"name": "Imports an arbitrary size stream of deltas and/or JSON objects",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.eql(\"Unable to cast value to String: null\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-BV-API-Key",
										"value": "{{api_key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n         {\n            \"table\": \"{{table}}\",\n            \"key\": \"demo1\",\n            \"delta\": \"{\\\"field1\\\":\\\"value1\\\",\\\"field2\\\":\\\"value2\\\",\\\"field3\\\":\\\"value3\\\"}\",\n            \"consistency\": \"STRONG\",\n            \"audit\": {\n              \"comment\": \"Adding demo1 document\"\n            }\n          },\n          {\n            \"~id\": \"2\",\n            \"~table\": \"{{table}}\",\n            \"table\": \"{{table}}\",\n            \"key\": \"demo2\",\n            \"delta\": \"{\\\"field1\\\":\\\"value1.1\\\",\\\"field5\\\":\\\"value5\\\",\\\"field32\\\":\\\"value33\\\"}\",\n            \"consistency\": \"STRONG\",\n            \"audit\": {\n            \"comment\": \"Update and Add\"\n        }\n      }\n]"
								},
								"url": {
									"raw": "{{baseurl_dc1}}/sor/1?audit=comment:'imports+stream+of+deltas'&consistency=STRONG&facade=false",
									"host": [
										"{{baseurl_dc1}}"
									],
									"path": [
										"sor",
										"1"
									],
									"query": [
										{
											"key": "changeId",
											"value": "<string>",
											"disabled": true
										},
										{
											"key": "audit",
											"value": "comment:'imports+stream+of+deltas'"
										},
										{
											"key": "consistency",
											"value": "STRONG"
										},
										{
											"key": "facade",
											"value": "false"
										}
									]
								},
								"description": "Imports an arbitrary size stream of deltas and/or JSON objects.  Two formats are supported: array syntax\n     * ('[' object ',' object ',' ... ']') and whitespace-separated objects (object whitespace object whitespace ...)\n     * Each piece of content must have top-level \"~id\" and \"~table\" attributes that determines the table and object\n     * key in the SoR."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sor/1?changeId=<string>&audit=<string>&consistency=STRONG&facade=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sor",
												"1"
											],
											"query": [
												{
													"key": "changeId",
													"value": "<string>"
												},
												{
													"key": "audit",
													"value": "<string>"
												},
												{
													"key": "consistency",
													"value": "STRONG"
												},
												{
													"key": "facade",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"success\": false,\n \"debug\": {}\n}"
								}
							]
						},
						{
							"name": "Drops a table",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-BV-API-Key",
										"type": "text",
										"value": "{{api_key}}"
									}
								],
								"url": {
									"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
									"host": [
										"{{baseurl_dc1}}"
									],
									"path": [
										"sor",
										"1",
										"_table",
										"{{table}}"
									],
									"query": [
										{
											"key": "audit",
											"value": "comment:'table_removal'"
										}
									]
								},
								"description": "Returns a SuccessResponse if table is dropped"
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"_table",
												":table"
											],
											"query": [
												{
													"key": "audit",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "table"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"success\": false,\n \"debug\": {}\n}"
								}
							]
						}
					]
				},
				{
					"name": "TC: Request to table without facade, with all params with application/x.json-deltas content",
					"item": [
						{
							"name": "Creates a table",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set('table', 'postman_'+uuid.v4());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-BV-API-Key",
										"type": "text",
										"value": "{{api_key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
									"host": [
										"{{baseurl_dc1}}"
									],
									"path": [
										"sor",
										"1",
										"_table",
										"{{table}}"
									],
									"query": [
										{
											"key": "options",
											"value": "placement:'ugc_global:ugc'"
										},
										{
											"key": "audit",
											"value": "comment:'initial+provisioning'"
										}
									]
								},
								"description": "Returns a SuccessResponse if table is created"
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"_table",
												":table"
											],
											"query": [
												{
													"key": "options",
													"value": "<string>"
												},
												{
													"key": "audit",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "table"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"success\": false,\n \"debug\": {}\n}"
								}
							]
						},
						{
							"name": "Imports an arbitrary size stream of deltas and/or JSON objects",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-BV-API-Key",
										"value": "{{api_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/x.json-deltas",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"~id\": \"1\",\n    \"~table\": \"{{table}}\",\n    \"table\": \"{{table}}\",\n    \"key\": \"demo1\",\n    \"delta\": \"{\\\"field1\\\":\\\"value1\\\",\\\"field2\\\":\\\"value2\\\",\\\"field3\\\":\\\"value3\\\"}\",\n    \"consistency\": \"STRONG\",\n    \"audit\": {\n        \"comment\": \"Adding demo1 document\"\n    }\n} \n{\n    \"~id\": \"2\",\n    \"~table\": \"{{table}}\",\n    \"table\": \"{{table}}\",\n    \"key\": \"demo2\",\n    \"delta\": \"{\\\"field1\\\":\\\"value1.1\\\",\\\"field5\\\":\\\"value5\\\",\\\"field32\\\":\\\"value33\\\"}\",\n    \"consistency\": \"STRONG\",\n    \"audit\": {\n        \"comment\": \"Update and Add\"\n    }\n}\n"
								},
								"url": {
									"raw": "{{baseurl_dc1}}/sor/1?audit=comment:'imports+stream+of+deltas'&consistency=STRONG&facade=false",
									"host": [
										"{{baseurl_dc1}}"
									],
									"path": [
										"sor",
										"1"
									],
									"query": [
										{
											"key": "changeId",
											"value": "<string>",
											"disabled": true
										},
										{
											"key": "audit",
											"value": "comment:'imports+stream+of+deltas'"
										},
										{
											"key": "consistency",
											"value": "STRONG"
										},
										{
											"key": "facade",
											"value": "false"
										}
									]
								},
								"description": "Imports an arbitrary size stream of deltas and/or JSON objects.  Two formats are supported: array syntax\n     * ('[' object ',' object ',' ... ']') and whitespace-separated objects (object whitespace object whitespace ...)\n     * Each piece of content must have top-level \"~id\" and \"~table\" attributes that determines the table and object\n     * key in the SoR."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sor/1?changeId=<string>&audit=<string>&consistency=STRONG&facade=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sor",
												"1"
											],
											"query": [
												{
													"key": "changeId",
													"value": "<string>"
												},
												{
													"key": "audit",
													"value": "<string>"
												},
												{
													"key": "consistency",
													"value": "STRONG"
												},
												{
													"key": "facade",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"success\": false,\n \"debug\": {}\n}"
								}
							]
						},
						{
							"name": "Drops a table",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-BV-API-Key",
										"type": "text",
										"value": "{{api_key}}"
									}
								],
								"url": {
									"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
									"host": [
										"{{baseurl_dc1}}"
									],
									"path": [
										"sor",
										"1",
										"_table",
										"{{table}}"
									],
									"query": [
										{
											"key": "audit",
											"value": "comment:'table_removal'"
										}
									]
								},
								"description": "Returns a SuccessResponse if table is dropped"
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"_table",
												":table"
											],
											"query": [
												{
													"key": "audit",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "table"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"success\": false,\n \"debug\": {}\n}"
								}
							]
						}
					]
				},
				{
					"name": "TC: Request to table with facade, with audit, consistency are set",
					"item": [
						{
							"name": "Creates a table",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set('table', 'postman_'+uuid.v4());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-BV-API-Key",
										"type": "text",
										"value": "{{api_key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
									"host": [
										"{{baseurl_dc1}}"
									],
									"path": [
										"sor",
										"1",
										"_table",
										"{{table}}"
									],
									"query": [
										{
											"key": "options",
											"value": "placement:'ugc_global:ugc'"
										},
										{
											"key": "audit",
											"value": "comment:'initial+provisioning'"
										}
									]
								},
								"description": "Returns a SuccessResponse if table is created"
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"_table",
												":table"
											],
											"query": [
												{
													"key": "options",
													"value": "<string>"
												},
												{
													"key": "audit",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "table"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"success\": false,\n \"debug\": {}\n}"
								}
							]
						},
						{
							"name": "Creates a facade",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost'); ",
											"",
											"(isLocal ? pm.test.skip : pm.test)(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"(isLocal ? pm.test.skip : pm.test)(\"Body matches string\", function () {",
											"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-BV-Api-Key",
										"value": "{{api_key}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}?options=placement:'ugc_us:ugc'&audit=audit=comment:'initial+facade+provisioning'",
									"host": [
										"{{baseurl_dc2}}"
									],
									"path": [
										"sor",
										"1",
										"_facade",
										"{{table}}"
									],
									"query": [
										{
											"key": "options",
											"value": "placement:'ugc_us:ugc'"
										},
										{
											"key": "audit",
											"value": "audit=comment:'initial+facade+provisioning'"
										}
									]
								},
								"description": "Returns a SuccessResponse if facade is created"
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sor/1/_facade/:table?options=<string>&audit=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sor",
												"1",
												"_facade",
												":table"
											],
											"query": [
												{
													"key": "options",
													"value": "<string>"
												},
												{
													"key": "audit",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "table"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"success\": false,\n \"debug\": {}\n}"
								}
							]
						},
						{
							"name": "Imports an arbitrary size stream of deltas and/or JSON objects",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.eql(\"Access denied. Update intended for a facade, but the table would be updated.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-BV-API-Key",
										"value": "{{api_key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n         {\n            \"~id\": \"1\",\n            \"~table\": \"{{table}}\",\n            \"table\": \"{{table}}\",\n            \"key\": \"demo1\",\n            \"delta\": \"{\\\"field1\\\":\\\"value1\\\",\\\"field2\\\":\\\"value2\\\",\\\"field3\\\":\\\"value3\\\"}\",\n            \"consistency\": \"STRONG\",\n            \"audit\": {\n              \"comment\": \"Adding demo1 document\"\n            }\n          },\n          {\n            \"~id\": \"2\",\n            \"~table\": \"{{table}}\",\n            \"table\": \"{{table}}\",\n            \"key\": \"demo2\",\n            \"delta\": \"{\\\"field1\\\":\\\"value1.1\\\",\\\"field5\\\":\\\"value5\\\",\\\"field32\\\":\\\"value33\\\"}\",\n            \"consistency\": \"STRONG\",\n            \"audit\": {\n            \"comment\": \"Update and Add\"\n        }\n      }\n]"
								},
								"url": {
									"raw": "{{baseurl_dc1}}/sor/1?audit=comment:'imports+stream+of+deltas'&consistency=STRONG&facade=true",
									"host": [
										"{{baseurl_dc1}}"
									],
									"path": [
										"sor",
										"1"
									],
									"query": [
										{
											"key": "changeId",
											"value": "<string>",
											"disabled": true
										},
										{
											"key": "audit",
											"value": "comment:'imports+stream+of+deltas'"
										},
										{
											"key": "consistency",
											"value": "STRONG"
										},
										{
											"key": "facade",
											"value": "true"
										}
									]
								},
								"description": "Imports an arbitrary size stream of deltas and/or JSON objects.  Two formats are supported: array syntax\n     * ('[' object ',' object ',' ... ']') and whitespace-separated objects (object whitespace object whitespace ...)\n     * Each piece of content must have top-level \"~id\" and \"~table\" attributes that determines the table and object\n     * key in the SoR."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sor/1?changeId=<string>&audit=<string>&consistency=STRONG&facade=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sor",
												"1"
											],
											"query": [
												{
													"key": "changeId",
													"value": "<string>"
												},
												{
													"key": "audit",
													"value": "<string>"
												},
												{
													"key": "consistency",
													"value": "STRONG"
												},
												{
													"key": "facade",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"success\": false,\n \"debug\": {}\n}"
								}
							]
						},
						{
							"name": "Drops a table",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-BV-API-Key",
										"type": "text",
										"value": "{{api_key}}"
									}
								],
								"url": {
									"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
									"host": [
										"{{baseurl_dc1}}"
									],
									"path": [
										"sor",
										"1",
										"_table",
										"{{table}}"
									],
									"query": [
										{
											"key": "audit",
											"value": "comment:'table_removal'"
										}
									]
								},
								"description": "Returns a SuccessResponse if table is dropped"
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"_table",
												":table"
											],
											"query": [
												{
													"key": "audit",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "table"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"success\": false,\n \"debug\": {}\n}"
								}
							]
						}
					]
				},
				{
					"name": "TC: Request to table with facade is true, with audit, consistency are set. To datacenter with facade",
					"item": [
						{
							"name": "Creates a table",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set('table', 'postman_'+uuid.v4());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost'); ",
											"",
											"(isLocal ? pm.test.skip : pm.test)(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"(isLocal ? pm.test.skip : pm.test)(\"Body matches string\", function () {",
											"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-BV-API-Key",
										"type": "text",
										"value": "{{api_key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_eu:ugc'&audit=comment:'initial+provisioning'",
									"host": [
										"{{baseurl_dc1}}"
									],
									"path": [
										"sor",
										"1",
										"_table",
										"{{table}}"
									],
									"query": [
										{
											"key": "options",
											"value": "placement:'ugc_eu:ugc'"
										},
										{
											"key": "audit",
											"value": "comment:'initial+provisioning'"
										}
									]
								},
								"description": "Returns a SuccessResponse if table is created"
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"_table",
												":table"
											],
											"query": [
												{
													"key": "options",
													"value": "<string>"
												},
												{
													"key": "audit",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "table"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"success\": false,\n \"debug\": {}\n}"
								}
							]
						},
						{
							"name": "Creates a facade",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost'); ",
											"",
											"(isLocal ? pm.test.skip : pm.test)(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"(isLocal ? pm.test.skip : pm.test)(\"Body matches string\", function () {",
											"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-BV-Api-Key",
										"value": "{{api_key}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}?options=placement:'ugc_us:ugc'&audit=audit=comment:'initial+facade+provisioning'",
									"host": [
										"{{baseurl_dc2}}"
									],
									"path": [
										"sor",
										"1",
										"_facade",
										"{{table}}"
									],
									"query": [
										{
											"key": "options",
											"value": "placement:'ugc_us:ugc'"
										},
										{
											"key": "audit",
											"value": "audit=comment:'initial+facade+provisioning'"
										}
									]
								},
								"description": "Returns a SuccessResponse if facade is created"
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sor/1/_facade/:table?options=<string>&audit=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sor",
												"1",
												"_facade",
												":table"
											],
											"query": [
												{
													"key": "options",
													"value": "<string>"
												},
												{
													"key": "audit",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "table"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"success\": false,\n \"debug\": {}\n}"
								}
							]
						},
						{
							"name": "Imports an arbitrary size stream of deltas and/or JSON objects",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost'); ",
											"",
											"(isLocal ? pm.test.skip : pm.test)(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"(isLocal ? pm.test.skip : pm.test)(\"Body matches string\", function () {",
											"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-BV-API-Key",
										"value": "{{api_key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n         {\n            \"~id\": \"1\",\n            \"~table\": \"{{table}}\",\n            \"table\": \"{{table}}\",\n            \"key\": \"demo1\",\n            \"delta\": \"{\\\"field1\\\":\\\"value1\\\",\\\"field2\\\":\\\"value2\\\",\\\"field3\\\":\\\"value3\\\"}\",\n            \"consistency\": \"STRONG\",\n            \"audit\": {\n              \"comment\": \"Adding demo1 document\"\n            }\n          },\n          {\n            \"~id\": \"2\",\n            \"~table\": \"{{table}}\",\n            \"table\": \"{{table}}\",\n            \"key\": \"demo2\",\n            \"delta\": \"{\\\"field1\\\":\\\"value1.1\\\",\\\"field5\\\":\\\"value5\\\",\\\"field32\\\":\\\"value33\\\"}\",\n            \"consistency\": \"STRONG\",\n            \"audit\": {\n            \"comment\": \"Update and Add\"\n        }\n      }\n]"
								},
								"url": {
									"raw": "{{baseurl_dc2}}/sor/1?audit=comment:'imports+stream+of+deltas'&consistency=STRONG&facade=true",
									"host": [
										"{{baseurl_dc2}}"
									],
									"path": [
										"sor",
										"1"
									],
									"query": [
										{
											"key": "changeId",
											"value": "<string>",
											"disabled": true
										},
										{
											"key": "audit",
											"value": "comment:'imports+stream+of+deltas'"
										},
										{
											"key": "consistency",
											"value": "STRONG"
										},
										{
											"key": "facade",
											"value": "true"
										}
									]
								},
								"description": "Imports an arbitrary size stream of deltas and/or JSON objects.  Two formats are supported: array syntax\n     * ('[' object ',' object ',' ... ']') and whitespace-separated objects (object whitespace object whitespace ...)\n     * Each piece of content must have top-level \"~id\" and \"~table\" attributes that determines the table and object\n     * key in the SoR."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sor/1?changeId=<string>&audit=<string>&consistency=STRONG&facade=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sor",
												"1"
											],
											"query": [
												{
													"key": "changeId",
													"value": "<string>"
												},
												{
													"key": "audit",
													"value": "<string>"
												},
												{
													"key": "consistency",
													"value": "STRONG"
												},
												{
													"key": "facade",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"success\": false,\n \"debug\": {}\n}"
								}
							]
						},
						{
							"name": "Imports an arbitrary size stream of deltas and/or JSON objects Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost'); ",
											"",
											"(isLocal ? pm.test.skip : pm.test)(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"(isLocal ? pm.test.skip : pm.test)(\"Body matches string\", function () {",
											"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-BV-API-Key",
										"value": "{{api_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/x.json-deltas",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"~id\": \"1\",\n\"~table\": \"{{table}}\",\n\"table\": \"{{table}}\",\n\"key\": \"demo1\",\n\"delta\": \"{\\\"field1\\\":\\\"value1\\\",\\\"field2\\\":\\\"value2\\\",\\\"field3\\\":\\\"value3\\\"}\",\n\"consistency\": \"STRONG\",\n\"audit\": {\n\"comment\": \"Adding demo1 document\"\n}} \n{\n\"~id\": \"2\",\n            \"~table\": \"{{table}}\",\n            \"table\": \"{{table}}\",\n            \"key\": \"demo2\",\n            \"delta\": \"{\\\"field1\\\":\\\"value1.1\\\",\\\"field5\\\":\\\"value5\\\",\\\"field32\\\":\\\"value33\\\"}\",\n            \"consistency\": \"STRONG\",\n            \"audit\": {\n            \"comment\": \"Update and Add\"\n        }\n      }",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{baseurl_dc2}}/sor/1?audit=comment:'imports+stream+of+deltas'&consistency=STRONG&facade=true",
									"host": [
										"{{baseurl_dc2}}"
									],
									"path": [
										"sor",
										"1"
									],
									"query": [
										{
											"key": "changeId",
											"value": "<string>",
											"disabled": true
										},
										{
											"key": "audit",
											"value": "comment:'imports+stream+of+deltas'"
										},
										{
											"key": "consistency",
											"value": "STRONG"
										},
										{
											"key": "facade",
											"value": "true"
										}
									]
								},
								"description": "Imports an arbitrary size stream of deltas and/or JSON objects.  Two formats are supported: array syntax\n     * ('[' object ',' object ',' ... ']') and whitespace-separated objects (object whitespace object whitespace ...)\n     * Each piece of content must have top-level \"~id\" and \"~table\" attributes that determines the table and object\n     * key in the SoR."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sor/1?changeId=<string>&audit=<string>&consistency=STRONG&facade=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sor",
												"1"
											],
											"query": [
												{
													"key": "changeId",
													"value": "<string>"
												},
												{
													"key": "audit",
													"value": "<string>"
												},
												{
													"key": "consistency",
													"value": "STRONG"
												},
												{
													"key": "facade",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"success\": false,\n \"debug\": {}\n}"
								}
							]
						},
						{
							"name": "Drops a table",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost'); ",
											"",
											"(isLocal ? pm.test.skip : pm.test)(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"(isLocal ? pm.test.skip : pm.test)(\"Body matches string\", function () {",
											"    pm.expect(pm.response.json()).to.eql({ \"success\": true });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-BV-API-Key",
										"type": "text",
										"value": "{{api_key}}"
									}
								],
								"url": {
									"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
									"host": [
										"{{baseurl_dc1}}"
									],
									"path": [
										"sor",
										"1",
										"_table",
										"{{table}}"
									],
									"query": [
										{
											"key": "audit",
											"value": "comment:'table_removal'"
										}
									]
								},
								"description": "Returns a SuccessResponse if table is dropped"
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"_table",
												":table"
											],
											"query": [
												{
													"key": "audit",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "table"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"success\": false,\n \"debug\": {}\n}"
								}
							]
						}
					]
				},
				{
					"name": "Imports an arbitrary size stream of deltas and/or JSON objects",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"<string>\",\n    \"authenticationId\": \"<string>\"\n}"
						},
						"url": {
							"raw": "{{baseurl_dc1}}/sor/1?changeId=<string>&audit=<string>&consistency=STRONG&facade=<string>",
							"host": [
								"{{baseurl_dc1}}"
							],
							"path": [
								"sor",
								"1"
							],
							"query": [
								{
									"key": "changeId",
									"value": "<string>"
								},
								{
									"key": "audit",
									"value": "<string>"
								},
								{
									"key": "consistency",
									"value": "STRONG"
								},
								{
									"key": "facade",
									"value": "<string>"
								}
							]
						},
						"description": "Imports an arbitrary size stream of deltas and/or JSON objects.  Two formats are supported: array syntax\n     * ('[' object ',' object ',' ... ']') and whitespace-separated objects (object whitespace object whitespace ...)\n     * Each piece of content must have top-level \"~id\" and \"~table\" attributes that determines the table and object\n     * key in the SoR."
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/sor/1?changeId=<string>&audit=<string>&consistency=STRONG&facade=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sor",
										"1"
									],
									"query": [
										{
											"key": "changeId",
											"value": "<string>"
										},
										{
											"key": "audit",
											"value": "<string>"
										},
										{
											"key": "consistency",
											"value": "STRONG"
										},
										{
											"key": "facade",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"success\": false,\n \"debug\": {}\n}"
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"/**",
					" * Waits until the given predicate returns a truthy value. Calls and awaits the predicate",
					" * function at the given interval time. Can be used to poll until a certain condition is true.",
					" *",
					" * @example",
					" * ```js",
					" * import { fixture, waitUntil } from '@open-wc/testing-helpers';",
					" *",
					" * const element = await fixture(html`<my-element></my-element>`);",
					" *",
					" * await waitUntil(() => element.someAsyncProperty, 'element should become ready');",
					" *",
					"",
					" *",
					" * @param {() => boolean | Promise<boolean>} predicate - predicate function which is called each poll interval.",
					" *   The predicate is awaited, so it can return a promise.",
					" * @param {string} [message] an optional message to display when the condition timed out",
					" * @param {{ interval?: number, timeout?: number }} [options] timeout and polling interval",
					" */",
					"waitUntil = (setTimeout, clearTimeout, predicate, message, options = {}) => {",
					"  const { interval = 1000, timeout = 120000 } = options;",
					"",
					"  return new Promise((resolve, reject) => {",
					"    let timeoutId;",
					"    let failTimeoutId;",
					"",
					"    failTimeoutId = setTimeout(() => {",
					"      clearTimeout(timeoutId);",
					"      try {",
					"          pm.expect.fail(message ? `Timeout: ${message}` : `waitUntil timed out after ${timeout}ms`);",
					"      } catch(err) {",
					"          reject(err);",
					"      }",
					"    }, timeout);",
					"",
					"    async function nextInterval() {",
					"      try {",
					"        const result = await predicate();",
					"        if (result) {",
					"          clearTimeout(failTimeoutId);",
					"          resolve();",
					"        } else {",
					"          timeoutId = setTimeout(function() {",
					"            nextInterval();",
					"          }, interval);",
					"        }",
					"      } catch (error) {",
					"        clearTimeout(failTimeoutId);",
					"        reject(error);",
					"      }",
					"    }",
					"    nextInterval();",
					"  });",
					"};",
					"",
					"asyncTest = (cb) => {",
					"    return (done) => {",
					"        try {",
					"            cb(done).then(() => done()).catch((err) => done(err));",
					"        } catch (err) {",
					"            done(err);",
					"        }",
					"    };",
					"}",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}