{
	"info": {
		"_postman_id": "d0f2123b-1ed3-4c8a-9eed-54455464c605",
		"name": "EmoDB_Tests_sor_facade",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "facade test cases",
			"item": [
				{
					"name": "{table}",
					"item": [
						{
							"name": "Creates a facade",
							"item": [
								{
									"name": "TC: Request without api-key",
									"item": [
										{
											"name": "Creates a facade",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"reason\":\"not authorized\"});",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('table', 'table_'+uuid.v4());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-BV-Api-Key",
														"value": "{{api_key_no_rights}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_facade/{{table}}?options={{options_eu}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_facade",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "{{options_eu}}"
														},
														{
															"key": "audit",
															"value": "",
															"disabled": true
														}
													]
												},
												"description": "Returns a SuccessResponse if facade is created"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_facade/{{table}}",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": ""
																},
																{
																	"key": "audit",
																	"value": ""
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Request for creating facade for not existing table",
									"item": [
										{
											"name": "Creates a facade",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"message\":`Unknown table: ${pm.environment.get('table')}`,\"table\":`${pm.environment.get('table')}`,\"suppressed\":[]});",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('table', 'table_'+uuid.v4());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-BV-Api-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_facade/{{table}}?options={{options_us}}&audit=comment:'initial+facade+provisioning'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_facade",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "{{options_us}}"
														},
														{
															"key": "audit",
															"value": "comment:'initial+facade+provisioning'"
														}
													]
												},
												"description": "Returns a SuccessResponse if facade is created"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_facade/{{table}}",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": ""
																},
																{
																	"key": "audit",
																	"value": ""
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Create facade without option param",
									"item": [
										{
											"name": "Creates table /sor/1/_table/{table}",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('table', 'table_'+uuid.v4());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options={{options_us}}&audit=comment:'initial+provisioning'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "{{options_us}}"
														},
														{
															"key": "audit",
															"value": "comment:'initial+provisioning'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is created"
											},
											"response": []
										},
										{
											"name": "Creates a facade",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.text()).to.eql(\"Missing required query parameter: options\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-BV-Api-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}",
													"host": [
														"{{baseurl_dc2}}"
													],
													"path": [
														"sor",
														"1",
														"_facade",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "{{options_eu}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "",
															"disabled": true
														}
													]
												},
												"description": "Returns a SuccessResponse if facade is created"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_facade/{{table}}?options=&audit=",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": ""
																},
																{
																	"key": "audit",
																	"value": ""
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Drops a table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "comment:'table_removal'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is dropped"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": ""
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Create facade in the same placement with table",
									"item": [
										{
											"name": "Creates table /sor/1/_table/{table}",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('table', 'table_'+uuid.v4());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options={{options_us}}&audit=comment:'initial+provisioning'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "{{options_us}}"
														},
														{
															"key": "audit",
															"value": "comment:'initial+provisioning'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is created"
											},
											"response": []
										},
										{
											"name": "Creates a facade",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
															"const retryRequest = eval(retryRequestCall.retryRequest);",
															"",
															"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
															"",
															"if(isLocal == false) {",
															"    var response = pm.response;",
															"",
															"    pm.test(\"Assert response\", asyncTest(async function () {",
															"        if (response.code == 500) {",
															"            await waitUntil(setTimeout, clearTimeout, async () => {",
															"                response = await retryRequest();",
															"                return response.code !== 500;",
															"            }, \"Retrying until there is facade available \");",
															"        }",
															"        pm.expect(response.code).to.eql(400);",
															"        pm.expect(response.text()).to.eql(\"Cannot create a facade in the same placement as its table: ugc_us:ugc\");",
															"    }));",
															"}",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const url = `${pm.environment.get(\"baseurl_dc2\")}/sor/1/_facade/${pm.environment.get(\"table\")}?options=${pm.environment.get(\"options_us\")}&audit=comment:'initial+facade+provisioning'`;",
															"",
															"pm.environment.set(\"url\", url);",
															"pm.environment.set(\"method\", \"PUT\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-BV-Api-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}?options={{options_us}}&audit=comment:'initial+facade+provisioning'",
													"host": [
														"{{baseurl_dc2}}"
													],
													"path": [
														"sor",
														"1",
														"_facade",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "{{options_us}}"
														},
														{
															"key": "audit",
															"value": "comment:'initial+facade+provisioning'"
														}
													]
												},
												"description": "Returns a SuccessResponse if facade is created"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}?options=&audit=",
															"host": [
																"{{baseurl_dc2}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": ""
																},
																{
																	"key": "audit",
																	"value": ""
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Drops a table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
															"const retryRequest = eval(retryRequestCall.retryRequest);",
															"",
															"var response = pm.response;",
															"",
															"pm.test(\"Assert response\", asyncTest(async function () {",
															"    if (response.code == 500) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.code !== 500;",
															"        }, \"Retrying until there is facade available \");",
															"    }",
															"    pm.expect(response.code).to.eql(200);",
															"    pm.expect(response.json()).to.eql({\"success\":true});",
															"}));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const url = `${pm.environment.get(\"baseurl_dc2\")}/sor/1/_table/${pm.environment.get(\"table\")}?audit=comment:'table_removal'`;",
															"",
															"pm.environment.set(\"url\", url);",
															"pm.environment.set(\"method\", \"DELETE\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"url": {
													"raw": "{{baseurl_dc2}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
													"host": [
														"{{baseurl_dc2}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "comment:'table_removal'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is dropped"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": ""
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Create facade in not existing pacement",
									"item": [
										{
											"name": "Creates table /sor/1/_table/{table}",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('table', 'table_'+uuid.v4());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options={{options_us}}&audit=comment:'initial+provisioning'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "{{options_us}}"
														},
														{
															"key": "audit",
															"value": "comment:'initial+provisioning'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is created"
											},
											"response": []
										},
										{
											"name": "Creates a facade",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
															"const retryRequest = eval(retryRequestCall.retryRequest);",
															"",
															"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
															"",
															"if(isLocal == false) {",
															"    var response = pm.response;",
															"",
															"    pm.test(\"Assert response\", asyncTest(async function () {",
															"        if (response.code == 500) {",
															"            await waitUntil(setTimeout, clearTimeout, async () => {",
															"                response = await retryRequest();",
															"                return response.code !== 500;",
															"            }, \"Retrying until there is facade available \");",
															"        }",
															"        pm.expect(response.code).to.eql(400);",
															"        pm.expect(response.text()).to.eql(\"Unknown placement string: not_existing:placement\");",
															"    }));",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const url = `${pm.environment.get(\"baseurl_dc2\")}/sor/1/_facade/${pm.environment.get(\"table\")}?options=placement:'not_existing:placement'&audit=comment:'initial+facade+provisioning'`;",
															"",
															"pm.environment.set(\"url\", url);",
															"pm.environment.set(\"method\", \"PUT\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-BV-Api-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}?options=placement:'not_existing:placement'&audit=comment:'initial+facade+provisioning'",
													"host": [
														"{{baseurl_dc2}}"
													],
													"path": [
														"sor",
														"1",
														"_facade",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "placement:'not_existing:placement'"
														},
														{
															"key": "audit",
															"value": "comment:'initial+facade+provisioning'"
														}
													]
												},
												"description": "Returns a SuccessResponse if facade is created"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_facade/{{table}}?options=&audit=",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": ""
																},
																{
																	"key": "audit",
																	"value": ""
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Drops a table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "comment:'table_removal'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is dropped"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": ""
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Create facade",
									"item": [
										{
											"name": "Creates table /sor/1/_table/{table}",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('table', 'table_'+uuid.v4());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options={{options_us}}&audit=comment:'initial+provisioning'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "{{options_us}}"
														},
														{
															"key": "audit",
															"value": "comment:'initial+provisioning'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is created"
											},
											"response": []
										},
										{
											"name": "Creates a facade",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
															"const retryRequest = eval(retryRequestCall.retryRequest);",
															"",
															"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
															"",
															"if(isLocal == false) {",
															"    var response = pm.response;",
															"",
															"    pm.test(\"Assert response\", asyncTest(async function () {",
															"        if (response.code == 500) {",
															"            await waitUntil(setTimeout, clearTimeout, async () => {",
															"                response = await retryRequest();",
															"                return response.code !== 500;",
															"            }, \"Retrying until there is facade available \");",
															"        }",
															"        pm.expect(response.code).to.eql(200);",
															"        pm.expect(response.json()).to.eql({\"success\":true});",
															"    }));",
															"}",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const url = `${pm.environment.get(\"baseurl_dc1\")}/sor/1/_facade/${pm.environment.get(\"table\")}?options=${pm.environment.get(\"options_eu\")}&audit=comment:'initial+facade+provisioning'`;",
															"",
															"pm.environment.set(\"url\", url);",
															"pm.environment.set(\"method\", \"PUT\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-BV-Api-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}?options={{options_eu}}&audit=comment:'initial+facade+provisioning'",
													"host": [
														"{{baseurl_dc2}}"
													],
													"path": [
														"sor",
														"1",
														"_facade",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "{{options_eu}}"
														},
														{
															"key": "audit",
															"value": "comment:'initial+facade+provisioning'"
														}
													]
												},
												"description": "Returns a SuccessResponse if facade is created"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_facade/{{table}}?options=&audit=",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": ""
																},
																{
																	"key": "audit",
																	"value": ""
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Drops a table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "comment:'table_removal'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is dropped"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": ""
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Create facade without audit param",
									"item": [
										{
											"name": "Creates table /sor/1/_table/{table}",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('table', 'table_'+uuid.v4());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options={{options_us}}&audit=comment:'initial+provisioning'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "{{options_us}}"
														},
														{
															"key": "audit",
															"value": "comment:'initial+provisioning'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is created"
											},
											"response": []
										},
										{
											"name": "Creates a facade",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.text()).to.eql(\"Missing required query parameter: audit\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-BV-Api-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}?options={{options_eu}}",
													"host": [
														"{{baseurl_dc2}}"
													],
													"path": [
														"sor",
														"1",
														"_facade",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "{{options_eu}}"
														}
													]
												},
												"description": "Returns a SuccessResponse if facade is created"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}?options=&audit=",
															"host": [
																"{{baseurl_dc2}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": ""
																},
																{
																	"key": "audit",
																	"value": ""
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Drops a table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "comment:'table_removal'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is dropped"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": ""
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "{key}",
							"item": [
								{
									"name": "Creates or replaces a piece of content of a facade in the data store",
									"item": [
										{
											"name": "TC: Request without api-key",
											"item": [
												{
													"name": "Creates or replaces a piece of content of a facade in the data store",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {",
																	"    pm.response.to.have.status(403);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"reason\":\"not authorized\"});",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key_no_rights}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_facade/{table}/{key}?consistency=STRONG",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{table}",
																"{key}"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "",
																	"disabled": true
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "",
																	"disabled": true
																},
																{
																	"key": "tag",
																	"value": "",
																	"disabled": true
																},
																{
																	"key": "debug",
																	"value": "",
																	"disabled": true
																}
															]
														},
														"description": "Creates or replaces a piece of content of a facade in the data store.  Overwrites the old\n version of the content, if it exists.  Expects a literal JSON representation\n of the object."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_facade/{{table}}/{{key}}?changeId=&audit=&consistency=STRONG&tag=&tag=&debug=",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{{table}}",
																		"{{key}}"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": ""
																		},
																		{
																			"key": "audit",
																			"value": ""
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": ""
																		},
																		{
																			"key": "tag",
																			"value": ""
																		},
																		{
																			"key": "debug",
																			"value": ""
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "TC: Request without audit param",
											"item": [
												{
													"name": "Creates or replaces a piece of content of a facade in the data store",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.text()).to.eql('Missing required query parameter: audit');",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_facade/{table}/{key}?consistency=STRONG&tag=postman&tag=postman1&debug=true",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{table}",
																"{key}"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "",
																	"disabled": true
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "postman"
																},
																{
																	"key": "tag",
																	"value": "postman1"
																},
																{
																	"key": "debug",
																	"value": "true"
																}
															]
														},
														"description": "Creates or replaces a piece of content of a facade in the data store.  Overwrites the old\n version of the content, if it exists.  Expects a literal JSON representation\n of the object."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_facade/{{table}}/{{key}}?changeId=&audit=&consistency=STRONG&tag=&tag=&debug=",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{{table}}",
																		"{{key}}"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": ""
																		},
																		{
																			"key": "audit",
																			"value": ""
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": ""
																		},
																		{
																			"key": "tag",
																			"value": ""
																		},
																		{
																			"key": "debug",
																			"value": ""
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "TC: Request to not existing table",
											"item": [
												{
													"name": "Creates or replaces a piece of content of a facade in the data store",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 404\", function () {",
																	"    pm.response.to.have.status(404);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"message\":\"Unknown table: not_exiting_table\",\"table\":\"not_exiting_table\",\"suppressed\":[]});",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-APi-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_facade/not_exiting_table/{{key}}?audit=comment:'create+replace+piece+of+data'&consistency=STRONG&tag=postman&tag=postman1&debug=true",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"not_exiting_table",
																"{{key}}"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "comment:'create+replace+piece+of+data'"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "postman"
																},
																{
																	"key": "tag",
																	"value": "postman1"
																},
																{
																	"key": "debug",
																	"value": "true"
																}
															]
														},
														"description": "Creates or replaces a piece of content of a facade in the data store.  Overwrites the old\n version of the content, if it exists.  Expects a literal JSON representation\n of the object."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_facade/{{table}}/{{key}}?changeId=&audit=&consistency=STRONG&tag=&tag=&debug=",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{{table}}",
																		"{{key}}"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": ""
																		},
																		{
																			"key": "audit",
																			"value": ""
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": ""
																		},
																		{
																			"key": "tag",
																			"value": ""
																		},
																		{
																			"key": "debug",
																			"value": ""
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "TC: Request to table instead of facade",
											"item": [
												{
													"name": "Creates table /sor/1/_table/{table}",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"pm.environment.set('table', 'table_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options={{options_us}}&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "{{options_us}}"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": []
												},
												{
													"name": "Creates or replaces a piece of content of a facade in the data store",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 403\", function () {",
																	"        pm.response.to.have.status(403);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.text()).to.eql('Access denied. Update intended for a facade, but the table would be updated.');",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_facade/{{table}}/{{key}}?audit=comment:'update+piece+of+content'&consistency=STRONG&tag=postman&tag=postman1&debug=true",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}",
																"{{key}}"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "comment:'update+piece+of+content'"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "postman"
																},
																{
																	"key": "tag",
																	"value": "postman1"
																},
																{
																	"key": "debug",
																	"value": "true"
																}
															]
														},
														"description": "Creates or replaces a piece of content of a facade in the data store.  Overwrites the old\n version of the content, if it exists.  Expects a literal JSON representation\n of the object."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_facade/{{table}}/{{key}}?changeId=&audit=&consistency=STRONG&tag=&tag=&debug=",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{{table}}",
																		"{{key}}"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": ""
																		},
																		{
																			"key": "audit",
																			"value": ""
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": ""
																		},
																		{
																			"key": "tag",
																			"value": ""
																		},
																		{
																			"key": "debug",
																			"value": ""
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": ""
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "TC: Request to facade of removed table",
											"item": [
												{
													"name": "Creates table /sor/1/_table/{table}",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"pm.environment.set('table', 'table_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options={{options_us}}&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "{{options_us}}"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": []
												},
												{
													"name": "Creates a facade",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
																	"const retryRequest = eval(retryRequestCall.retryRequest);",
																	"",
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(isLocal == false) {",
																	"    var response = pm.response;",
																	"",
																	"    pm.test(\"Assert response\", asyncTest(async function () {",
																	"        if (response.code == 500) {",
																	"            await waitUntil(setTimeout, clearTimeout, async () => {",
																	"                response = await retryRequest();",
																	"                return response.code !== 500;",
																	"            }, \"Retrying until there is facade available \");",
																	"        }",
																	"        pm.expect(response.code).to.eql(200);",
																	"        pm.expect(response.json()).to.eql({\"success\":true});",
																	"    }));",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"const url = `${pm.environment.get(\"baseurl_dc2\")}/sor/1/_facade/${pm.environment.get(\"table\")}?options=${pm.environment.get(\"options_eu\")}&audit=comment:'initial+facade+provisioning'`;",
																	"",
																	"pm.environment.set(\"url\", url);",
																	"pm.environment.set(\"method\", \"PUT\");"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}?options={{options_eu}}&audit=comment:'initial+facade+provisioning'",
															"host": [
																"{{baseurl_dc2}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "{{options_eu}}"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+facade+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if facade is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}",
																	"host": [
																		"{{baseurl_dc2}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": ""
																		},
																		{
																			"key": "audit",
																			"value": ""
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Creates or replaces a piece of content of a facade in the data store before table removal",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body assertion\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
														},
														"url": {
															"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}/{{key}}?audit=comment:'update+piece+of+content'",
															"host": [
																"{{baseurl_dc2}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}",
																"{{key}}"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "comment:'update+piece+of+content'"
																},
																{
																	"key": "consistency",
																	"value": "STRONG",
																	"disabled": true
																},
																{
																	"key": "tag",
																	"value": "postman",
																	"disabled": true
																},
																{
																	"key": "tag",
																	"value": "postman1",
																	"disabled": true
																},
																{
																	"key": "debug",
																	"value": "true",
																	"disabled": true
																}
															]
														},
														"description": "Creates or replaces a piece of content of a facade in the data store.  Overwrites the old\n version of the content, if it exists.  Expects a literal JSON representation\n of the object."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}/{{key}}?consistency=STRONG",
																	"host": [
																		"{{baseurl_dc2}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		":{{table}}",
																		"{{key}}"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": ""
																		},
																		{
																			"key": "audit",
																			"value": ""
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": ""
																		},
																		{
																			"key": "tag",
																			"value": ""
																		},
																		{
																			"key": "debug",
																			"value": ""
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({ \"success\": true });",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": ""
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Creates or replaces a piece of content of a facade in the data store after table removal",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 404\", function () {",
																	"        pm.response.to.have.status(404);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.text()).to.eql(`{\"message\":\"Unknown table: ${pm.environment.get('table')}\",\"table\":\"${pm.environment.get('table')}\",\"suppressed\":[]}`);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
														},
														"url": {
															"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}/{{key}}?audit=comment:'update+piece+of+content'&consistency=STRONG&tag=postman&tag=postman1&debug=true",
															"host": [
																"{{baseurl_dc2}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}",
																"{{key}}"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "comment:'update+piece+of+content'"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "postman"
																},
																{
																	"key": "tag",
																	"value": "postman1"
																},
																{
																	"key": "debug",
																	"value": "true"
																}
															]
														},
														"description": "Creates or replaces a piece of content of a facade in the data store.  Overwrites the old\n version of the content, if it exists.  Expects a literal JSON representation\n of the object."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}/{{key}}?consistency=STRONG",
																	"host": [
																		"{{baseurl_dc2}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{{table}}",
																		"{{key}}"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": ""
																		},
																		{
																			"key": "audit",
																			"value": ""
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": ""
																		},
																		{
																			"key": "tag",
																			"value": ""
																		},
																		{
																			"key": "debug",
																			"value": ""
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "TC: Request to facade with all parameters populated",
											"item": [
												{
													"name": "Creates table /sor/1/_table/{table}",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"pm.environment.set('table', 'table_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_us:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_us:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": []
												},
												{
													"name": "Creates a facade",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
																	"const retryRequest = eval(retryRequestCall.retryRequest);",
																	"",
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(isLocal == false) {",
																	"    var response = pm.response;",
																	"",
																	"    pm.test(\"Assert response\", asyncTest(async function () {",
																	"        if (response.code == 500) {",
																	"            await waitUntil(setTimeout, clearTimeout, async () => {",
																	"                response = await retryRequest();",
																	"                return response.code !== 500;",
																	"            }, \"Retrying until there is facade available \");",
																	"        }",
																	"        pm.expect(response.code).to.eql(200);",
																	"        pm.expect(response.json()).to.eql({\"success\":true});",
																	"    }));",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"const url = `${pm.environment.get(\"baseurl_dc2\")}/sor/1/_facade/${pm.environment.get(\"table\")}?options=${pm.environment.get(\"options_eu\")}&audit=comment:'initial+facade+provisioning'`;",
																	"",
																	"pm.environment.set(\"url\", url);",
																	"pm.environment.set(\"method\", \"PUT\");"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}?options={{options_eu}}&audit=comment:'initial+facade+provisioning'",
															"host": [
																"{{baseurl_dc2}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "{{options_eu}}"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+facade+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if facade is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}",
																	"host": [
																		"{{baseurl_dc2}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": ""
																		},
																		{
																			"key": "audit",
																			"value": ""
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Creates or replaces a piece of content of a facade in the data storebefore table removal",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body assertion\", function () {",
																	"        pm.expect(pm.response.json()).to.have.keys(\"success\",\"debug\");",
																	"        pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
																	"        pm.expect(pm.response.json().success).to.eql(true);",
																	"",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
														},
														"url": {
															"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}/{{key}}?audit=comment:'update+piece+of+content'&consistency=STRONG&tag=postman&tag=postman1&debug=true",
															"host": [
																"{{baseurl_dc2}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}",
																"{{key}}"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "comment:'update+piece+of+content'"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "postman"
																},
																{
																	"key": "tag",
																	"value": "postman1"
																},
																{
																	"key": "debug",
																	"value": "true"
																}
															]
														},
														"description": "Creates or replaces a piece of content of a facade in the data store.  Overwrites the old\n version of the content, if it exists.  Expects a literal JSON representation\n of the object."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}/{{key}}?consistency=STRONG",
																	"host": [
																		"{{baseurl_dc2}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{{table}}",
																		"{{key}}"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": ""
																		},
																		{
																			"key": "audit",
																			"value": ""
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": ""
																		},
																		{
																			"key": "tag",
																			"value": ""
																		},
																		{
																			"key": "debug",
																			"value": ""
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": ""
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										}
									]
								},
								{
									"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta.",
									"item": [
										{
											"name": "TC: Request with api-key without access",
											"item": [
												{
													"name": "Creates table /sor/1/_table/{table}",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"pm.environment.set('table', 'table_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_us:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_us:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": []
												},
												{
													"name": "Creates a facade",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
																	"const retryRequest = eval(retryRequestCall.retryRequest);",
																	"",
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(isLocal == false) {",
																	"    const response = pm.response;",
																	"",
																	"    pm.test(\"Assert response\", asyncTest(async function () {",
																	"        if (response.code == 500) {",
																	"            await waitUntil(setTimeout, clearTimeout, async () => {",
																	"                response = await retryRequest();",
																	"                return response.code !== 500;",
																	"            }, \"Retrying until there is facade available \");",
																	"        }",
																	"        pm.response.to.have.status(200);",
																	"        pm.expect(response.json()).to.eql({\"success\":true});",
																	"    }));",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"const url = `${pm.environment.get(\"baseurl_dc2\")}/sor/1/_facade/${pm.environment.get(\"table\")}?options=${pm.environment.get(\"options_eu\")}&audit=comment:'initial+facade+provisioning'`;",
																	"",
																	"pm.environment.set(\"url\", url);",
																	"pm.environment.set(\"method\", \"PUT\");"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}?options={{options_eu}}&audit=comment:'initial+facade+provisioning'",
															"host": [
																"{{baseurl_dc2}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "{{options_eu}}"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+facade+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if facade is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}",
																	"host": [
																		"{{baseurl_dc2}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": ""
																		},
																		{
																			"key": "audit",
																			"value": ""
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta.",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 403\", function () {",
																	"        pm.response.to.have.status(403);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"reason\":\"not authorized\"});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/x.json-delta"
															},
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key_no_rights}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "\"<string>\""
														},
														"url": {
															"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}/{{key}}?audit=comment:'modify+info+in+facade'&consistency=STRONG&tag=postman&tag=postman1&debug=false",
															"host": [
																"{{baseurl_dc2}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}",
																"{{key}}"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "comment:'modify+info+in+facade'"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "postman"
																},
																{
																	"key": "tag",
																	"value": "postman1"
																},
																{
																	"key": "debug",
																	"value": "false"
																}
															]
														},
														"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}/{{key}}?consistency=STRONG",
																	"host": [
																		"{{baseurl_dc2}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{{table}}",
																		"{{key}}"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": ""
																		},
																		{
																			"key": "audit",
																			"value": ""
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": ""
																		},
																		{
																			"key": "tag",
																			"value": ""
																		},
																		{
																			"key": "debug",
																			"value": ""
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": ""
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "TC: Request with all parameters and debug set to true",
											"item": [
												{
													"name": "Creates table /sor/1/_table/{table}",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"pm.environment.set('table', 'table_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_us:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_us:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": []
												},
												{
													"name": "Creates a facade",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}?options={{options_eu}}&audit=comment:'initial+facade+provisioning'",
															"host": [
																"{{baseurl_dc2}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "{{options_eu}}"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+facade+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if facade is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}",
																	"host": [
																		"{{baseurl_dc2}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": ""
																		},
																		{
																			"key": "audit",
																			"value": ""
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta.",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.have.keys(\"success\",\"debug\");",
																	"        pm.expect(pm.response.json().success).to.eql(true);",
																	"        pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/x.json-delta"
															},
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
														},
														"url": {
															"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}/{{key}}?audit=comment:'modify+info+in+facade'&consistency=STRONG&tag=postman&tag=postman1&debug=true",
															"host": [
																"{{baseurl_dc2}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}",
																"{{key}}"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "comment:'modify+info+in+facade'"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "postman"
																},
																{
																	"key": "tag",
																	"value": "postman1"
																},
																{
																	"key": "debug",
																	"value": "true"
																}
															]
														},
														"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc2}}/sor/1/_facade/{{able}}/{{key}}?consistency=STRONG",
																	"host": [
																		"{{baseurl_dc2}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{{table}}",
																		"{{key}}"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": ""
																		},
																		{
																			"key": "audit",
																			"value": ""
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": ""
																		},
																		{
																			"key": "tag",
																			"value": ""
																		},
																		{
																			"key": "debug",
																			"value": ""
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": ""
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "TC: Request with all parameters and debug set to false",
											"item": [
												{
													"name": "Creates table /sor/1/_table/{table}",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"pm.environment.set('table', 'table_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_us:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_us:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": []
												},
												{
													"name": "Creates a facade",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}?options={{options_eu}}&audit=comment:'initial+facade+provisioning'",
															"host": [
																"{{baseurl_dc2}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "{{options_eu}}"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+facade+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if facade is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}",
																	"host": [
																		"{{baseurl_dc2}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": ""
																		},
																		{
																			"key": "audit",
																			"value": ""
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta.",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({ \"success\": true });",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/x.json-delta"
															},
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
														},
														"url": {
															"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}/{{key}}?audit=comment:'modify+info+in+facade'&consistency=STRONG&tag=postman&tag=postman1&debug=false",
															"host": [
																"{{baseurl_dc2}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}",
																"{{key}}"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "comment:'modify+info+in+facade'"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "postman"
																},
																{
																	"key": "tag",
																	"value": "postman1"
																},
																{
																	"key": "debug",
																	"value": "false"
																}
															]
														},
														"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}/{{key}}?consistency=STRONG",
																	"host": [
																		"{{baseurl_dc2}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{{table}}",
																		"{{key}}"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": ""
																		},
																		{
																			"key": "audit",
																			"value": ""
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": ""
																		},
																		{
																			"key": "tag",
																			"value": ""
																		},
																		{
																			"key": "debug",
																			"value": ""
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": ""
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "TC: Request with correct data to wrong datacenter",
											"item": [
												{
													"name": "Creates table /sor/1/_table/{table}",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"pm.environment.set('table', 'table_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_us:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_us:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": []
												},
												{
													"name": "Creates a facade",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}?options={{options_eu}}&audit=comment:'initial+facade+provisioning'",
															"host": [
																"{{baseurl_dc2}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "{{options_eu}}"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+facade+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if facade is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}",
																	"host": [
																		"{{baseurl_dc2}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": ""
																		},
																		{
																			"key": "audit",
																			"value": ""
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta.",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 403\", function () {",
																	"        pm.response.to.have.status(403);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.text()).to.eql(\"Access denied. Update intended for a facade, but the table would be updated.\");",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/x.json-delta"
															},
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_facade/{{table}}/{{key}}?audit=comment:'modify+info+in+facade'&consistency=STRONG&tag=postman&tag=postman1&debug=true",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}",
																"{{key}}"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "comment:'modify+info+in+facade'"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "postman"
																},
																{
																	"key": "tag",
																	"value": "postman1"
																},
																{
																	"key": "debug",
																	"value": "true"
																}
															]
														},
														"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_facade/{{table}}/{{key}}?consistency=STRONG",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{{table}}",
																		"{{key}}"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": ""
																		},
																		{
																			"key": "audit",
																			"value": ""
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": ""
																		},
																		{
																			"key": "tag",
																			"value": ""
																		},
																		{
																			"key": "debug",
																			"value": ""
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": ""
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "TC: Request with correct data to not existing table",
											"item": [
												{
													"name": "Creates table /sor/1/_table/{table}",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"pm.environment.set('table', 'table_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_us:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_us:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": []
												},
												{
													"name": "Creates a facade",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
																	"const retryRequest = eval(retryRequestCall.retryRequest);",
																	"",
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(isLocal == false) {",
																	"    var response = pm.response;",
																	"",
																	"    pm.test(\"Assert response\", asyncTest(async function () {",
																	"        if (response.code == 500) {",
																	"            await waitUntil(setTimeout, clearTimeout, async () => {",
																	"                response = await retryRequest();",
																	"                return response.code !== 500;",
																	"            }, \"Retrying until there is facade available \");",
																	"        }",
																	"        pm.expect(response.code).to.eql(200);",
																	"        pm.expect(response.json()).to.eql({\"success\":true});",
																	"    }));",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"const url = `${pm.environment.get(\"baseurl_dc2\")}/sor/1/_facade/${pm.environment.get(\"table\")}?options=${pm.environment.get(\"options_eu\")}&audit=comment:'initial+facade+provisioning'`;",
																	"",
																	"pm.environment.set(\"url\", url);",
																	"pm.environment.set(\"method\", \"PUT\");"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}?options=placement:'ugc_eu:ugc'&audit=comment:'initial+facade+provisioning'",
															"host": [
																"{{baseurl_dc2}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_eu:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+facade+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if facade is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}",
																	"host": [
																		"{{baseurl_dc2}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": ""
																		},
																		{
																			"key": "audit",
																			"value": ""
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta.",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 404\", function () {",
																	"        pm.response.to.have.status(404);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"message\":\"Unknown table: not_existing_table\",\"table\":\"not_existing_table\",\"suppressed\":[]});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/x.json-delta"
															},
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
														},
														"url": {
															"raw": "{{baseurl_dc2}}/sor/1/_facade/not_existing_table/{{key}}?audit=comment:'modify+info+in+facade'&consistency=STRONG&tag=postman&tag=postman1&debug=true",
															"host": [
																"{{baseurl_dc2}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"not_existing_table",
																"{{key}}"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "comment:'modify+info+in+facade'"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "postman"
																},
																{
																	"key": "tag",
																	"value": "postman1"
																},
																{
																	"key": "debug",
																	"value": "true"
																}
															]
														},
														"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}/{{key}}?consistency=STRONG",
																	"host": [
																		"{{baseurl_dc2}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{{table}}",
																		"{{key}}"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": ""
																		},
																		{
																			"key": "audit",
																			"value": ""
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": ""
																		},
																		{
																			"key": "tag",
																			"value": ""
																		},
																		{
																			"key": "debug",
																			"value": ""
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": ""
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "TC: Request with correct data to not existing key",
											"item": [
												{
													"name": "Creates table /sor/1/_table/{table}",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"pm.environment.set('table', 'table_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_us:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_us:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": []
												},
												{
													"name": "Creates a facade",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
																	"const retryRequest = eval(retryRequestCall.retryRequest);",
																	"",
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(isLocal == false) {",
																	"    var response = pm.response;",
																	"",
																	"    pm.test(\"Assert response\", asyncTest(async function () {",
																	"        if (response.code == 500) {",
																	"            await waitUntil(setTimeout, clearTimeout, async () => {",
																	"                response = await retryRequest();",
																	"                return response.code !== 500;",
																	"            }, \"Retrying until there is facade available \");",
																	"        }",
																	"        pm.expect(response.code).to.eql(200);",
																	"        pm.expect(response.json()).to.eql({\"success\":true});",
																	"    }));",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"const url = `${pm.environment.get(\"baseurl_dc2\")}/sor/1/_facade/${pm.environment.get(\"table\")}?options=${pm.environment.get(\"options_eu\")}&audit=comment:'initial+facade+provisioning'`;",
																	"",
																	"pm.environment.set(\"url\", url);",
																	"pm.environment.set(\"method\", \"PUT\");"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}?options={{options_eu}}&audit=comment:'initial+facade+provisioning'",
															"host": [
																"{{baseurl_dc2}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "{{options_eu}}"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+facade+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if facade is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}",
																	"host": [
																		"{{baseurl_dc2}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": ""
																		},
																		{
																			"key": "audit",
																			"value": ""
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta.",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.have.keys(\"success\",\"debug\");",
																	"        pm.expect(pm.response.json().success).to.eql(true);",
																	"        pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/x.json-delta"
															},
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
														},
														"url": {
															"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}/not_existing_key?audit=comment:'modify+info+in+facade'&consistency=STRONG&tag=postman&tag=postman1&debug=true",
															"host": [
																"{{baseurl_dc2}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}",
																"not_existing_key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "comment:'modify+info+in+facade'"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "postman"
																},
																{
																	"key": "tag",
																	"value": "postman1"
																},
																{
																	"key": "debug",
																	"value": "true"
																}
															]
														},
														"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}/{{key}}?consistency=STRONG",
																	"host": [
																		"{{baseurl_dc2}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{{table}}",
																		"{{key}}"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": ""
																		},
																		{
																			"key": "audit",
																			"value": ""
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": ""
																		},
																		{
																			"key": "tag",
																			"value": ""
																		},
																		{
																			"key": "debug",
																			"value": ""
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": ""
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "TC: Request with wrong changeId",
											"item": [
												{
													"name": "Creates table /sor/1/_table/{table}",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"pm.environment.set('table', 'table_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_us:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_us:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": []
												},
												{
													"name": "Creates a facade",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
																	"const retryRequest = eval(retryRequestCall.retryRequest);",
																	"",
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(isLocal == false) {",
																	"    var response = pm.response;",
																	"",
																	"    pm.test(\"Assert response\", asyncTest(async function () {",
																	"        if (response.code == 500) {",
																	"            await waitUntil(setTimeout, clearTimeout, async () => {",
																	"                response = await retryRequest();",
																	"                return response.code !== 500;",
																	"            }, \"Retrying until there is facade available \");",
																	"        }",
																	"        pm.expect(response.code).to.eql(200);",
																	"        pm.expect(response.json()).to.eql({\"success\":true});",
																	"    }));",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"const url = `${pm.environment.get(\"baseurl_dc2\")}/sor/1/_facade/${pm.environment.get(\"table\")}?options=${pm.environment.get(\"options_eu\")}&audit=comment:'initial+facade+provisioning'`;",
																	"",
																	"pm.environment.set(\"url\", url);",
																	"pm.environment.set(\"method\", \"PUT\");"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}?options={{options_eu}}&audit=comment:'initial+facade+provisioning'",
															"host": [
																"{{baseurl_dc2}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "{{options_eu}}"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+facade+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if facade is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}",
																	"host": [
																		"{{baseurl_dc2}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": ""
																		},
																		{
																			"key": "audit",
																			"value": ""
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta.",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 400\", function () {",
																	"        pm.response.to.have.status(400);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.text()).to.eql(\"Invalid uuid parameter (must be a RFC 4122 version 1 time-based uuid): someIncorrectUUID\");",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/x.json-delta"
															},
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
														},
														"url": {
															"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}/{{key}}?changeId=someIncorrectUUID&audit=comment:'modify+info+in+facade'&consistency=STRONG&tag=postman&tag=postman1&debug=true",
															"host": [
																"{{baseurl_dc2}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}",
																"{{key}}"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "someIncorrectUUID"
																},
																{
																	"key": "audit",
																	"value": "comment:'modify+info+in+facade'"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "postman"
																},
																{
																	"key": "tag",
																	"value": "postman1"
																},
																{
																	"key": "debug",
																	"value": "true"
																}
															]
														},
														"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}/{{key}}?consistency=STRONG",
																	"host": [
																		"{{baseurl_dc2}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{{table}}",
																		"{{key}}"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": ""
																		},
																		{
																			"key": "audit",
																			"value": ""
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": ""
																		},
																		{
																			"key": "tag",
																			"value": ""
																		},
																		{
																			"key": "debug",
																			"value": ""
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": ""
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "TC: Request without audit param",
											"item": [
												{
													"name": "Creates table /sor/1/_table/{table}",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"pm.environment.set('table', 'table_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options={{options_us}}&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "{{options_us}}"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": []
												},
												{
													"name": "Creates a facade",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
																	"const retryRequest = eval(retryRequestCall.retryRequest);",
																	"",
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(isLocal == false) {",
																	"    var response = pm.response;",
																	"",
																	"    pm.test(\"Assert response\", asyncTest(async function () {",
																	"        if (response.code == 500) {",
																	"            await waitUntil(setTimeout, clearTimeout, async () => {",
																	"                response = await retryRequest();",
																	"                return response.code !== 500;",
																	"            }, \"Retrying until there is facade available \");",
																	"        }",
																	"        pm.expect(response.code).to.eql(200);",
																	"        pm.expect(response.json()).to.eql({\"success\":true});",
																	"    }));",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"const url = `${pm.environment.get(\"baseurl_dc2\")}/sor/1/_facade/${pm.environment.get(\"table\")}?options=${pm.environment.get(\"options_eu\")}&audit=comment:'initial+facade+provisioning'`;",
																	"",
																	"pm.environment.set(\"url\", url);",
																	"pm.environment.set(\"method\", \"PUT\");"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}?options={{options_eu}}&audit=comment:'initial+facade+provisioning'",
															"host": [
																"{{baseurl_dc2}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "{{options_eu}}"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+facade+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if facade is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}",
																	"host": [
																		"{{baseurl_dc2}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": ""
																		},
																		{
																			"key": "audit",
																			"value": ""
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta.",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(isLocal == false) {",
																	"    pm.test(\"Status code is 400\", function () {",
																	"        pm.response.to.have.status(400);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.text()).to.eql(\"Missing required query parameter: audit\");",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"pm.environment.set('key', 'key_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/x.json-delta"
															},
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
														},
														"url": {
															"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}/{{key}}?consistency=STRONG&tag=postman&tag=postman1&debug=true",
															"host": [
																"{{baseurl_dc2}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}",
																"{{key}}"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "someIncorrectUUID",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "comment:'modify+info+in+facade'",
																	"disabled": true
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "postman"
																},
																{
																	"key": "tag",
																	"value": "postman1"
																},
																{
																	"key": "debug",
																	"value": "true"
																}
															]
														},
														"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}/{{key}}?consistency=STRONG",
																	"host": [
																		"{{baseurl_dc2}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{{table}}",
																		"{{key}}"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": ""
																		},
																		{
																			"key": "audit",
																			"value": ""
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": ""
																		},
																		{
																			"key": "tag",
																			"value": ""
																		},
																		{
																			"key": "debug",
																			"value": ""
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": ""
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										}
									]
								},
								{
									"name": "Deletes a piece of content from a facade in the data store.",
									"item": [
										{
											"name": "TC: Request with api-key without access",
											"item": [
												{
													"name": "Creates table /sor/1/_table/{table}",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"pm.environment.set('table', 'table_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																	"",
																	"    if(isLocal == false) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options={{options_us}}&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "{{options_us}}"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": []
												},
												{
													"name": "Creates a facade",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
																	"const retryRequest = eval(retryRequestCall.retryRequest);",
																	"",
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(isLocal == false) {",
																	"    var response = pm.response;",
																	"",
																	"    pm.test(\"Assert response\", asyncTest(async function () {",
																	"        if (response.code == 500) {",
																	"            await waitUntil(setTimeout, clearTimeout, async () => {",
																	"                response = await retryRequest();",
																	"                return response.code !== 500;",
																	"            }, \"Retrying until there is facade available \");",
																	"        }",
																	"        pm.expect(response.code).to.eql(200);",
																	"        pm.expect(response.json()).to.eql({\"success\":true});",
																	"    }));",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"const url = `${pm.environment.get(\"baseurl_dc2\")}/sor/1/_facade/${pm.environment.get(\"table\")}?options=${pm.environment.get(\"options_eu\")}&audit=comment:'initial+facade+provisioning'`;",
																	"",
																	"pm.environment.set(\"url\", url);",
																	"pm.environment.set(\"method\", \"PUT\");"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}?options={{options_eu}}&audit=comment:'initial+facade+provisioning'",
															"host": [
																"{{baseurl_dc2}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "{{options_eu}}"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+facade+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if facade is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}",
																	"host": [
																		"{{baseurl_dc2}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": ""
																		},
																		{
																			"key": "audit",
																			"value": ""
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Deletes a piece of content from a facade in the data store.",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 403\", function () {",
																	"        pm.response.to.have.status(403);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"reason\": \"not authorized\"});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key_no_rights}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
														},
														"url": {
															"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}/{{key}}?audit=comment:'delete+piece+of+content+from+facade'&consistency=STRONG&debug=false",
															"host": [
																"{{baseurl_dc2}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}",
																"{{key}}"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "comment:'delete+piece+of+content+from+facade'"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": ""
																},
																{
																	"key": "tag",
																	"value": ""
																},
																{
																	"key": "debug",
																	"value": "false"
																}
															]
														},
														"description": "Deletes a piece of content from a facade in the data store."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}/{{key}}?consistency=STRONG",
																	"host": [
																		"{{baseurl_dc2}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{{table}}",
																		"{{key}}"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": ""
																		},
																		{
																			"key": "audit",
																			"value": ""
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": ""
																		},
																		{
																			"key": "tag",
																			"value": ""
																		},
																		{
																			"key": "debug",
																			"value": ""
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": ""
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "TC: Request without audit param",
											"item": [
												{
													"name": "Creates table /sor/1/_table/{table}",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"pm.environment.set('table', 'table_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_eu:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_eu:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": []
												},
												{
													"name": "Creates a facade",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
																	"const retryRequest = eval(retryRequestCall.retryRequest);",
																	"",
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(isLocal == false) {",
																	"    var response = pm.response;",
																	"",
																	"    pm.test(\"Assert response\", asyncTest(async function () {",
																	"        if (response.code == 500) {",
																	"            await waitUntil(setTimeout, clearTimeout, async () => {",
																	"                response = await retryRequest();",
																	"                return response.code !== 500;",
																	"            }, \"Retrying until there is facade available \");",
																	"        }",
																	"        pm.expect(response.code).to.eql(200);",
																	"        pm.expect(response.json()).to.eql({\"success\":true});",
																	"    }));",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"const url = `${pm.environment.get(\"baseurl_dc2\")}/sor/1/_facade/${pm.environment.get(\"table\")}?options=${pm.environment.get(\"options_eu\")}&audit=comment:'initial+facade+provisioning'`;",
																	"",
																	"pm.environment.set(\"url\", url);",
																	"pm.environment.set(\"method\", \"PUT\");"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}?options={{options_us}}&audit=comment:'initial+facade+provisioning'",
															"host": [
																"{{baseurl_dc2}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "{{options_us}}"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+facade+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if facade is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}",
																	"host": [
																		"{{baseurl_dc2}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": ""
																		},
																		{
																			"key": "audit",
																			"value": ""
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Deletes a piece of content from a facade in the data store.",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(isLocal == false) {",
																	"    pm.test(\"Status code is 400\", function () {",
																	"        pm.response.to.have.status(400);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.text()).to.eql('Missing required query parameter: audit');",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
														},
														"url": {
															"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}/{{key}}?consistency=STRONG&tag=postman&tag=postman1&debug=false",
															"host": [
																"{{baseurl_dc2}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}",
																"{{key}}"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "comment:'delete+piece+of+content+from+facade'",
																	"disabled": true
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "postman"
																},
																{
																	"key": "tag",
																	"value": "postman1"
																},
																{
																	"key": "debug",
																	"value": "false"
																}
															]
														},
														"description": "Deletes a piece of content from a facade in the data store."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}/{{key}}?consistency=STRONG",
																	"host": [
																		"{{baseurl_dc2}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{{table}}",
																		"{{key}}"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": ""
																		},
																		{
																			"key": "audit",
																			"value": ""
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": ""
																		},
																		{
																			"key": "tag",
																			"value": ""
																		},
																		{
																			"key": "debug",
																			"value": ""
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": ""
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "TC: Request to delete piece of data from facade",
											"item": [
												{
													"name": "Creates table /sor/1/_table/{table}",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"pm.environment.set('table', 'table_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options={{options_us}}&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "{{options_us}}"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": []
												},
												{
													"name": "Creates a facade",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
																	"const retryRequest = eval(retryRequestCall.retryRequest);",
																	"",
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(isLocal == false) {",
																	"    var response = pm.response;",
																	"",
																	"    pm.test(\"Assert response\", asyncTest(async function () {",
																	"        if (response.code == 500) {",
																	"            await waitUntil(setTimeout, clearTimeout, async () => {",
																	"                response = await retryRequest();",
																	"                return response.code !== 500;",
																	"            }, \"Retrying until there is facade available \");",
																	"        }",
																	"        pm.expect(response.code).to.eql(200);",
																	"        pm.expect(response.json()).to.eql({\"success\":true});",
																	"    }));",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"const url = `${pm.environment.get(\"baseurl_dc2\")}/sor/1/_facade/${pm.environment.get(\"table\")}?options=${pm.environment.get(\"options_eu\")}&audit=comment:'initial+facade+provisioning'`;",
																	"",
																	"pm.environment.set(\"url\", url);",
																	"pm.environment.set(\"method\", \"PUT\");",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}?options={{options_eu}}&audit=comment:'initial+facade+provisioning'",
															"host": [
																"{{baseurl_dc2}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "{{options_eu}}"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+facade+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if facade is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}",
																	"host": [
																		"{{baseurl_dc2}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": ""
																		},
																		{
																			"key": "audit",
																			"value": ""
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Deletes a piece of content from a facade in the data store.",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(isLocal == false) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
														},
														"url": {
															"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}/{{key}}?audit=comment:'delete+piece+of+content+from+facade'&consistency=STRONG&tag=postman&tag=postman1&debug=false",
															"host": [
																"{{baseurl_dc2}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}",
																"{{key}}"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "comment:'delete+piece+of+content+from+facade'"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "postman"
																},
																{
																	"key": "tag",
																	"value": "postman1"
																},
																{
																	"key": "debug",
																	"value": "false"
																}
															]
														},
														"description": "Deletes a piece of content from a facade in the data store."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}/{{key}}?consistency=STRONG",
																	"host": [
																		"{{baseurl_dc2}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{{table}}",
																		"{{key}}"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": ""
																		},
																		{
																			"key": "audit",
																			"value": ""
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": ""
																		},
																		{
																			"key": "tag",
																			"value": ""
																		},
																		{
																			"key": "debug",
																			"value": ""
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": ""
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "TC: Request to delete piece of data from facade with wrong datacenter",
											"item": [
												{
													"name": "Creates table /sor/1/_table/{table}",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"pm.environment.set('table', 'table_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options={{options_us}}&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "{{options_us}}"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": []
												},
												{
													"name": "Creates a facade",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
																	"const retryRequest = eval(retryRequestCall.retryRequest);",
																	"",
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(isLocal == false) {",
																	"    var response = pm.response;",
																	"",
																	"    pm.test(\"Assert response\", asyncTest(async function () {",
																	"        if (response.code == 500) {",
																	"            await waitUntil(setTimeout, clearTimeout, async () => {",
																	"                response = await retryRequest();",
																	"                return response.code !== 500;",
																	"            }, \"Retrying until there is facade available \");",
																	"        }",
																	"        pm.expect(response.code).to.eql(200);",
																	"        pm.expect(response.json()).to.eql({\"success\":true});",
																	"    }));",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"const url = `${pm.environment.get(\"baseurl_dc2\")}/sor/1/_facade/${pm.environment.get(\"table\")}?options=${pm.environment.get(\"options_eu\")}&audit=comment:'initial+facade+provisioning'`;",
																	"",
																	"pm.environment.set(\"url\", url);",
																	"pm.environment.set(\"method\", \"PUT\");",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}?options={{options_eu}}&audit=comment:'initial+facade+provisioning'",
															"host": [
																"{{baseurl_dc2}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "{{options_eu}}"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+facade+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if facade is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}",
																	"host": [
																		"{{baseurl_dc2}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": ""
																		},
																		{
																			"key": "audit",
																			"value": ""
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Deletes a piece of content from a facade in the data store.",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																	"",
																	"if(isLocal == false) {",
																	"    pm.test(\"Status code is 403\", function () {",
																	"        pm.response.to.have.status(403);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.text()).to.eql('Access denied. Update intended for a facade, but the table would be updated.');",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_facade/{{table}}/{{key}}?audit=comment:'delete+piece+of+content+from+facade'&consistency=STRONG&tag=postman&tag=postman1&debug=false",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}",
																"{{key}}"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "comment:'delete+piece+of+content+from+facade'"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "postman"
																},
																{
																	"key": "tag",
																	"value": "postman1"
																},
																{
																	"key": "debug",
																	"value": "false"
																}
															]
														},
														"description": "Deletes a piece of content from a facade in the data store."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_facade/{{table}}/{{key}}?consistency=STRONG",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{{table}}",
																		"{{key}}"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": ""
																		},
																		{
																			"key": "audit",
																			"value": ""
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": ""
																		},
																		{
																			"key": "tag",
																			"value": ""
																		},
																		{
																			"key": "debug",
																			"value": ""
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": ""
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "TC: Request to delete piece of data from facade with debug set true",
											"item": [
												{
													"name": "Creates table /sor/1/_table/{table}",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"pm.environment.set('table', 'table_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options={{options_us}}&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "{{options_us}}"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": []
												},
												{
													"name": "Creates a facade",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
																	"const retryRequest = eval(retryRequestCall.retryRequest);",
																	"",
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(isLocal == false) {",
																	"    var response = pm.response;",
																	"",
																	"    pm.test(\"Assert response\", asyncTest(async function () {",
																	"        if (response.code == 500) {",
																	"            await waitUntil(setTimeout, clearTimeout, async () => {",
																	"                response = await retryRequest();",
																	"                return response.code !== 500;",
																	"            }, \"Retrying until there is facade available \");",
																	"        }",
																	"        pm.expect(response.code).to.eql(200);",
																	"        pm.expect(response.json()).to.eql({\"success\":true});",
																	"    }));",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"const url = `${pm.environment.get(\"baseurl_dc2\")}/sor/1/_facade/${pm.environment.get(\"table\")}?options=${pm.environment.get(\"options_eu\")}&audit=comment:'initial+facade+provisioning'`;",
																	"",
																	"pm.environment.set(\"url\", url);",
																	"pm.environment.set(\"method\", \"PUT\");"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}?options={{options_eu}}&audit=comment:'initial+facade+provisioning'",
															"host": [
																"{{baseurl_dc2}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "{{options_eu}}"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+facade+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if facade is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}",
																	"host": [
																		"{{baseurl_dc2}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": ""
																		},
																		{
																			"key": "audit",
																			"value": ""
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Deletes a piece of content from a facade in the data store.",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(isLocal == false) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.have.keys(\"success\",\"debug\");",
																	"        pm.expect(pm.response.json().success).to.eql(true);",
																	"        pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
														},
														"url": {
															"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}/{{key}}?audit=comment:'delete+piece+of+content+from+facade'&consistency=STRONG&tag=postman&tag=postman1&debug=true",
															"host": [
																"{{baseurl_dc2}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}",
																"{{key}}"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "comment:'delete+piece+of+content+from+facade'"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "postman"
																},
																{
																	"key": "tag",
																	"value": "postman1"
																},
																{
																	"key": "debug",
																	"value": "true"
																}
															]
														},
														"description": "Deletes a piece of content from a facade in the data store."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}/{{key}}?consistency=STRONG",
																	"host": [
																		"{{baseurl_dc2}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{{table}}",
																		"{{key}}"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": ""
																		},
																		{
																			"key": "audit",
																			"value": ""
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": ""
																		},
																		{
																			"key": "tag",
																			"value": ""
																		},
																		{
																			"key": "debug",
																			"value": ""
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": ""
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "TC: Request to delete piece of data from facade where table doesn't exist",
											"item": [
												{
													"name": "Deletes a piece of content from a facade in the data store.",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 404\", function () {",
																	"    pm.response.to.have.status(404);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"message\": \"Unknown table: not_existing_table\",\"table\": \"not_existing_table\",\"suppressed\": []});",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
														},
														"url": {
															"raw": "{{baseurl_dc2}}/sor/1/_facade/not_existing_table/{{key}}?audit=comment:'delete+piece+of+content+from+facade'&consistency=STRONG&tag=postman&tag=postman1&debug=false",
															"host": [
																"{{baseurl_dc2}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"not_existing_table",
																"{{key}}"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "comment:'delete+piece+of+content+from+facade'"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "postman"
																},
																{
																	"key": "tag",
																	"value": "postman1"
																},
																{
																	"key": "debug",
																	"value": "false"
																}
															]
														},
														"description": "Deletes a piece of content from a facade in the data store."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}/{{key}}?consistency=STRONG",
																	"host": [
																		"{{baseurl_dc2}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{{table}}",
																		"{{key}}"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": ""
																		},
																		{
																			"key": "audit",
																			"value": ""
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": ""
																		},
																		{
																			"key": "tag",
																			"value": ""
																		},
																		{
																			"key": "debug",
																			"value": ""
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "Deletes a piece of content from a facade in the data store.",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"<string>\",\n    \"authenticationId\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_facade/{{table}}/{{key}}?consistency=STRONG",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_facade",
														"{{table}}",
														"{{key}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": ""
														},
														{
															"key": "audit",
															"value": ""
														},
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "tag",
															"value": ""
														},
														{
															"key": "tag",
															"value": ""
														},
														{
															"key": "debug",
															"value": ""
														}
													],
													"variable": [
														{
															"key": "table",
															"value": "",
															"description": "(Required) "
														},
														{
															"key": "key",
															"value": "",
															"description": "(Required) "
														}
													]
												},
												"description": "Deletes a piece of content from a facade in the data store."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_facade/{{table}}/{{key}}?consistency=STRONG",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}",
																"{{key}}"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": ""
																},
																{
																	"key": "audit",
																	"value": ""
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": ""
																},
																{
																	"key": "tag",
																	"value": ""
																},
																{
																	"key": "debug",
																	"value": ""
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.environment.set(\"options_us\", \"placement:\\'ugc_us:ugc\\'\");",
									"pm.environment.set(\"options_eu\", \"placement:\\'ugc_eu:ugc\\'\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Does update all for Facade",
					"item": [
						{
							"name": "TC: Request without api-key",
							"item": [
								{
									"name": "Does update all for Facade",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.json().reason).to.be.oneOf([`not authorized to update table ${pm.environment.get('table')}`, 'not authorized']);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-BV-API-Key",
												"value": "{{api_key_no_rights}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n         {\n            \"table\": \"{{table}}\",\n            \"key\": \"demo1\",\n            \"delta\": \"{\\\"field1\\\":\\\"value1\\\",\\\"field2\\\":\\\"value2\\\",\\\"field3\\\":\\\"value3\\\"}\",\n            \"consistency\": \"STRONG\",\n            \"audit\": {\n              \"comment\": \"Adding demo1 document\"\n            }\n          },\n          {\n            \"table\": \"{{table}}\",\n            \"key\": \"demo2\",\n            \"delta\": \"{\\\"field1\\\":\\\"value1.1\\\",\\\"field5\\\":\\\"value5\\\",\\\"field32\\\":\\\"value33\\\"}\",\n            \"consistency\": \"STRONG\",\n            \"audit\": {\n            \"comment\": \"Update and Add\"\n        }\n      }\n]"
										},
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/_facade/_stream",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"_facade",
												"_stream"
											],
											"query": [
												{
													"key": "tag",
													"value": "",
													"disabled": true
												},
												{
													"key": "tag",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Facade-equivalent operation for \"_stream\"\n See (@link #updateAll(java.io.InputStream, BooleanParam, Subject)}"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_facade/_stream",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_facade",
														"_stream"
													],
													"query": [
														{
															"key": "tag",
															"value": ""
														},
														{
															"key": "tag",
															"value": ""
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"success\": false,\n \"debug\": {}\n}"
										}
									]
								}
							]
						},
						{
							"name": "TC: Request to not existing facade",
							"item": [
								{
									"name": "Creates table /sor/1/_table/{table}",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var uuid = require('uuid');",
													"pm.environment.set('table', 'table_'+uuid.v4());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-BV-API-Key",
												"type": "text",
												"value": "{{api_key}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"_table",
												"{{table}}"
											],
											"query": [
												{
													"key": "options",
													"value": "placement:'ugc_global:ugc'"
												},
												{
													"key": "audit",
													"value": "comment:'initial+provisioning'"
												}
											]
										},
										"description": "Returns a SuccessResponse if table is created"
									},
									"response": []
								},
								{
									"name": "Does update all for Facade",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.eql('Access denied. Update intended for a facade, but the table would be updated.');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-BV-API-Key",
												"value": "{{api_key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n         {\n            \"table\": \"{{table}}\",\n            \"key\": \"demo1\",\n            \"delta\": \"{\\\"field1\\\":\\\"value1\\\",\\\"field2\\\":\\\"value2\\\",\\\"field3\\\":\\\"value3\\\"}\",\n            \"consistency\": \"STRONG\",\n            \"audit\": {\n              \"comment\": \"Adding demo1 document\"\n            }\n          },\n          {\n            \"table\": \"{{table}}\",\n            \"key\": \"demo2\",\n            \"delta\": \"{\\\"field1\\\":\\\"value1.1\\\",\\\"field5\\\":\\\"value5\\\",\\\"field32\\\":\\\"value33\\\"}\",\n            \"consistency\": \"STRONG\",\n            \"audit\": {\n            \"comment\": \"Update and Add\"\n        }\n      }\n]"
										},
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/_facade/_stream",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"_facade",
												"_stream"
											],
											"query": [
												{
													"key": "tag",
													"value": "",
													"disabled": true
												},
												{
													"key": "tag",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Facade-equivalent operation for \"_stream\"\n See (@link #updateAll(java.io.InputStream, BooleanParam, Subject)}"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_facade/_stream",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_facade",
														"_stream"
													],
													"query": [
														{
															"key": "tag",
															"value": ""
														},
														{
															"key": "tag",
															"value": ""
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"success\": false,\n \"debug\": {}\n}"
										}
									]
								},
								{
									"name": "Drops a table",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-BV-API-Key",
												"type": "text",
												"value": "{{api_key}}"
											}
										],
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"_table",
												"{{table}}"
											],
											"query": [
												{
													"key": "audit",
													"value": "comment:'table_removal'"
												}
											]
										},
										"description": "Returns a SuccessResponse if table is dropped"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "audit",
															"value": ""
														}
													],
													"variable": [
														{
															"key": "table"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"success\": false,\n \"debug\": {}\n}"
										}
									]
								}
							]
						},
						{
							"name": "TC: Request facade update with wrong/correct placement",
							"item": [
								{
									"name": "Creates table /sor/1/_table/{table}",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var uuid = require('uuid');",
													"pm.environment.set('table', 'table_'+uuid.v4());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost'); ",
													"",
													"(isLocal ? pm.test.skip : pm.test)(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"(isLocal ? pm.test.skip : pm.test)(\"Body matches string\", function () {",
													"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-BV-API-Key",
												"type": "text",
												"value": "{{api_key}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options={{options_us}}&audit=comment:'initial+provisioning'",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"_table",
												"{{table}}"
											],
											"query": [
												{
													"key": "options",
													"value": "{{options_us}}"
												},
												{
													"key": "audit",
													"value": "comment:'initial+provisioning'"
												}
											]
										},
										"description": "Returns a SuccessResponse if table is created"
									},
									"response": []
								},
								{
									"name": "Creates a facade",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
													"const retryRequest = eval(retryRequestCall.retryRequest);",
													"",
													"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
													"",
													"",
													"(isLocal ? pm.test.skip : pm.test)(\"Assert response\", asyncTest(async function () {",
													"    var response = pm.response;",
													"    if (response.code == 500) {",
													"        await waitUntil(setTimeout, clearTimeout, async () => {",
													"            response = await retryRequest();",
													"            return response.code !== 500;",
													"        }, \"Retrying until there is facade available \");",
													"    }",
													"    pm.expect(response.code).to.eql(200);",
													"    pm.expect(response.json()).to.eql({\"success\":true});",
													"}));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = `${pm.environment.get(\"baseurl_dc2\")}/sor/1/_facade/${pm.environment.get(\"table\")}?options=${pm.environment.get(\"options_eu\")}&audit=comment:'initial+facade+provisioning'`;",
													"",
													"pm.environment.set(\"url\", url);",
													"pm.environment.set(\"method\", \"PUT\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-BV-Api-Key",
												"value": "{{api_key}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}?options={{options_eu}}&audit=comment:'initial+facade+provisioning'",
											"host": [
												"{{baseurl_dc2}}"
											],
											"path": [
												"sor",
												"1",
												"_facade",
												"{{table}}"
											],
											"query": [
												{
													"key": "options",
													"value": "{{options_eu}}"
												},
												{
													"key": "audit",
													"value": "comment:'initial+facade+provisioning'"
												}
											]
										},
										"description": "Returns a SuccessResponse if facade is created"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}",
													"host": [
														"{{baseurl_dc2}}"
													],
													"path": [
														"sor",
														"1",
														"_facade",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": ""
														},
														{
															"key": "audit",
															"value": ""
														}
													],
													"variable": [
														{
															"key": "table"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"success\": false,\n \"debug\": {}\n}"
										}
									]
								},
								{
									"name": "Does update all for Facade in correct datacenter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost'); ",
													"",
													"(isLocal ? pm.test.skip : pm.test)(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"(isLocal ? pm.test.skip : pm.test)(\"Body matches string\", function () {",
													"    pm.expect(pm.response.json()).to.eql({\"success\": true});",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-BV-API-Key",
												"value": "{{api_key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n         {\n            \"table\": \"{{table}}\",\n            \"key\": \"demo1\",\n            \"delta\": \"{\\\"field1\\\":\\\"value1\\\",\\\"field2\\\":\\\"value2\\\",\\\"field3\\\":\\\"value3\\\"}\",\n            \"consistency\": \"STRONG\",\n            \"audit\": {\n              \"comment\": \"Adding demo1 document\"\n            }\n          },\n          {\n            \"table\": \"{{table}}\",\n            \"key\": \"demo2\",\n            \"delta\": \"{\\\"field1\\\":\\\"value1.1\\\",\\\"field5\\\":\\\"value5\\\",\\\"field32\\\":\\\"value33\\\"}\",\n            \"consistency\": \"STRONG\",\n            \"audit\": {\n            \"comment\": \"Update and Add\"\n        }\n      }\n]"
										},
										"url": {
											"raw": "{{baseurl_dc2}}/sor/1/_facade/_stream",
											"host": [
												"{{baseurl_dc2}}"
											],
											"path": [
												"sor",
												"1",
												"_facade",
												"_stream"
											],
											"query": [
												{
													"key": "tag",
													"value": "",
													"disabled": true
												},
												{
													"key": "tag",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Facade-equivalent operation for \"_stream\"\n See (@link #updateAll(java.io.InputStream, BooleanParam, Subject)}"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseurl_dc2}}/sor/1/_facade/_stream",
													"host": [
														"{{baseurl_dc2}}"
													],
													"path": [
														"sor",
														"1",
														"_facade",
														"_stream"
													],
													"query": [
														{
															"key": "tag",
															"value": ""
														},
														{
															"key": "tag",
															"value": ""
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"success\": false,\n \"debug\": {}\n}"
										}
									]
								},
								{
									"name": "Does update all for Facade in a wrong datacenter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost'); ",
													"",
													"(isLocal ? pm.test.skip : pm.test)(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"(isLocal ? pm.test.skip : pm.test)(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.eql('Access denied. Update intended for a facade, but the table would be updated.');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-BV-API-Key",
												"value": "{{api_key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n         {\n            \"table\": \"{{table}}\",\n            \"key\": \"demo1\",\n            \"delta\": \"{\\\"field1\\\":\\\"value1\\\",\\\"field2\\\":\\\"value2\\\",\\\"field3\\\":\\\"value3\\\"}\",\n            \"consistency\": \"STRONG\",\n            \"audit\": {\n              \"comment\": \"Adding demo1 document\"\n            }\n          },\n          {\n            \"table\": \"{{table}}\",\n            \"key\": \"demo2\",\n            \"delta\": \"{\\\"field1\\\":\\\"value1.1\\\",\\\"field5\\\":\\\"value5\\\",\\\"field32\\\":\\\"value33\\\"}\",\n            \"consistency\": \"STRONG\",\n            \"audit\": {\n            \"comment\": \"Update and Add\"\n        }\n      }\n]"
										},
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/_facade/_stream",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"_facade",
												"_stream"
											],
											"query": [
												{
													"key": "tag",
													"value": "",
													"disabled": true
												},
												{
													"key": "tag",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Facade-equivalent operation for \"_stream\"\n See (@link #updateAll(java.io.InputStream, BooleanParam, Subject)}"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_facade/_stream",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_facade",
														"_stream"
													],
													"query": [
														{
															"key": "tag",
															"value": ""
														},
														{
															"key": "tag",
															"value": ""
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"success\": false,\n \"debug\": {}\n}"
										}
									]
								},
								{
									"name": "Drops a table",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost'); ",
													"",
													"(isLocal ? pm.test.skip : pm.test)(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"(isLocal ? pm.test.skip : pm.test)(\"Body matches string\", function () {",
													"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-BV-API-Key",
												"type": "text",
												"value": "{{api_key}}"
											}
										],
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"_table",
												"{{table}}"
											],
											"query": [
												{
													"key": "audit",
													"value": "comment:'table_removal'"
												}
											]
										},
										"description": "Returns a SuccessResponse if table is dropped"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "audit",
															"value": ""
														}
													],
													"variable": [
														{
															"key": "table"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"success\": false,\n \"debug\": {}\n}"
										}
									]
								}
							]
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"const retryRequest = () => {",
							"    return new Promise((resolve, reject) => {",
							"        pm.sendRequest({",
							"            url: `${pm.environment.get(\"url\")}`,",
							"            method: `${pm.environment.get(\"method\")}`,",
							"            header: {",
							"                \"X-BV-API-Key\": pm.environment.get(\"api_key\"),",
							"                \"Content-Type\": \"application/json\"",
							"            }",
							"",
							"        }, (error, response) => {",
							"            if (error) {",
							"                reject(error);",
							"            }",
							"            resolve(response);            ",
							"        });",
							"    });",
							"};",
							"",
							"const retryRequestCall = {",
							"    retryRequest: retryRequest.toString()",
							"};",
							"",
							"pm.globals.set(\"retryRequestCall\", JSON.stringify(retryRequestCall));",
							"pm.environment.set(\"options_eu\", \"placement:'ugc_eu:ugc'\");",
							"pm.environment.set(\"options_us\", \"placement:'ugc_us:ugc'\");"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Returns Table metadata",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 403\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(pm.response.json()).to.eql({\"reason\":\"not authorized\"});",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-BV-Api-Key",
						"value": "{{api_key_no_rights}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}/metadata",
					"host": [
						"{{baseurl_dc1}}"
					],
					"path": [
						"sor",
						"1",
						"_table",
						"{{table}}",
						"metadata"
					],
					"variable": [
						{
							"key": "table",
							"value": "",
							"description": "(Required) "
						}
					]
				},
				"description": "Returns a Table object"
			},
			"response": [
				{
					"name": "successful operation",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}/metadata",
							"host": [
								"{{baseurl_dc1}}"
							],
							"path": [
								"sor",
								"1",
								"_table",
								"{{table}}",
								"metadata"
							],
							"variable": [
								{
									"key": "table"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"options\": {\n  \"placement\": \"cupidatat dolor Excepteur\",\n  \"facades\": [\n   {\n    \"placement\": \"laboris magna s\"\n   },\n   {\n    \"placement\": \"minim deserunt\"\n   }\n  ]\n },\n \"template\": {},\n \"name\": \"eiusmod\",\n \"availability\": {\n  \"placement\": \"quis\",\n  \"facade\": false\n }\n}"
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"/**",
					" * Waits until the given predicate returns a truthy value. Calls and awaits the predicate",
					" * function at the given interval time. Can be used to poll until a certain condition is true.",
					" *",
					" * @example",
					" * ```js",
					" * import { fixture, waitUntil } from '@open-wc/testing-helpers';",
					" *",
					" * const element = await fixture(html`<my-element></my-element>`);",
					" *",
					" * await waitUntil(() => element.someAsyncProperty, 'element should become ready');",
					" *",
					"",
					" *",
					" * @param {() => boolean | Promise<boolean>} predicate - predicate function which is called each poll interval.",
					" *   The predicate is awaited, so it can return a promise.",
					" * @param {string} [message] an optional message to display when the condition timed out",
					" * @param {{ interval?: number, timeout?: number }} [options] timeout and polling interval",
					" */",
					"waitUntil = (setTimeout, clearTimeout, predicate, message, options = {}) => {",
					"  const { interval = 1000, timeout = 120000 } = options;",
					"",
					"  return new Promise((resolve, reject) => {",
					"    let timeoutId;",
					"    let failTimeoutId;",
					"",
					"    failTimeoutId = setTimeout(() => {",
					"      clearTimeout(timeoutId);",
					"      try {",
					"          pm.expect.fail(message ? `Timeout: ${message}` : `waitUntil timed out after ${timeout}ms`);",
					"      } catch(err) {",
					"          reject(err);",
					"      }",
					"    }, timeout);",
					"",
					"    async function nextInterval() {",
					"      try {",
					"        const result = await predicate();",
					"        if (result) {",
					"          clearTimeout(failTimeoutId);",
					"          resolve();",
					"        } else {",
					"          timeoutId = setTimeout(function() {",
					"            nextInterval();",
					"          }, interval);",
					"        }",
					"      } catch (error) {",
					"        clearTimeout(failTimeoutId);",
					"        reject(error);",
					"      }",
					"    }",
					"    nextInterval();",
					"  });",
					"};",
					"",
					"asyncTest = (cb) => {",
					"    return (done) => {",
					"        try {",
					"            cb(done).then(() => done()).catch((err) => done(err));",
					"        } catch (err) {",
					"            done(err);",
					"        }",
					"    };",
					"}",
					"",
					"delay = (setTimeout, timeInMs) => {",
					"    return new Promise((resolve) => setTimeout(resolve, timeInMs));",
					"}",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}