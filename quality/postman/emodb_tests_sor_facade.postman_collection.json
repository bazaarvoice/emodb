{
	"info": {
		"_postman_id": "79242d88-9c1f-459e-b899-f9004bcf2e9f",
		"name": "EmoDB_Tests_sor_facade",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "facade test cases",
			"item": [
				{
					"name": "{table}",
					"item": [
						{
							"name": "Creates a facade",
							"item": [
								{
									"name": "TC: Request without api-key",
									"item": [
										{
											"name": "Creates a facade",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"reason\":\"not authorized\"});",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-BV-Api-Key",
														"value": "{{api_key_no_rights}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_facade/:table?options=<string>&audit=<string>",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_facade",
														":table"
													],
													"query": [
														{
															"key": "options",
															"value": "<string>"
														},
														{
															"key": "audit",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "table",
															"value": "<string>",
															"description": "(Required) "
														}
													]
												},
												"description": "Returns a SuccessResponse if facade is created"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/_facade/:table?options=<string>&audit=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																":table"
															],
															"query": [
																{
																	"key": "options",
																	"value": "<string>"
																},
																{
																	"key": "audit",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Request for creating facade for not existing table",
									"item": [
										{
											"name": "Creates a facade",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"message\":\"Unknown table: not_existing_table\",\"table\":\"not_existing_table\",\"suppressed\":[]});",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-BV-Api-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_facade/not_existing_table?options=placement:'ugc_global:ugc'&audit=audit=comment:'initial+facade+provisioning'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_facade",
														"not_existing_table"
													],
													"query": [
														{
															"key": "options",
															"value": "placement:'ugc_global:ugc'"
														},
														{
															"key": "audit",
															"value": "audit=comment:'initial+facade+provisioning'"
														}
													]
												},
												"description": "Returns a SuccessResponse if facade is created"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/_facade/:table?options=<string>&audit=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																":table"
															],
															"query": [
																{
																	"key": "options",
																	"value": "<string>"
																},
																{
																	"key": "audit",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Create facade without option param",
									"item": [
										{
											"name": "Creates table /sor/1/_table/{table}",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('table', 'table_'+uuid.v4());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "placement:'ugc_global:ugc'"
														},
														{
															"key": "audit",
															"value": "comment:'initial+provisioning'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is created"
											},
											"response": []
										},
										{
											"name": "Creates a facade",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.text()).to.eql(\"Missing required query parameter: options\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-BV-Api-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_facade/{{table}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_facade",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "<string>",
															"disabled": true
														}
													]
												},
												"description": "Returns a SuccessResponse if facade is created"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/_facade/:table?options=<string>&audit=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																":table"
															],
															"query": [
																{
																	"key": "options",
																	"value": "<string>"
																},
																{
																	"key": "audit",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Drops a table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "comment:'table_removal'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is dropped"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Create facade in the same placement with table",
									"item": [
										{
											"name": "Creates table /sor/1/_table/{table}",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('table', 'table_'+uuid.v4());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "placement:'ugc_global:ugc'"
														},
														{
															"key": "audit",
															"value": "comment:'initial+provisioning'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is created"
											},
											"response": []
										},
										{
											"name": "Creates a facade",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.text()).to.eql(\"Cannot create a facade in the same placement as its table: ugc_global:ugc\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-BV-Api-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_facade/{{table}}?options=placement:'ugc_global:ugc'&audit=audit=comment:'initial+facade+provisioning'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_facade",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "placement:'ugc_global:ugc'"
														},
														{
															"key": "audit",
															"value": "audit=comment:'initial+facade+provisioning'"
														}
													]
												},
												"description": "Returns a SuccessResponse if facade is created"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/_facade/:table?options=<string>&audit=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																":table"
															],
															"query": [
																{
																	"key": "options",
																	"value": "<string>"
																},
																{
																	"key": "audit",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Drops a table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "comment:'table_removal'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is dropped"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Create facade in not existing pacement",
									"item": [
										{
											"name": "Creates table /sor/1/_table/{table}",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('table', 'table_'+uuid.v4());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "placement:'ugc_global:ugc'"
														},
														{
															"key": "audit",
															"value": "comment:'initial+provisioning'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is created"
											},
											"response": []
										},
										{
											"name": "Creates a facade",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.text()).to.eql(\"Unknown placement string: not_existing:placement\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-BV-Api-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_facade/{{table}}?options=placement:'not_existing:placement'&audit=audit=comment:'initial+facade+provisioning'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_facade",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "placement:'not_existing:placement'"
														},
														{
															"key": "audit",
															"value": "audit=comment:'initial+facade+provisioning'"
														}
													]
												},
												"description": "Returns a SuccessResponse if facade is created"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/_facade/:table?options=<string>&audit=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																":table"
															],
															"query": [
																{
																	"key": "options",
																	"value": "<string>"
																},
																{
																	"key": "audit",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Drops a table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "comment:'table_removal'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is dropped"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Create facade",
									"item": [
										{
											"name": "Creates table /sor/1/_table/{table}",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('table', 'table_'+uuid.v4());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "placement:'ugc_global:ugc'"
														},
														{
															"key": "audit",
															"value": "comment:'initial+provisioning'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is created"
											},
											"response": []
										},
										{
											"name": "Creates a facade",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-BV-Api-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_facade/{{table}}?options=placement:'catalog_global:cat'&audit=audit=comment:'initial+facade+provisioning'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_facade",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "placement:'catalog_global:cat'"
														},
														{
															"key": "audit",
															"value": "audit=comment:'initial+facade+provisioning'"
														}
													]
												},
												"description": "Returns a SuccessResponse if facade is created"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/_facade/:table?options=<string>&audit=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																":table"
															],
															"query": [
																{
																	"key": "options",
																	"value": "<string>"
																},
																{
																	"key": "audit",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Drops a table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "comment:'table_removal'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is dropped"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Create facade without audit param",
									"item": [
										{
											"name": "Creates table /sor/1/_table/{table}",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('table', 'table_'+uuid.v4());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "placement:'ugc_global:ugc'"
														},
														{
															"key": "audit",
															"value": "comment:'initial+provisioning'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is created"
											},
											"response": []
										},
										{
											"name": "Creates a facade",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.text()).to.eql(\"Missing required query parameter: audit\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-BV-Api-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_facade/{{table}}?options=placement:'ugc_global:ugc'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_facade",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "placement:'ugc_global:ugc'"
														}
													]
												},
												"description": "Returns a SuccessResponse if facade is created"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/_facade/:table?options=<string>&audit=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																":table"
															],
															"query": [
																{
																	"key": "options",
																	"value": "<string>"
																},
																{
																	"key": "audit",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Drops a table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "comment:'table_removal'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is dropped"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "Creates a facade",
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/_facade/:table?options=<string>&audit=<string>",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"_facade",
												":table"
											],
											"query": [
												{
													"key": "options",
													"value": "<string>"
												},
												{
													"key": "audit",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "table",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										},
										"description": "Returns a SuccessResponse if facade is created"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sor/1/_facade/:table?options=<string>&audit=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sor",
														"1",
														"_facade",
														":table"
													],
													"query": [
														{
															"key": "options",
															"value": "<string>"
														},
														{
															"key": "audit",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "table"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"success\": false,\n \"debug\": {}\n}"
										}
									]
								}
							]
						},
						{
							"name": "Drops a Facade",
							"item": [
								{
									"name": "TC: Request without api-key",
									"item": [
										{
											"name": "Drops a Facade",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"reason\":\"not authorized\"});",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key_no_rights}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_facade/not_existing_table?audit=<string>&placement=<string>",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_facade",
														"not_existing_table"
													],
													"query": [
														{
															"key": "audit",
															"value": "<string>"
														},
														{
															"key": "placement",
															"value": "<string>"
														}
													]
												},
												"description": "Returns a SuccessResponse if facade is dropped"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/_facade/:table?audit=<string>&placement=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																":table"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "<string>"
																},
																{
																	"key": "placement",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Request without placement to drop facade",
									"item": [
										{
											"name": "Drops a Facade",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.text()).to.eql('Missing required placement.');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_facade/:table?audit=comment:'facade+deletion'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_facade",
														":table"
													],
													"query": [
														{
															"key": "audit",
															"value": "comment:'facade+deletion'"
														},
														{
															"key": "placement",
															"value": "<string>",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "table",
															"value": "<string>",
															"description": "(Required) "
														}
													]
												},
												"description": "Returns a SuccessResponse if facade is dropped"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/_facade/:table?audit=<string>&placement=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																":table"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "<string>"
																},
																{
																	"key": "placement",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Request without audit param",
									"item": [
										{
											"name": "Drops a Facade",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.text()).to.eql('Missing required query parameter: audit');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_facade/:table?placement=ugc_global:ugc",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_facade",
														":table"
													],
													"query": [
														{
															"key": "audit",
															"value": "comment:'facade+deletion'",
															"disabled": true
														},
														{
															"key": "placement",
															"value": "ugc_global:ugc"
														}
													],
													"variable": [
														{
															"key": "table",
															"value": "<string>",
															"description": "(Required) "
														}
													]
												},
												"description": "Returns a SuccessResponse if facade is dropped"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/_facade/:table?audit=<string>&placement=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																":table"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "<string>"
																},
																{
																	"key": "placement",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Drop facade",
									"item": [
										{
											"name": "Creates table /sor/1/_table/{table}",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('table', 'table_'+uuid.v4());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
															"",
															"if(!isLocal) {",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"",
															"    pm.test(\"Body matches string\", function () {",
															"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"    });",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_eu:ugc'&audit=comment:'initial+provisioning'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "placement:'ugc_eu:ugc'"
														},
														{
															"key": "audit",
															"value": "comment:'initial+provisioning'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is created"
											},
											"response": []
										},
										{
											"name": "Drops a Facade before it is created",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
															"",
															"if(!isLocal) {",
															"    pm.test(\"Status code is 404\", function () {",
															"        pm.response.to.have.status(404);",
															"    });",
															"",
															"    pm.test(\"Body matches string\", function () {",
															"        pm.expect(pm.response.json()).to.eql({",
															"            message:`Unknown facade: ${pm.environment.get('table')} in ugc_us:ugc`,",
															"            facade: pm.environment.get('table'),",
															"            suppressed:[]",
															"        });",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}?audit=comment:'facade+deletion'&placement=ugc_us:ugc",
													"host": [
														"{{baseurl_dc2}}"
													],
													"path": [
														"sor",
														"1",
														"_facade",
														"{{table}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "comment:'facade+deletion'"
														},
														{
															"key": "placement",
															"value": "ugc_us:ugc"
														}
													]
												},
												"description": "Returns a SuccessResponse if facade is dropped"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/_facade/:table?audit=<string>&placement=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																":table"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "<string>"
																},
																{
																	"key": "placement",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates a facade",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
															"",
															"if(!isLocal) {",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"",
															"    pm.test(\"Body matches string\", function () {",
															"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-BV-Api-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}?options=placement:'ugc_us:ugc'&audit=audit=comment:'initial+facade+provisioning'",
													"host": [
														"{{baseurl_dc2}}"
													],
													"path": [
														"sor",
														"1",
														"_facade",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "placement:'ugc_us:ugc'"
														},
														{
															"key": "audit",
															"value": "audit=comment:'initial+facade+provisioning'"
														}
													]
												},
												"description": "Returns a SuccessResponse if facade is created"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/_facade/:table?options=<string>&audit=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																":table"
															],
															"query": [
																{
																	"key": "options",
																	"value": "<string>"
																},
																{
																	"key": "audit",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Drops a Facade",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
															"",
															"if(!isLocal) {",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"",
															"    pm.test(\"Body matches string\", function () {",
															"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}?audit=comment:'facade+deletion'&placement=ugc_us:ugc",
													"host": [
														"{{baseurl_dc2}}"
													],
													"path": [
														"sor",
														"1",
														"_facade",
														"{{table}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "comment:'facade+deletion'"
														},
														{
															"key": "placement",
															"value": "ugc_us:ugc"
														}
													]
												},
												"description": "Returns a SuccessResponse if facade is dropped"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/_facade/:table?audit=<string>&placement=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																":table"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "<string>"
																},
																{
																	"key": "placement",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Request with not existing placement",
									"item": [
										{
											"name": "Creates table /sor/1/_table/{table}",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('table', 'table_'+uuid.v4());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
															"",
															"if(!isLocal) {",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"",
															"    pm.test(\"Body matches string\", function () {",
															"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_eu:ugc'&audit=comment:'initial+provisioning'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "placement:'ugc_eu:ugc'"
														},
														{
															"key": "audit",
															"value": "comment:'initial+provisioning'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is created"
											},
											"response": []
										},
										{
											"name": "Drops a Facade",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
															"",
															"if(!isLocal) {",
															"    pm.test(\"Status code is 400\", function () {",
															"        pm.response.to.have.status(400);",
															"    });",
															"",
															"    pm.test(\"Body matches string\", function () {",
															"        pm.expect(pm.response.text()).to.eql('Unknown placement string: not_existing:placement');",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}?audit=comment:'facade+deletion'&placement=not_existing:placement",
													"host": [
														"{{baseurl_dc2}}"
													],
													"path": [
														"sor",
														"1",
														"_facade",
														"{{table}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "comment:'facade+deletion'"
														},
														{
															"key": "placement",
															"value": "not_existing:placement"
														}
													]
												},
												"description": "Returns a SuccessResponse if facade is dropped"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/_facade/:table?audit=<string>&placement=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																":table"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "<string>"
																},
																{
																	"key": "placement",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Drops a table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
															"",
															"if(!isLocal) {",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"",
															"    pm.test(\"Body matches string\", function () {",
															"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "comment:'table_removal'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is dropped"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "Drops a Facade",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/_facade/:table?audit=<string>&placement=<string>",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"_facade",
												":table"
											],
											"query": [
												{
													"key": "audit",
													"value": "<string>"
												},
												{
													"key": "placement",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "table",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										},
										"description": "Returns a SuccessResponse if facade is dropped"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sor/1/_facade/:table?audit=<string>&placement=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sor",
														"1",
														"_facade",
														":table"
													],
													"query": [
														{
															"key": "audit",
															"value": "<string>"
														},
														{
															"key": "placement",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "table"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"success\": false,\n \"debug\": {}\n}"
										}
									]
								}
							]
						},
						{
							"name": "{key}",
							"item": [
								{
									"name": "Creates or replaces a piece of content of a facade in the data store",
									"item": [
										{
											"name": "TC: Request without api-key",
											"item": [
												{
													"name": "Creates or replaces a piece of content of a facade in the data store",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {",
																	"    pm.response.to.have.status(403);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"reason\":\"not authorized\"});",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key_no_rights}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_facade/{table}/{key}?audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{table}",
																"{key}"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "<string>"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "debug",
																	"value": "<string>"
																}
															]
														},
														"description": "Creates or replaces a piece of content of a facade in the data store.  Overwrites the old\n version of the content, if it exists.  Expects a literal JSON representation\n of the object."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/_facade/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		":table",
																		":key"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "TC: Request without audit param",
											"item": [
												{
													"name": "Creates or replaces a piece of content of a facade in the data store",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.text()).to.eql('Missing required query parameter: audit');",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_facade/{table}/{key}?consistency=STRONG&tag=postman&tag=postman1&debug=true",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{table}",
																"{key}"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "postman"
																},
																{
																	"key": "tag",
																	"value": "postman1"
																},
																{
																	"key": "debug",
																	"value": "true"
																}
															]
														},
														"description": "Creates or replaces a piece of content of a facade in the data store.  Overwrites the old\n version of the content, if it exists.  Expects a literal JSON representation\n of the object."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/_facade/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		":table",
																		":key"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "TC: Request to not existing table",
											"item": [
												{
													"name": "Creates or replaces a piece of content of a facade in the data store",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 404\", function () {",
																	"    pm.response.to.have.status(404);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"message\":\"Unknown table: not_exiting_table\",\"table\":\"not_exiting_table\",\"suppressed\":[]});",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-APi-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_facade/not_exiting_table/{{key}}?audit=comment:'create+replace+piece+of+data'&consistency=STRONG&tag=postman&tag=postman1&debug=true",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"not_exiting_table",
																"{{key}}"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "comment:'create+replace+piece+of+data'"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "postman"
																},
																{
																	"key": "tag",
																	"value": "postman1"
																},
																{
																	"key": "debug",
																	"value": "true"
																}
															]
														},
														"description": "Creates or replaces a piece of content of a facade in the data store.  Overwrites the old\n version of the content, if it exists.  Expects a literal JSON representation\n of the object."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/_facade/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		":table",
																		":key"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "TC: Request to table instead of facade",
											"item": [
												{
													"name": "Creates table /sor/1/_table/{table}",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"pm.environment.set('table', 'table_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_eu:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_eu:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": []
												},
												{
													"name": "Creates or replaces a piece of content of a facade in the data store",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 403\", function () {",
																	"        pm.response.to.have.status(403);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.text()).to.eql('Access denied. Update intended for a facade, but the table would be updated.');",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
														},
														"url": {
															"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}/{{key}}?audit=comment:'update+piece+of+content'&consistency=STRONG&tag=postman&tag=postman1&debug=true",
															"host": [
																"{{baseurl_dc2}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}",
																"{{key}}"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "comment:'update+piece+of+content'"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "postman"
																},
																{
																	"key": "tag",
																	"value": "postman1"
																},
																{
																	"key": "debug",
																	"value": "true"
																}
															]
														},
														"description": "Creates or replaces a piece of content of a facade in the data store.  Overwrites the old\n version of the content, if it exists.  Expects a literal JSON representation\n of the object."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/_facade/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		":table",
																		":key"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "TC: Request to facade of removed table",
											"item": [
												{
													"name": "Creates table /sor/1/_table/{table}",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"pm.environment.set('table', 'table_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_eu:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_eu:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": []
												},
												{
													"name": "Creates a facade",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}?options=placement:'ugc_us:ugc'&audit=audit=comment:'initial+facade+provisioning'",
															"host": [
																"{{baseurl_dc2}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_us:ugc'"
																},
																{
																	"key": "audit",
																	"value": "audit=comment:'initial+facade+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if facade is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/_facade/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Creates or replaces a piece of content of a facade in the data storebefore table removal",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body assertion\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
														},
														"url": {
															"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}/{{key}}?audit=comment:'update+piece+of+content'",
															"host": [
																"{{baseurl_dc2}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}",
																"{{key}}"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "comment:'update+piece+of+content'"
																},
																{
																	"key": "consistency",
																	"value": "STRONG",
																	"disabled": true
																},
																{
																	"key": "tag",
																	"value": "postman",
																	"disabled": true
																},
																{
																	"key": "tag",
																	"value": "postman1",
																	"disabled": true
																},
																{
																	"key": "debug",
																	"value": "true",
																	"disabled": true
																}
															]
														},
														"description": "Creates or replaces a piece of content of a facade in the data store.  Overwrites the old\n version of the content, if it exists.  Expects a literal JSON representation\n of the object."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/_facade/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		":table",
																		":key"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({ \"success\": true });",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Creates or replaces a piece of content of a facade in the data store after table removal",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 404\", function () {",
																	"        pm.response.to.have.status(404);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.text()).to.eql(`{\"message\":\"Unknown table: ${pm.environment.get('table')}\",\"table\":\"${pm.environment.get('table')}\",\"suppressed\":[]}`);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
														},
														"url": {
															"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}/{{key}}?audit=comment:'update+piece+of+content'&consistency=STRONG&tag=postman&tag=postman1&debug=true",
															"host": [
																"{{baseurl_dc2}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}",
																"{{key}}"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "comment:'update+piece+of+content'"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "postman"
																},
																{
																	"key": "tag",
																	"value": "postman1"
																},
																{
																	"key": "debug",
																	"value": "true"
																}
															]
														},
														"description": "Creates or replaces a piece of content of a facade in the data store.  Overwrites the old\n version of the content, if it exists.  Expects a literal JSON representation\n of the object."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/_facade/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		":table",
																		":key"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "TC: Request to facade with all parameters populated",
											"item": [
												{
													"name": "Creates table /sor/1/_table/{table}",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"pm.environment.set('table', 'table_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_eu:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_eu:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": []
												},
												{
													"name": "Creates a facade",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}?options=placement:'ugc_us:ugc'&audit=audit=comment:'initial+facade+provisioning'",
															"host": [
																"{{baseurl_dc2}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_us:ugc'"
																},
																{
																	"key": "audit",
																	"value": "audit=comment:'initial+facade+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if facade is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/_facade/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Creates or replaces a piece of content of a facade in the data storebefore table removal",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body assertion\", function () {",
																	"        pm.expect(pm.response.json()).to.have.keys(\"success\",\"debug\");",
																	"        pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
																	"        pm.expect(pm.response.json().success).to.eql(true);",
																	"",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
														},
														"url": {
															"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}/{{key}}?audit=comment:'update+piece+of+content'&consistency=STRONG&tag=postman&tag=postman1&debug=true",
															"host": [
																"{{baseurl_dc2}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}",
																"{{key}}"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "comment:'update+piece+of+content'"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "postman"
																},
																{
																	"key": "tag",
																	"value": "postman1"
																},
																{
																	"key": "debug",
																	"value": "true"
																}
															]
														},
														"description": "Creates or replaces a piece of content of a facade in the data store.  Overwrites the old\n version of the content, if it exists.  Expects a literal JSON representation\n of the object."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/_facade/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		":table",
																		":key"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "Creates or replaces a piece of content of a facade in the data store",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({ reason: 'not authorized' } );",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_facade/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_facade",
														":table",
														":key"
													],
													"query": [
														{
															"key": "changeId",
															"value": "<string>"
														},
														{
															"key": "audit",
															"value": "<string>"
														},
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "tag",
															"value": "<string>"
														},
														{
															"key": "tag",
															"value": "<string>"
														},
														{
															"key": "debug",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "table",
															"value": "<string>",
															"description": "(Required) "
														},
														{
															"key": "key",
															"value": "<string>",
															"description": "(Required) "
														}
													]
												},
												"description": "Creates or replaces a piece of content of a facade in the data store.  Overwrites the old\n version of the content, if it exists.  Expects a literal JSON representation\n of the object."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/_facade/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>"
																},
																{
																	"key": "audit",
																	"value": "<string>"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "debug",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta.",
									"item": [
										{
											"name": "TC: Request with api-key without access",
											"item": [
												{
													"name": "Creates table /sor/1/_table/{table}",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"pm.environment.set('table', 'table_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_eu:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_eu:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": []
												},
												{
													"name": "Creates a facade",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}?options=placement:'ugc_us:ugc'&audit=audit=comment:'initial+facade+provisioning'",
															"host": [
																"{{baseurl_dc2}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_us:ugc'"
																},
																{
																	"key": "audit",
																	"value": "audit=comment:'initial+facade+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if facade is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/_facade/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta.",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 403\", function () {",
																	"        pm.response.to.have.status(403);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"reason\":\"not authorized\"});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/x.json-delta"
															},
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key_no_rights}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "\"<string>\""
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_facade/{{table}}/{{key}}?audit=comment:'modify+info+in+facade'&consistency=STRONG&tag=postman&tag=postman1&debug=false",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}",
																"{{key}}"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "comment:'modify+info+in+facade'"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "postman"
																},
																{
																	"key": "tag",
																	"value": "postman1"
																},
																{
																	"key": "debug",
																	"value": "false"
																}
															]
														},
														"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/_facade/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		":table",
																		":key"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "TC: Request with all parameters and debug set to true",
											"item": [
												{
													"name": "Creates table /sor/1/_table/{table}",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"pm.environment.set('table', 'table_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_eu:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_eu:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": []
												},
												{
													"name": "Creates a facade",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}?options=placement:'ugc_us:ugc'&audit=audit=comment:'initial+facade+provisioning'",
															"host": [
																"{{baseurl_dc2}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_us:ugc'"
																},
																{
																	"key": "audit",
																	"value": "audit=comment:'initial+facade+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if facade is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/_facade/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta.",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.have.keys(\"success\",\"debug\");",
																	"        pm.expect(pm.response.json().success).to.eql(true);",
																	"        pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/x.json-delta"
															},
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
														},
														"url": {
															"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}/{{key}}?audit=comment:'modify+info+in+facade'&consistency=STRONG&tag=postman&tag=postman1&debug=true",
															"host": [
																"{{baseurl_dc2}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}",
																"{{key}}"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "comment:'modify+info+in+facade'"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "postman"
																},
																{
																	"key": "tag",
																	"value": "postman1"
																},
																{
																	"key": "debug",
																	"value": "true"
																}
															]
														},
														"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/_facade/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		":table",
																		":key"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "TC: Request with all parameters and debug set to false",
											"item": [
												{
													"name": "Creates table /sor/1/_table/{table}",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"pm.environment.set('table', 'table_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_eu:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_eu:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": []
												},
												{
													"name": "Creates a facade",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}?options=placement:'ugc_us:ugc'&audit=audit=comment:'initial+facade+provisioning'",
															"host": [
																"{{baseurl_dc2}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_us:ugc'"
																},
																{
																	"key": "audit",
																	"value": "audit=comment:'initial+facade+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if facade is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/_facade/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta.",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({ \"success\": true });",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/x.json-delta"
															},
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
														},
														"url": {
															"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}/{{key}}?audit=comment:'modify+info+in+facade'&consistency=STRONG&tag=postman&tag=postman1&debug=false",
															"host": [
																"{{baseurl_dc2}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}",
																"{{key}}"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "comment:'modify+info+in+facade'"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "postman"
																},
																{
																	"key": "tag",
																	"value": "postman1"
																},
																{
																	"key": "debug",
																	"value": "false"
																}
															]
														},
														"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/_facade/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		":table",
																		":key"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "TC: Request with correct data to wrong datacenter",
											"item": [
												{
													"name": "Creates table /sor/1/_table/{table}",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"pm.environment.set('table', 'table_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_eu:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_eu:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": []
												},
												{
													"name": "Creates a facade",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}?options=placement:'ugc_us:ugc'&audit=audit=comment:'initial+facade+provisioning'",
															"host": [
																"{{baseurl_dc2}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_us:ugc'"
																},
																{
																	"key": "audit",
																	"value": "audit=comment:'initial+facade+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if facade is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/_facade/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta.",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 403\", function () {",
																	"        pm.response.to.have.status(403);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.text()).to.eql(\"Access denied. Update intended for a facade, but the table would be updated.\");",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/x.json-delta"
															},
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_facade/{{table}}/{{key}}?audit=comment:'modify+info+in+facade'&consistency=STRONG&tag=postman&tag=postman1&debug=true",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}",
																"{{key}}"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "comment:'modify+info+in+facade'"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "postman"
																},
																{
																	"key": "tag",
																	"value": "postman1"
																},
																{
																	"key": "debug",
																	"value": "true"
																}
															]
														},
														"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/_facade/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		":table",
																		":key"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "TC: Request with correct data to not existing table",
											"item": [
												{
													"name": "Creates table /sor/1/_table/{table}",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"pm.environment.set('table', 'table_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_eu:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_eu:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": []
												},
												{
													"name": "Creates a facade",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}?options=placement:'ugc_us:ugc'&audit=audit=comment:'initial+facade+provisioning'",
															"host": [
																"{{baseurl_dc2}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_us:ugc'"
																},
																{
																	"key": "audit",
																	"value": "audit=comment:'initial+facade+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if facade is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/_facade/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta.",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 404\", function () {",
																	"        pm.response.to.have.status(404);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"message\":\"Unknown table: not_existing_table\",\"table\":\"not_existing_table\",\"suppressed\":[]});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/x.json-delta"
															},
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
														},
														"url": {
															"raw": "{{baseurl_dc2}}/sor/1/_facade/not_existing_table/{{key}}?audit=comment:'modify+info+in+facade'&consistency=STRONG&tag=postman&tag=postman1&debug=true",
															"host": [
																"{{baseurl_dc2}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"not_existing_table",
																"{{key}}"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "comment:'modify+info+in+facade'"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "postman"
																},
																{
																	"key": "tag",
																	"value": "postman1"
																},
																{
																	"key": "debug",
																	"value": "true"
																}
															]
														},
														"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/_facade/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		":table",
																		":key"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "TC: Request with correct data to not existing key",
											"item": [
												{
													"name": "Creates table /sor/1/_table/{table}",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"pm.environment.set('table', 'table_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_eu:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_eu:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": []
												},
												{
													"name": "Creates a facade",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}?options=placement:'ugc_us:ugc'&audit=audit=comment:'initial+facade+provisioning'",
															"host": [
																"{{baseurl_dc2}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_us:ugc'"
																},
																{
																	"key": "audit",
																	"value": "audit=comment:'initial+facade+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if facade is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/_facade/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta.",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.have.keys(\"success\",\"debug\");",
																	"        pm.expect(pm.response.json().success).to.eql(true);",
																	"        pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/x.json-delta"
															},
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
														},
														"url": {
															"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}/not_existing_key?audit=comment:'modify+info+in+facade'&consistency=STRONG&tag=postman&tag=postman1&debug=true",
															"host": [
																"{{baseurl_dc2}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}",
																"not_existing_key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "comment:'modify+info+in+facade'"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "postman"
																},
																{
																	"key": "tag",
																	"value": "postman1"
																},
																{
																	"key": "debug",
																	"value": "true"
																}
															]
														},
														"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/_facade/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		":table",
																		":key"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "TC: Request with wrong changeId",
											"item": [
												{
													"name": "Creates table /sor/1/_table/{table}",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"pm.environment.set('table', 'table_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_eu:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_eu:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": []
												},
												{
													"name": "Creates a facade",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}?options=placement:'ugc_us:ugc'&audit=audit=comment:'initial+facade+provisioning'",
															"host": [
																"{{baseurl_dc2}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_us:ugc'"
																},
																{
																	"key": "audit",
																	"value": "audit=comment:'initial+facade+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if facade is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/_facade/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta.",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 400\", function () {",
																	"        pm.response.to.have.status(400);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.text()).to.eql(\"Invalid uuid parameter (must be a RFC 4122 version 1 time-based uuid): someIncorrectUUID\");",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/x.json-delta"
															},
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
														},
														"url": {
															"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}/{{key}}?changeId=someIncorrectUUID&audit=comment:'modify+info+in+facade'&consistency=STRONG&tag=postman&tag=postman1&debug=true",
															"host": [
																"{{baseurl_dc2}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}",
																"{{key}}"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "someIncorrectUUID"
																},
																{
																	"key": "audit",
																	"value": "comment:'modify+info+in+facade'"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "postman"
																},
																{
																	"key": "tag",
																	"value": "postman1"
																},
																{
																	"key": "debug",
																	"value": "true"
																}
															]
														},
														"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/_facade/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		":table",
																		":key"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "TC: Request without audit param",
											"item": [
												{
													"name": "Creates table /sor/1/_table/{table}",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"pm.environment.set('table', 'table_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_eu:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_eu:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": []
												},
												{
													"name": "Creates a facade",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}?options=placement:'ugc_us:ugc'&audit=audit=comment:'initial+facade+provisioning'",
															"host": [
																"{{baseurl_dc2}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_us:ugc'"
																},
																{
																	"key": "audit",
																	"value": "audit=comment:'initial+facade+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if facade is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/_facade/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta.",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 400\", function () {",
																	"        pm.response.to.have.status(400);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.text()).to.eql(\"Missing required query parameter: audit\");",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/x.json-delta"
															},
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
														},
														"url": {
															"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}/{{key}}?consistency=STRONG&tag=postman&tag=postman1&debug=true",
															"host": [
																"{{baseurl_dc2}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}",
																"{{key}}"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "someIncorrectUUID",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "comment:'modify+info+in+facade'",
																	"disabled": true
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "postman"
																},
																{
																	"key": "tag",
																	"value": "postman1"
																},
																{
																	"key": "debug",
																	"value": "true"
																}
															]
														},
														"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/_facade/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		":table",
																		":key"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta.",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\"<string>\""
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_facade/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_facade",
														":table",
														":key"
													],
													"query": [
														{
															"key": "changeId",
															"value": "<string>"
														},
														{
															"key": "audit",
															"value": "<string>"
														},
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "tag",
															"value": "<string>"
														},
														{
															"key": "tag",
															"value": "<string>"
														},
														{
															"key": "debug",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "table",
															"value": "<string>",
															"description": "(Required) "
														},
														{
															"key": "key",
															"value": "<string>",
															"description": "(Required) "
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/_facade/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>"
																},
																{
																	"key": "audit",
																	"value": "<string>"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "debug",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "Deletes a piece of content from a facade in the data store.",
									"item": [
										{
											"name": "TC: Request with api-key without access",
											"item": [
												{
													"name": "Creates table /sor/1/_table/{table}",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"pm.environment.set('table', 'table_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																	"",
																	"    if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_eu:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_eu:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": []
												},
												{
													"name": "Creates a facade",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}?options=placement:'ugc_us:ugc'&audit=audit=comment:'initial+facade+provisioning'",
															"host": [
																"{{baseurl_dc2}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_us:ugc'"
																},
																{
																	"key": "audit",
																	"value": "audit=comment:'initial+facade+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if facade is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/_facade/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Deletes a piece of content from a facade in the data store.",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 403\", function () {",
																	"        pm.response.to.have.status(403);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"reason\": \"not authorized\"});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key_no_rights}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
														},
														"url": {
															"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}/{{key}}?audit=comment:'delete+piece+of+content+from+facade'&consistency=STRONG&tag=<string>&tag=<string>&debug=false",
															"host": [
																"{{baseurl_dc2}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}",
																"{{key}}"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "comment:'delete+piece+of+content+from+facade'"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "debug",
																	"value": "false"
																}
															]
														},
														"description": "Deletes a piece of content from a facade in the data store."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/_facade/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		":table",
																		":key"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "TC: Request without audit param",
											"item": [
												{
													"name": "Creates table /sor/1/_table/{table}",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"pm.environment.set('table', 'table_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_eu:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_eu:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": []
												},
												{
													"name": "Creates a facade",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}?options=placement:'ugc_us:ugc'&audit=audit=comment:'initial+facade+provisioning'",
															"host": [
																"{{baseurl_dc2}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_us:ugc'"
																},
																{
																	"key": "audit",
																	"value": "audit=comment:'initial+facade+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if facade is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/_facade/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Deletes a piece of content from a facade in the data store.",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 400\", function () {",
																	"        pm.response.to.have.status(400);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.text()).to.eql('Missing required query parameter: audit');",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
														},
														"url": {
															"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}/{{key}}?consistency=STRONG&tag=postman&tag=postman1&debug=false",
															"host": [
																"{{baseurl_dc2}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}",
																"{{key}}"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "comment:'delete+piece+of+content+from+facade'",
																	"disabled": true
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "postman"
																},
																{
																	"key": "tag",
																	"value": "postman1"
																},
																{
																	"key": "debug",
																	"value": "false"
																}
															]
														},
														"description": "Deletes a piece of content from a facade in the data store."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/_facade/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		":table",
																		":key"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "TC: Request to delete piece of data from facade",
											"item": [
												{
													"name": "Creates table /sor/1/_table/{table}",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"pm.environment.set('table', 'table_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_eu:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_eu:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": []
												},
												{
													"name": "Creates a facade",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}?options=placement:'ugc_us:ugc'&audit=audit=comment:'initial+facade+provisioning'",
															"host": [
																"{{baseurl_dc2}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_us:ugc'"
																},
																{
																	"key": "audit",
																	"value": "audit=comment:'initial+facade+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if facade is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/_facade/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Deletes a piece of content from a facade in the data store.",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
														},
														"url": {
															"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}/{{key}}?audit=comment:'delete+piece+of+content+from+facade'&consistency=STRONG&tag=postman&tag=postman1&debug=false",
															"host": [
																"{{baseurl_dc2}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}",
																"{{key}}"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "comment:'delete+piece+of+content+from+facade'"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "postman"
																},
																{
																	"key": "tag",
																	"value": "postman1"
																},
																{
																	"key": "debug",
																	"value": "false"
																}
															]
														},
														"description": "Deletes a piece of content from a facade in the data store."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/_facade/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		":table",
																		":key"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "TC: Request to delete piece of data from facade with wrong datacenter",
											"item": [
												{
													"name": "Creates table /sor/1/_table/{table}",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"pm.environment.set('table', 'table_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_eu:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_eu:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": []
												},
												{
													"name": "Creates a facade",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}?options=placement:'ugc_us:ugc'&audit=audit=comment:'initial+facade+provisioning'",
															"host": [
																"{{baseurl_dc2}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_us:ugc'"
																},
																{
																	"key": "audit",
																	"value": "audit=comment:'initial+facade+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if facade is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/_facade/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Deletes a piece of content from a facade in the data store.",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 403\", function () {",
																	"        pm.response.to.have.status(403);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.text()).to.eql('Access denied. Update intended for a facade, but the table would be updated.');",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_facade/{{table}}/{{key}}?audit=comment:'delete+piece+of+content+from+facade'&consistency=STRONG&tag=postman&tag=postman1&debug=false",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}",
																"{{key}}"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "comment:'delete+piece+of+content+from+facade'"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "postman"
																},
																{
																	"key": "tag",
																	"value": "postman1"
																},
																{
																	"key": "debug",
																	"value": "false"
																}
															]
														},
														"description": "Deletes a piece of content from a facade in the data store."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/_facade/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		":table",
																		":key"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "TC: Request to delete piece of data from facade with debug set true",
											"item": [
												{
													"name": "Creates table /sor/1/_table/{table}",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"pm.environment.set('table', 'table_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_eu:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_eu:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": []
												},
												{
													"name": "Creates a facade",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}?options=placement:'ugc_us:ugc'&audit=audit=comment:'initial+facade+provisioning'",
															"host": [
																"{{baseurl_dc2}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_us:ugc'"
																},
																{
																	"key": "audit",
																	"value": "audit=comment:'initial+facade+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if facade is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/_facade/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Deletes a piece of content from a facade in the data store.",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.have.keys(\"success\",\"debug\");",
																	"        pm.expect(pm.response.json().success).to.eql(true);",
																	"        pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
														},
														"url": {
															"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}/{{key}}?audit=comment:'delete+piece+of+content+from+facade'&consistency=STRONG&tag=postman&tag=postman1&debug=true",
															"host": [
																"{{baseurl_dc2}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}",
																"{{key}}"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "comment:'delete+piece+of+content+from+facade'"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "postman"
																},
																{
																	"key": "tag",
																	"value": "postman1"
																},
																{
																	"key": "debug",
																	"value": "true"
																}
															]
														},
														"description": "Deletes a piece of content from a facade in the data store."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/_facade/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		":table",
																		":key"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "TC: Request to delete piece of data from facade where table doesn't exist",
											"item": [
												{
													"name": "Deletes a piece of content from a facade in the data store.",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 404\", function () {",
																	"    pm.response.to.have.status(404);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"message\": \"Unknown table: not_existing_table\",\"table\": \"not_existing_table\",\"suppressed\": []});",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
														},
														"url": {
															"raw": "{{baseurl_dc2}}/sor/1/_facade/not_existing_table/{{key}}?audit=comment:'delete+piece+of+content+from+facade'&consistency=STRONG&tag=postman&tag=postman1&debug=false",
															"host": [
																"{{baseurl_dc2}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"not_existing_table",
																"{{key}}"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "comment:'delete+piece+of+content+from+facade'"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "postman"
																},
																{
																	"key": "tag",
																	"value": "postman1"
																},
																{
																	"key": "debug",
																	"value": "false"
																}
															]
														},
														"description": "Deletes a piece of content from a facade in the data store."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/_facade/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		":table",
																		":key"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "Deletes a piece of content from a facade in the data store.",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"<string>\",\n    \"authenticationId\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_facade/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_facade",
														":table",
														":key"
													],
													"query": [
														{
															"key": "changeId",
															"value": "<string>"
														},
														{
															"key": "audit",
															"value": "<string>"
														},
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "tag",
															"value": "<string>"
														},
														{
															"key": "tag",
															"value": "<string>"
														},
														{
															"key": "debug",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "table",
															"value": "<string>",
															"description": "(Required) "
														},
														{
															"key": "key",
															"value": "<string>",
															"description": "(Required) "
														}
													]
												},
												"description": "Deletes a piece of content from a facade in the data store."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/_facade/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>"
																},
																{
																	"key": "audit",
																	"value": "<string>"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "debug",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Does update all for Facade",
					"item": [
						{
							"name": "TC: Request without api-key",
							"item": [
								{
									"name": "Does update all for Facade",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.json().reason).to.be.oneOf([`not authorized to update table ${pm.environment.get('table')}`, 'not authorized']);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-BV-API-Key",
												"value": "{{api_key_no_rights}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n         {\n            \"table\": \"{{table}}\",\n            \"key\": \"demo1\",\n            \"delta\": \"{\\\"field1\\\":\\\"value1\\\",\\\"field2\\\":\\\"value2\\\",\\\"field3\\\":\\\"value3\\\"}\",\n            \"consistency\": \"STRONG\",\n            \"audit\": {\n              \"comment\": \"Adding demo1 document\"\n            }\n          },\n          {\n            \"table\": \"{{table}}\",\n            \"key\": \"demo2\",\n            \"delta\": \"{\\\"field1\\\":\\\"value1.1\\\",\\\"field5\\\":\\\"value5\\\",\\\"field32\\\":\\\"value33\\\"}\",\n            \"consistency\": \"STRONG\",\n            \"audit\": {\n            \"comment\": \"Update and Add\"\n        }\n      }\n]"
										},
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/_facade/_stream",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"_facade",
												"_stream"
											],
											"query": [
												{
													"key": "tag",
													"value": "<string>",
													"disabled": true
												},
												{
													"key": "tag",
													"value": "<string>",
													"disabled": true
												}
											]
										},
										"description": "Facade-equivalent operation for \"_stream\"\n See (@link #updateAll(java.io.InputStream, BooleanParam, Subject)}"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sor/1/_facade/_stream?tag=<string>&tag=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sor",
														"1",
														"_facade",
														"_stream"
													],
													"query": [
														{
															"key": "tag",
															"value": "<string>"
														},
														{
															"key": "tag",
															"value": "<string>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"success\": false,\n \"debug\": {}\n}"
										}
									]
								}
							]
						},
						{
							"name": "TC: Request to not existing facade",
							"item": [
								{
									"name": "Creates table /sor/1/_table/{table}",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var uuid = require('uuid');",
													"pm.environment.set('table', 'table_'+uuid.v4());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-BV-API-Key",
												"type": "text",
												"value": "{{api_key}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"_table",
												"{{table}}"
											],
											"query": [
												{
													"key": "options",
													"value": "placement:'ugc_global:ugc'"
												},
												{
													"key": "audit",
													"value": "comment:'initial+provisioning'"
												}
											]
										},
										"description": "Returns a SuccessResponse if table is created"
									},
									"response": []
								},
								{
									"name": "Does update all for Facade",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.eql('Access denied. Update intended for a facade, but the table would be updated.');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-BV-API-Key",
												"value": "{{api_key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n         {\n            \"table\": \"{{table}}\",\n            \"key\": \"demo1\",\n            \"delta\": \"{\\\"field1\\\":\\\"value1\\\",\\\"field2\\\":\\\"value2\\\",\\\"field3\\\":\\\"value3\\\"}\",\n            \"consistency\": \"STRONG\",\n            \"audit\": {\n              \"comment\": \"Adding demo1 document\"\n            }\n          },\n          {\n            \"table\": \"{{table}}\",\n            \"key\": \"demo2\",\n            \"delta\": \"{\\\"field1\\\":\\\"value1.1\\\",\\\"field5\\\":\\\"value5\\\",\\\"field32\\\":\\\"value33\\\"}\",\n            \"consistency\": \"STRONG\",\n            \"audit\": {\n            \"comment\": \"Update and Add\"\n        }\n      }\n]"
										},
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/_facade/_stream",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"_facade",
												"_stream"
											],
											"query": [
												{
													"key": "tag",
													"value": "<string>",
													"disabled": true
												},
												{
													"key": "tag",
													"value": "<string>",
													"disabled": true
												}
											]
										},
										"description": "Facade-equivalent operation for \"_stream\"\n See (@link #updateAll(java.io.InputStream, BooleanParam, Subject)}"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sor/1/_facade/_stream?tag=<string>&tag=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sor",
														"1",
														"_facade",
														"_stream"
													],
													"query": [
														{
															"key": "tag",
															"value": "<string>"
														},
														{
															"key": "tag",
															"value": "<string>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"success\": false,\n \"debug\": {}\n}"
										}
									]
								},
								{
									"name": "Drops a table",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-BV-API-Key",
												"type": "text",
												"value": "{{api_key}}"
											}
										],
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"_table",
												"{{table}}"
											],
											"query": [
												{
													"key": "audit",
													"value": "comment:'table_removal'"
												}
											]
										},
										"description": "Returns a SuccessResponse if table is dropped"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														":table"
													],
													"query": [
														{
															"key": "audit",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "table"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"success\": false,\n \"debug\": {}\n}"
										}
									]
								}
							]
						},
						{
							"name": "TC: Request facade update with wrong/correct placement",
							"item": [
								{
									"name": "Creates table /sor/1/_table/{table}",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var uuid = require('uuid');",
													"pm.environment.set('table', 'table_'+uuid.v4());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost'); ",
													"",
													"(isLocal ? pm.test.skip : pm.test)(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"(isLocal ? pm.test.skip : pm.test)(\"Body matches string\", function () {",
													"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-BV-API-Key",
												"type": "text",
												"value": "{{api_key}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_eu:ugc'&audit=comment:'initial+provisioning'",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"_table",
												"{{table}}"
											],
											"query": [
												{
													"key": "options",
													"value": "placement:'ugc_eu:ugc'"
												},
												{
													"key": "audit",
													"value": "comment:'initial+provisioning'"
												}
											]
										},
										"description": "Returns a SuccessResponse if table is created"
									},
									"response": []
								},
								{
									"name": "Creates a facade",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost'); ",
													"",
													"(isLocal ? pm.test.skip : pm.test)(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"(isLocal ? pm.test.skip : pm.test)(\"Body matches string\", function () {",
													"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-BV-Api-Key",
												"value": "{{api_key}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}?options=placement:'ugc_us:ugc'&audit=audit=comment:'initial+facade+provisioning'",
											"host": [
												"{{baseurl_dc2}}"
											],
											"path": [
												"sor",
												"1",
												"_facade",
												"{{table}}"
											],
											"query": [
												{
													"key": "options",
													"value": "placement:'ugc_us:ugc'"
												},
												{
													"key": "audit",
													"value": "audit=comment:'initial+facade+provisioning'"
												}
											]
										},
										"description": "Returns a SuccessResponse if facade is created"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sor/1/_facade/:table?options=<string>&audit=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sor",
														"1",
														"_facade",
														":table"
													],
													"query": [
														{
															"key": "options",
															"value": "<string>"
														},
														{
															"key": "audit",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "table"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"success\": false,\n \"debug\": {}\n}"
										}
									]
								},
								{
									"name": "Does update all for Facade in correct datacenter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost'); ",
													"",
													"(isLocal ? pm.test.skip : pm.test)(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"(isLocal ? pm.test.skip : pm.test)(\"Body matches string\", function () {",
													"    pm.expect(pm.response.json()).to.eql({\"success\": true});",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-BV-API-Key",
												"value": "{{api_key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n         {\n            \"table\": \"{{table}}\",\n            \"key\": \"demo1\",\n            \"delta\": \"{\\\"field1\\\":\\\"value1\\\",\\\"field2\\\":\\\"value2\\\",\\\"field3\\\":\\\"value3\\\"}\",\n            \"consistency\": \"STRONG\",\n            \"audit\": {\n              \"comment\": \"Adding demo1 document\"\n            }\n          },\n          {\n            \"table\": \"{{table}}\",\n            \"key\": \"demo2\",\n            \"delta\": \"{\\\"field1\\\":\\\"value1.1\\\",\\\"field5\\\":\\\"value5\\\",\\\"field32\\\":\\\"value33\\\"}\",\n            \"consistency\": \"STRONG\",\n            \"audit\": {\n            \"comment\": \"Update and Add\"\n        }\n      }\n]"
										},
										"url": {
											"raw": "{{baseurl_dc2}}/sor/1/_facade/_stream",
											"host": [
												"{{baseurl_dc2}}"
											],
											"path": [
												"sor",
												"1",
												"_facade",
												"_stream"
											],
											"query": [
												{
													"key": "tag",
													"value": "<string>",
													"disabled": true
												},
												{
													"key": "tag",
													"value": "<string>",
													"disabled": true
												}
											]
										},
										"description": "Facade-equivalent operation for \"_stream\"\n See (@link #updateAll(java.io.InputStream, BooleanParam, Subject)}"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sor/1/_facade/_stream?tag=<string>&tag=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sor",
														"1",
														"_facade",
														"_stream"
													],
													"query": [
														{
															"key": "tag",
															"value": "<string>"
														},
														{
															"key": "tag",
															"value": "<string>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"success\": false,\n \"debug\": {}\n}"
										}
									]
								},
								{
									"name": "Does update all for Facade in a wrong datacenter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost'); ",
													"",
													"(isLocal ? pm.test.skip : pm.test)(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"(isLocal ? pm.test.skip : pm.test)(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.eql('Access denied. Update intended for a facade, but the table would be updated.');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-BV-API-Key",
												"value": "{{api_key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n         {\n            \"table\": \"{{table}}\",\n            \"key\": \"demo1\",\n            \"delta\": \"{\\\"field1\\\":\\\"value1\\\",\\\"field2\\\":\\\"value2\\\",\\\"field3\\\":\\\"value3\\\"}\",\n            \"consistency\": \"STRONG\",\n            \"audit\": {\n              \"comment\": \"Adding demo1 document\"\n            }\n          },\n          {\n            \"table\": \"{{table}}\",\n            \"key\": \"demo2\",\n            \"delta\": \"{\\\"field1\\\":\\\"value1.1\\\",\\\"field5\\\":\\\"value5\\\",\\\"field32\\\":\\\"value33\\\"}\",\n            \"consistency\": \"STRONG\",\n            \"audit\": {\n            \"comment\": \"Update and Add\"\n        }\n      }\n]"
										},
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/_facade/_stream",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"_facade",
												"_stream"
											],
											"query": [
												{
													"key": "tag",
													"value": "<string>",
													"disabled": true
												},
												{
													"key": "tag",
													"value": "<string>",
													"disabled": true
												}
											]
										},
										"description": "Facade-equivalent operation for \"_stream\"\n See (@link #updateAll(java.io.InputStream, BooleanParam, Subject)}"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sor/1/_facade/_stream?tag=<string>&tag=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sor",
														"1",
														"_facade",
														"_stream"
													],
													"query": [
														{
															"key": "tag",
															"value": "<string>"
														},
														{
															"key": "tag",
															"value": "<string>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"success\": false,\n \"debug\": {}\n}"
										}
									]
								},
								{
									"name": "Drops a table",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost'); ",
													"",
													"(isLocal ? pm.test.skip : pm.test)(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"(isLocal ? pm.test.skip : pm.test)(\"Body matches string\", function () {",
													"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-BV-API-Key",
												"type": "text",
												"value": "{{api_key}}"
											}
										],
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"_table",
												"{{table}}"
											],
											"query": [
												{
													"key": "audit",
													"value": "comment:'table_removal'"
												}
											]
										},
										"description": "Returns a SuccessResponse if table is dropped"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														":table"
													],
													"query": [
														{
															"key": "audit",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "table"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"success\": false,\n \"debug\": {}\n}"
										}
									]
								}
							]
						},
						{
							"name": "Does update all for Facade",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-BV-API-Key",
										"value": "{{api_key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\"<object>\""
								},
								"url": {
									"raw": "{{baseurl_dc1}}/sor/1/_facade/_stream?tag=postman&tag=postman1",
									"host": [
										"{{baseurl_dc1}}"
									],
									"path": [
										"sor",
										"1",
										"_facade",
										"_stream"
									],
									"query": [
										{
											"key": "tag",
											"value": "postman"
										},
										{
											"key": "tag",
											"value": "postman1"
										}
									]
								},
								"description": "Facade-equivalent operation for \"_stream\"\n See (@link #updateAll(java.io.InputStream, BooleanParam, Subject)}"
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sor/1/_facade/_stream?tag=<string>&tag=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sor",
												"1",
												"_facade",
												"_stream"
											],
											"query": [
												{
													"key": "tag",
													"value": "<string>"
												},
												{
													"key": "tag",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"success\": false,\n \"debug\": {}\n}"
								}
							]
						}
					]
				}
			]
		}
	]
}