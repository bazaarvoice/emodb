{
	"info": {
		"_postman_id": "6fd1e4d8-21e7-4668-8fb9-bd592c632faa",
		"name": "EmoDB_Tests_databus",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "bus/1 test cases",
			"item": [
				{
					"name": "{subscription}",
					"item": [
						{
							"name": "Unsubscribe",
							"item": [
								{
									"name": "TC: Request without permissions",
									"item": [
										{
											"name": "Subscribe operation.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('subscription', 'postman_'+uuid.v4()+'_test_subscription');",
															"",
															"pm.environment.set(\"ttl\", \"86400\");",
															"pm.environment.set(\"eventTtl\", \"86400\");",
															"pm.environment.set(\"ignoreSuppressedEvents\", false);",
															"pm.environment.set(\"includeDefaultJoinFilter\", false);",
															"pm.environment.set(\"partitioned\", true);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({'success':true}); ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-condition"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "intrinsic(\"~table\":\"{{table}}\")"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}?ttl={{ttl}}&eventTtl={{eventTtl}}&ignoreSuppressedEvents={{ignoreSuppressedEvents}}&includeDefaultJoinFilter={{includeDefaultJoinFilter}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													],
													"query": [
														{
															"key": "ttl",
															"value": "{{ttl}}"
														},
														{
															"key": "eventTtl",
															"value": "{{eventTtl}}"
														},
														{
															"key": "ignoreSuppressedEvents",
															"value": "{{ignoreSuppressedEvents}}"
														},
														{
															"key": "includeDefaultJoinFilter",
															"value": "{{includeDefaultJoinFilter}}"
														}
													]
												},
												"description": "Returns a SuccessResponse."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription?ttl={{ttl}}&eventTtl={{eventTtl}}&ignoreSuppressedEvents={{ignoreSuppressedEvents}}&includeDefaultJoinFilter={{includeDefaultJoinFilter}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"query": [
																{
																	"key": "ttl",
																	"value": "{{ttl}}"
																},
																{
																	"key": "eventTtl",
																	"value": "{{eventTtl}}"
																},
																{
																	"key": "ignoreSuppressedEvents",
																	"value": "{{ignoreSuppressedEvents}}"
																},
																{
																	"key": "includeDefaultJoinFilter",
																	"value": "{{includeDefaultJoinFilter}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": true,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Gets a Subscription.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"name\", \"tableFilter\",\"expiresAt\",\"eventTtl\");",
															"    pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"subscription\"));",
															"    pm.expect(pm.response.json().eventTtl).to.eql(parseInt(pm.environment.get(\"eventTtl\")*1000));",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													]
												},
												"description": "Returns a Subscription."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"expiresAt\": \"2004-07-30T23:17:47.534Z\",\n \"name\": \"nostrud irure et dolor\",\n \"eventTtl\": {\n  \"seconds\": 79588479,\n  \"zero\": false,\n  \"negative\": false,\n  \"units\": [\n   {\n    \"duration\": {\n     \"value\": \"<Circular reference to #/components/schemas/Duration detected>\"\n    },\n    \"durationEstimated\": false,\n    \"timeBased\": false,\n    \"dateBased\": false\n   },\n   {\n    \"duration\": {\n     \"value\": \"<Circular reference to #/components/schemas/Duration detected>\"\n    },\n    \"durationEstimated\": false,\n    \"timeBased\": false,\n    \"dateBased\": false\n   }\n  ],\n  \"nano\": 54804863\n },\n \"tableFilter\": {}\n}"
												}
											]
										},
										{
											"name": "Unsubscribe operation.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const retryRequest = () => {",
															"    return new Promise((resolve, reject) => {",
															"        pm.sendRequest({",
															"            url: `${pm.environment.get(\"baseurl_dc1\")}/bus/1/${pm.environment.get(\"subscription\")}`,",
															"            method: 'DELETE',",
															"            header: {",
															"                \"X-BV-API-Key\": pm.environment.get(\"api_key_no_rights\"),",
															"            }",
															"        }, async (error, response) => {",
															"            if (error) {",
															"                reject(error);",
															"            }",
															"            resolve(response);",
															"        });",
															"    });",
															"};",
															"",
															"pm.test(\"Status code is 403\", asyncTest(async function () {",
															"    if(pm.response.status !== 403) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"        response = await retryRequest();",
															"        return response.code === 403;",
															"        }, \"Error retrying unsubscribe checking status \");",
															"    }",
															"    pm.expect(response).to.have.status(403);",
															"}));",
															"",
															"pm.test(\"Body matches string\", asyncTest(async function () {",
															"    if(pm.response.status !== 403) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.code === 403;",
															"        });",
															"    }",
															"    pm.expect(pm.response.json().reason).to.be.oneOf([`not authorized to update table ${pm.environment.get('table')}`, 'not authorized']);",
															"}));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key_no_rights}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}?partitioned={{partitioned}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														}
													]
												},
												"description": "Returns an Iterator of Subscription."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription?partitioned={{partitioned}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": true,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Gets a Subscription.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"name\", \"tableFilter\",\"expiresAt\",\"eventTtl\");",
															"    pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"subscription\"));",
															"    pm.expect(pm.response.json().eventTtl).to.eql(parseInt(pm.environment.get(\"eventTtl\")*1000));",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													]
												},
												"description": "Returns a Subscription."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"expiresAt\": \"2004-07-30T23:17:47.534Z\",\n \"name\": \"nostrud irure et dolor\",\n \"eventTtl\": {\n  \"seconds\": 79588479,\n  \"zero\": false,\n  \"negative\": false,\n  \"units\": [\n   {\n    \"duration\": {\n     \"value\": \"<Circular reference to #/components/schemas/Duration detected>\"\n    },\n    \"durationEstimated\": false,\n    \"timeBased\": false,\n    \"dateBased\": false\n   },\n   {\n    \"duration\": {\n     \"value\": \"<Circular reference to #/components/schemas/Duration detected>\"\n    },\n    \"durationEstimated\": false,\n    \"timeBased\": false,\n    \"dateBased\": false\n   }\n  ],\n  \"nano\": 54804863\n },\n \"tableFilter\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Request with permissions and partitioned=true",
									"item": [
										{
											"name": "Subscribe operation.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('subscription', 'postman_'+uuid.v4()+'_test_subscription');",
															"",
															"pm.environment.set(\"ttl\", \"86400\");",
															"pm.environment.set(\"eventTtl\", \"86400\");",
															"pm.environment.set(\"ignoreSuppressedEvents\", false);",
															"pm.environment.set(\"includeDefaultJoinFilter\", false);",
															"pm.environment.set(\"partitioned\", true);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({'success':true}); ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-condition"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "intrinsic(\"~table\":\"{{table}}\")"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}?ttl={{ttl}}&eventTtl={{eventTtl}}&ignoreSuppressedEvents={{ignoreSuppressedEvents}}&includeDefaultJoinFilter={{includeDefaultJoinFilter}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													],
													"query": [
														{
															"key": "ttl",
															"value": "{{ttl}}"
														},
														{
															"key": "eventTtl",
															"value": "{{eventTtl}}"
														},
														{
															"key": "ignoreSuppressedEvents",
															"value": "{{ignoreSuppressedEvents}}"
														},
														{
															"key": "includeDefaultJoinFilter",
															"value": "{{includeDefaultJoinFilter}}"
														}
													]
												},
												"description": "Returns a SuccessResponse."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription?ttl={{ttl}}&eventTtl={{eventTtl}}&ignoreSuppressedEvents={{ignoreSuppressedEvents}}&includeDefaultJoinFilter={{includeDefaultJoinFilter}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"query": [
																{
																	"key": "ttl",
																	"value": "{{ttl}}"
																},
																{
																	"key": "eventTtl",
																	"value": "{{eventTtl}}"
																},
																{
																	"key": "ignoreSuppressedEvents",
																	"value": "{{ignoreSuppressedEvents}}"
																},
																{
																	"key": "includeDefaultJoinFilter",
																	"value": "{{includeDefaultJoinFilter}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": true,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Gets a Subscription.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {    ",
															"    pm.expect(pm.response.json()).to.have.keys(\"name\", \"tableFilter\",\"expiresAt\",\"eventTtl\");",
															"    pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"subscription\"));",
															"    pm.expect(pm.response.json().eventTtl).to.eql(parseInt(pm.environment.get(\"eventTtl\")*1000));",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													]
												},
												"description": "Returns a Subscription."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"expiresAt\": \"2004-07-30T23:17:47.534Z\",\n \"name\": \"nostrud irure et dolor\",\n \"eventTtl\": {\n  \"seconds\": 79588479,\n  \"zero\": false,\n  \"negative\": false,\n  \"units\": [\n   {\n    \"duration\": {\n     \"value\": \"<Circular reference to #/components/schemas/Duration detected>\"\n    },\n    \"durationEstimated\": false,\n    \"timeBased\": false,\n    \"dateBased\": false\n   },\n   {\n    \"duration\": {\n     \"value\": \"<Circular reference to #/components/schemas/Duration detected>\"\n    },\n    \"durationEstimated\": false,\n    \"timeBased\": false,\n    \"dateBased\": false\n   }\n  ],\n  \"nano\": 54804863\n },\n \"tableFilter\": {}\n}"
												}
											]
										},
										{
											"name": "Unsubscribe operation.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const retryRequest = () => {",
															"    return new Promise((resolve, reject) => {",
															"        pm.sendRequest({",
															"            url: `${pm.environment.get(\"baseurl_dc1\")}/bus/1/${pm.environment.get(\"subscription\")}?partitioned=true`,",
															"            method: 'DELETE',",
															"            header: {",
															"                \"X-BV-API-Key\": pm.environment.get(\"api_key\"),",
															"            }",
															"        },async (error, response) => {",
															"            if (error) {",
															"                reject(error);",
															"            }",
															"            resolve(response);",
															"        });",
															"    });",
															"};",
															"",
															"pm.test(\"Status code is 200\", asyncTest(async function () {",
															"    if(pm.response.status !== 200) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.code === 200;",
															"        }, \"Error retrying unsubscribe checking status \");",
															"    }",
															"    pm.expect(response).to.have.status(200);",
															"}));",
															"",
															"pm.test(\"Body matches string\", asyncTest(async function () {",
															"    if(pm.response.status !== 200) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.code === 200;",
															"        }, \"Error retrying unsubscribe checking success\");",
															"    }",
															"    pm.expect(response.json().success).eql(true);",
															"}));",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}?partitioned={{partitioned}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														}
													]
												},
												"description": "Returns an Iterator of Subscription."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription?partitioned={{partitioned}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": true,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Gets a Subscription.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"message\", \"subscription\",\"suppressed\");",
															"    pm.expect(pm.response.json().message).to.eql(pm.environment.get(\"subscription\"));",
															"    pm.expect(pm.response.json().subscription).to.eql(pm.environment.get(\"subscription\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													]
												},
												"description": "Returns a Subscription."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"expiresAt\": \"2004-07-30T23:17:47.534Z\",\n \"name\": \"nostrud irure et dolor\",\n \"eventTtl\": {\n  \"seconds\": 79588479,\n  \"zero\": false,\n  \"negative\": false,\n  \"units\": [\n   {\n    \"duration\": {\n     \"value\": \"<Circular reference to #/components/schemas/Duration detected>\"\n    },\n    \"durationEstimated\": false,\n    \"timeBased\": false,\n    \"dateBased\": false\n   },\n   {\n    \"duration\": {\n     \"value\": \"<Circular reference to #/components/schemas/Duration detected>\"\n    },\n    \"durationEstimated\": false,\n    \"timeBased\": false,\n    \"dateBased\": false\n   }\n  ],\n  \"nano\": 54804863\n },\n \"tableFilter\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Request with permissions and partitioned = false",
									"item": [
										{
											"name": "Subscribe operation.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('subscription', 'postman_'+uuid.v4()+'_test_subscription');",
															"",
															"pm.environment.set(\"ttl\", \"86400\");",
															"pm.environment.set(\"eventTtl\", \"86400\");",
															"pm.environment.set(\"ignoreSuppressedEvents\", false);",
															"pm.environment.set(\"includeDefaultJoinFilter\", false);",
															"pm.environment.set(\"partitioned\", false);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({'success':true}); ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-condition"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "intrinsic(\"~table\":\"{{table}}\")"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}?ttl={{ttl}}&eventTtl={{eventTtl}}&ignoreSuppressedEvents={{ignoreSuppressedEvents}}&includeDefaultJoinFilter={{includeDefaultJoinFilter}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													],
													"query": [
														{
															"key": "ttl",
															"value": "{{ttl}}"
														},
														{
															"key": "eventTtl",
															"value": "{{eventTtl}}"
														},
														{
															"key": "ignoreSuppressedEvents",
															"value": "{{ignoreSuppressedEvents}}"
														},
														{
															"key": "includeDefaultJoinFilter",
															"value": "{{includeDefaultJoinFilter}}"
														}
													]
												},
												"description": "Returns a SuccessResponse."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription?ttl={{ttl}}&eventTtl={{eventTtl}}&ignoreSuppressedEvents={{ignoreSuppressedEvents}}&includeDefaultJoinFilter={{includeDefaultJoinFilter}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"query": [
																{
																	"key": "ttl",
																	"value": "{{ttl}}"
																},
																{
																	"key": "eventTtl",
																	"value": "{{eventTtl}}"
																},
																{
																	"key": "ignoreSuppressedEvents",
																	"value": "{{ignoreSuppressedEvents}}"
																},
																{
																	"key": "includeDefaultJoinFilter",
																	"value": "{{includeDefaultJoinFilter}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": true,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Gets a Subscription.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"name\", \"tableFilter\",\"expiresAt\",\"eventTtl\");",
															"    pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"subscription\"));",
															"    pm.expect(pm.response.json().eventTtl).to.eql(parseInt(pm.environment.get(\"eventTtl\")*1000));",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													]
												},
												"description": "Returns a Subscription."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"expiresAt\": \"2004-07-30T23:17:47.534Z\",\n \"name\": \"nostrud irure et dolor\",\n \"eventTtl\": {\n  \"seconds\": 79588479,\n  \"zero\": false,\n  \"negative\": false,\n  \"units\": [\n   {\n    \"duration\": {\n     \"value\": \"<Circular reference to #/components/schemas/Duration detected>\"\n    },\n    \"durationEstimated\": false,\n    \"timeBased\": false,\n    \"dateBased\": false\n   },\n   {\n    \"duration\": {\n     \"value\": \"<Circular reference to #/components/schemas/Duration detected>\"\n    },\n    \"durationEstimated\": false,\n    \"timeBased\": false,\n    \"dateBased\": false\n   }\n  ],\n  \"nano\": 54804863\n },\n \"tableFilter\": {}\n}"
												}
											]
										},
										{
											"name": "Unsubscribe operation.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const retryRequest = () => {",
															"    return new Promise((resolve, reject) => {",
															"        pm.sendRequest({",
															"            url: `${pm.environment.get(\"baseurl_dc1\")}/bus/1/${pm.environment.get(\"subscription\")}`,",
															"            method: 'DELETE',",
															"            header: {",
															"                \"X-BV-API-Key\": pm.environment.get(\"api_key\"),",
															"            }",
															"        }, async (error, response) => {",
															"            if (error) {",
															"                reject(error);",
															"            }",
															"            resolve(response);",
															"        });",
															"    });",
															"};",
															"",
															"pm.test(\"Status code is 200\", asyncTest(async function () {",
															"    if(pm.response.status !== 200) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.code === 200;",
															"        }, \"Error retrying unsubscribe checking status \");",
															"    }",
															"    pm.expect(response).to.have.status(200);",
															"}));",
															"",
															"pm.test(\"Body matches string\", asyncTest(async function () {",
															"    if(pm.response.status !== 200) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.code === 200;",
															"        }, \"Error retrying unsubscribe checking success\");",
															"    }",
															"    pm.expect(response.json().success).eql(true);",
															"}));",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}?partitioned={{partitioned}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														}
													]
												},
												"description": "Returns an Iterator of Subscription."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription?partitioned={{partitioned}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": true,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Gets a Subscription.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"message\", \"subscription\",\"suppressed\");",
															"    pm.expect(pm.response.json().message).to.eql(pm.environment.get(\"subscription\"));",
															"    pm.expect(pm.response.json().subscription).to.eql(pm.environment.get(\"subscription\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													]
												},
												"description": "Returns a Subscription."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"expiresAt\": \"2004-07-30T23:17:47.534Z\",\n \"name\": \"nostrud irure et dolor\",\n \"eventTtl\": {\n  \"seconds\": 79588479,\n  \"zero\": false,\n  \"negative\": false,\n  \"units\": [\n   {\n    \"duration\": {\n     \"value\": \"<Circular reference to #/components/schemas/Duration detected>\"\n    },\n    \"durationEstimated\": false,\n    \"timeBased\": false,\n    \"dateBased\": false\n   },\n   {\n    \"duration\": {\n     \"value\": \"<Circular reference to #/components/schemas/Duration detected>\"\n    },\n    \"durationEstimated\": false,\n    \"timeBased\": false,\n    \"dateBased\": false\n   }\n  ],\n  \"nano\": 54804863\n },\n \"tableFilter\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "Unsubscribe operation.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"partitioned\", true);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": {{subscription}}    \n}"
										},
										"url": {
											"raw": "{{baseurl_dc1}}/bus/1/:subscription?partitioned={{partitioned}}",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"bus",
												"1",
												":subscription"
											],
											"query": [
												{
													"key": "partitioned",
													"value": "{{partitioned}}"
												}
											],
											"variable": [
												{
													"key": "subscription",
													"value": "{{subscription}}"
												}
											]
										},
										"description": "Returns an Iterator of Subscription."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/bus/1/:subscription?partitioned={{partitioned}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"bus",
														"1",
														":subscription"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														}
													],
													"variable": [
														{
															"key": "subscription"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"success\": true,\n \"debug\": {}\n}"
										}
									]
								}
							]
						},
						{
							"name": "Get subscription",
							"item": [
								{
									"name": "TC: Request existing subscription",
									"item": [
										{
											"name": "Subscribe operation.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('subscription', 'postman_'+uuid.v4()+'_test_subscription');",
															"",
															"pm.environment.set(\"ttl\", \"86400\");",
															"pm.environment.set(\"eventTtl\", \"86400\");",
															"pm.environment.set(\"ignoreSuppressedEvents\", false);",
															"pm.environment.set(\"includeDefaultJoinFilter\", false);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json().success).eql(true);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-condition"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "intrinsic(\"~table\":\"{{table}}\")"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}?ttl={{ttl}}&eventTtl={{eventTtl}}&ignoreSuppressedEvents={{ignoreSuppressedEvents}}&includeDefaultJoinFilter={{includeDefaultJoinFilter}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													],
													"query": [
														{
															"key": "ttl",
															"value": "{{ttl}}"
														},
														{
															"key": "eventTtl",
															"value": "{{eventTtl}}"
														},
														{
															"key": "ignoreSuppressedEvents",
															"value": "{{ignoreSuppressedEvents}}"
														},
														{
															"key": "includeDefaultJoinFilter",
															"value": "{{includeDefaultJoinFilter}}"
														}
													]
												},
												"description": "Returns a SuccessResponse."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription?ttl={{ttl}}&eventTtl={{eventTtl}}&ignoreSuppressedEvents={{ignoreSuppressedEvents}}&includeDefaultJoinFilter={{includeDefaultJoinFilter}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"query": [
																{
																	"key": "ttl",
																	"value": "{{ttl}}"
																},
																{
																	"key": "eventTtl",
																	"value": "{{eventTtl}}"
																},
																{
																	"key": "ignoreSuppressedEvents",
																	"value": "{{ignoreSuppressedEvents}}"
																},
																{
																	"key": "includeDefaultJoinFilter",
																	"value": "{{includeDefaultJoinFilter}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Gets a Subscription.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"name\", \"tableFilter\",\"expiresAt\",\"eventTtl\");",
															"    pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"subscription\"));",
															"    pm.expect(pm.response.json().eventTtl).to.eql(parseInt(pm.environment.get(\"eventTtl\")*1000));",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													]
												},
												"description": "Returns a Subscription."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"expiresAt\": \"2004-07-30T23:17:47.534Z\",\n \"name\": \"nostrud irure et dolor\",\n \"eventTtl\": {\n  \"seconds\": 79588479,\n  \"zero\": false,\n  \"negative\": false,\n  \"units\": [\n   {\n    \"duration\": {\n     \"value\": \"<Circular reference to #/components/schemas/Duration detected>\"\n    },\n    \"durationEstimated\": false,\n    \"timeBased\": false,\n    \"dateBased\": false\n   },\n   {\n    \"duration\": {\n     \"value\": \"<Circular reference to #/components/schemas/Duration detected>\"\n    },\n    \"durationEstimated\": false,\n    \"timeBased\": false,\n    \"dateBased\": false\n   }\n  ],\n  \"nano\": 54804863\n },\n \"tableFilter\": {}\n}"
												}
											]
										},
										{
											"name": "Unsubscribe operation.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
															"const retryRequest = eval(retryRequestCall.retryRequest);",
															"",
															"var response = pm.response;",
															"pm.test(\"Status code is 200\", asyncTest(async function () {",
															"    if(response.code !== 200) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.code === 200;",
															"        }, \"Error retrying unsubscribe checking status \");",
															"    }",
															"    pm.expect(response.code).to.be.eql(200);",
															"}));",
															"",
															"pm.test(\"Body matches string\", asyncTest(async function () {",
															"    if(response.code !== 200) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.code === 200;",
															"        }, \"Error retrying unsubscribe checking success\");",
															"    }",
															"    pm.expect(response.json().success).to.be.eql(true);",
															"}));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", false);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}?partitioned={{partitioned}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														}
													]
												},
												"description": "Returns an Iterator of Subscription."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription?partitioned={{partitioned}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Gets a Subscription after unsubscribing.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"message\", \"subscription\",\"suppressed\");",
															"    pm.expect(pm.response.json().message).to.eql(pm.environment.get(\"subscription\"));",
															"    pm.expect(pm.response.json().subscription).to.eql(pm.environment.get(\"subscription\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													]
												},
												"description": "Returns a Subscription."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"expiresAt\": \"2004-07-30T23:17:47.534Z\",\n \"name\": \"nostrud irure et dolor\",\n \"eventTtl\": {\n  \"seconds\": 79588479,\n  \"zero\": false,\n  \"negative\": false,\n  \"units\": [\n   {\n    \"duration\": {\n     \"value\": \"<Circular reference to #/components/schemas/Duration detected>\"\n    },\n    \"durationEstimated\": false,\n    \"timeBased\": false,\n    \"dateBased\": false\n   },\n   {\n    \"duration\": {\n     \"value\": \"<Circular reference to #/components/schemas/Duration detected>\"\n    },\n    \"durationEstimated\": false,\n    \"timeBased\": false,\n    \"dateBased\": false\n   }\n  ],\n  \"nano\": 54804863\n },\n \"tableFilter\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Request without permission",
									"item": [
										{
											"name": "Subscribe operation.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('subscription', 'postman_'+uuid.v4()+'_test_subscription');",
															"",
															"pm.environment.set(\"ttl\", \"86400\");",
															"pm.environment.set(\"eventTtl\", \"86400\");",
															"pm.environment.set(\"ignoreSuppressedEvents\", false);",
															"pm.environment.set(\"includeDefaultJoinFilter\", false);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json().success).eql(true);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-condition"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "intrinsic(\"~table\":\"{{table}}\")"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}?ttl={{ttl}}&eventTtl={{eventTtl}}&ignoreSuppressedEvents={{ignoreSuppressedEvents}}&includeDefaultJoinFilter={{includeDefaultJoinFilter}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													],
													"query": [
														{
															"key": "ttl",
															"value": "{{ttl}}"
														},
														{
															"key": "eventTtl",
															"value": "{{eventTtl}}"
														},
														{
															"key": "ignoreSuppressedEvents",
															"value": "{{ignoreSuppressedEvents}}"
														},
														{
															"key": "includeDefaultJoinFilter",
															"value": "{{includeDefaultJoinFilter}}"
														}
													]
												},
												"description": "Returns a SuccessResponse."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription?ttl={{ttl}}&eventTtl={{eventTtl}}&ignoreSuppressedEvents={{ignoreSuppressedEvents}}&includeDefaultJoinFilter={{includeDefaultJoinFilter}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"query": [
																{
																	"key": "ttl",
																	"value": "{{ttl}}"
																},
																{
																	"key": "eventTtl",
																	"value": "{{eventTtl}}"
																},
																{
																	"key": "ignoreSuppressedEvents",
																	"value": "{{ignoreSuppressedEvents}}"
																},
																{
																	"key": "includeDefaultJoinFilter",
																	"value": "{{includeDefaultJoinFilter}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Gets a Subscription.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.text()).to.be.oneOf(['{\"reason\":\"not authorized\"}',`{\"reason\":\"Not subscriber\",\"subscription\":\"${pm.environment.get('subscription')}\"}`]);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key_no_rights}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													]
												},
												"description": "Returns a Subscription."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"variable": [
																{
																	"key": "subscription",
																	"value": ""
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"expiresAt\": \"2004-07-30T23:17:47.534Z\",\n \"name\": \"nostrud irure et dolor\",\n \"eventTtl\": {\n  \"seconds\": 79588479,\n  \"zero\": false,\n  \"negative\": false,\n  \"units\": [\n   {\n    \"duration\": {\n     \"value\": \"<Circular reference to #/components/schemas/Duration detected>\"\n    },\n    \"durationEstimated\": false,\n    \"timeBased\": false,\n    \"dateBased\": false\n   },\n   {\n    \"duration\": {\n     \"value\": \"<Circular reference to #/components/schemas/Duration detected>\"\n    },\n    \"durationEstimated\": false,\n    \"timeBased\": false,\n    \"dateBased\": false\n   }\n  ],\n  \"nano\": 54804863\n },\n \"tableFilter\": {}\n}"
												}
											]
										},
										{
											"name": "Unsubscribe operation.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
															"const retryRequest = eval(retryRequestCall.retryRequest);",
															"",
															"var response = pm.response;",
															"pm.test(\"Status code is 200\", asyncTest(async function () {",
															"    if(response.code !== 200) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.code === 200;",
															"        }, \"Error retrying unsubscribe checking status \");",
															"    }",
															"    pm.expect(response.code).to.be.eql(200);",
															"}));",
															"",
															"pm.test(\"Body matches string\", asyncTest(async function () {",
															"    if(response.code !== 200) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.code === 200;",
															"        }, \"Error retrying unsubscribe checking success\");",
															"    }",
															"    pm.expect(response.json().success).to.be.eql(true);",
															"}));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", true);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}?partitioned={{partitioned}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														}
													]
												},
												"description": "Returns an Iterator of Subscription."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription?partitioned={{partitioned}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Gets a Subscription after unsubscribing.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"message\", \"subscription\",\"suppressed\");",
															"    pm.expect(pm.response.json().message).to.eql(pm.environment.get(\"subscription\"));",
															"    pm.expect(pm.response.json().subscription).to.eql(pm.environment.get(\"subscription\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													]
												},
												"description": "Returns a Subscription."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"expiresAt\": \"2004-07-30T23:17:47.534Z\",\n \"name\": \"nostrud irure et dolor\",\n \"eventTtl\": {\n  \"seconds\": 79588479,\n  \"zero\": false,\n  \"negative\": false,\n  \"units\": [\n   {\n    \"duration\": {\n     \"value\": \"<Circular reference to #/components/schemas/Duration detected>\"\n    },\n    \"durationEstimated\": false,\n    \"timeBased\": false,\n    \"dateBased\": false\n   },\n   {\n    \"duration\": {\n     \"value\": \"<Circular reference to #/components/schemas/Duration detected>\"\n    },\n    \"durationEstimated\": false,\n    \"timeBased\": false,\n    \"dateBased\": false\n   }\n  ],\n  \"nano\": 54804863\n },\n \"tableFilter\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Request not existing subscription",
									"item": [
										{
											"name": "Subscribe operation.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('subscription', 'postman_'+uuid.v4()+'_test_subscription');",
															"",
															"pm.environment.set(\"ttl\", \"86400\");",
															"pm.environment.set(\"eventTtl\", \"86400\");",
															"pm.environment.set(\"ignoreSuppressedEvents\", false);",
															"pm.environment.set(\"includeDefaultJoinFilter\", false);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json().success).eql(true);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-condition"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "intrinsic(\"~table\":\"{{table}}\")"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}?ttl={{ttl}}&eventTtl={{eventTtl}}&ignoreSuppressedEvents={{ignoreSuppressedEvents}}&includeDefaultJoinFilter={{includeDefaultJoinFilter}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													],
													"query": [
														{
															"key": "ttl",
															"value": "{{ttl}}"
														},
														{
															"key": "eventTtl",
															"value": "{{eventTtl}}"
														},
														{
															"key": "ignoreSuppressedEvents",
															"value": "{{ignoreSuppressedEvents}}"
														},
														{
															"key": "includeDefaultJoinFilter",
															"value": "{{includeDefaultJoinFilter}}"
														}
													]
												},
												"description": "Returns a SuccessResponse."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription?ttl={{ttl}}&eventTtl={{eventTtl}}&ignoreSuppressedEvents={{ignoreSuppressedEvents}}&includeDefaultJoinFilter={{includeDefaultJoinFilter}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"query": [
																{
																	"key": "ttl",
																	"value": "{{ttl}}"
																},
																{
																	"key": "eventTtl",
																	"value": "{{eventTtl}}"
																},
																{
																	"key": "ignoreSuppressedEvents",
																	"value": "{{ignoreSuppressedEvents}}"
																},
																{
																	"key": "includeDefaultJoinFilter",
																	"value": "{{includeDefaultJoinFilter}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Gets a Subscription.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"message\",\"subscription\",\"suppressed\");",
															"    pm.expect(pm.response.json().message).to.eql(\"not_existing_subscription\");",
															"    pm.expect(pm.response.json().subscription).to.eql(\"not_existing_subscription\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/not_existing_subscription",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"not_existing_subscription"
													]
												},
												"description": "Returns a Subscription."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"expiresAt\": \"2004-07-30T23:17:47.534Z\",\n \"name\": \"nostrud irure et dolor\",\n \"eventTtl\": {\n  \"seconds\": 79588479,\n  \"zero\": false,\n  \"negative\": false,\n  \"units\": [\n   {\n    \"duration\": {\n     \"value\": \"<Circular reference to #/components/schemas/Duration detected>\"\n    },\n    \"durationEstimated\": false,\n    \"timeBased\": false,\n    \"dateBased\": false\n   },\n   {\n    \"duration\": {\n     \"value\": \"<Circular reference to #/components/schemas/Duration detected>\"\n    },\n    \"durationEstimated\": false,\n    \"timeBased\": false,\n    \"dateBased\": false\n   }\n  ],\n  \"nano\": 54804863\n },\n \"tableFilter\": {}\n}"
												}
											]
										},
										{
											"name": "Unsubscribe operation.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
															"const retryRequest = eval(retryRequestCall.retryRequest);",
															"",
															"var response = pm.response;",
															"pm.test(\"Status code is 200\", asyncTest(async function () {",
															"    if(response.code !== 200) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.code === 200;",
															"        }, \"Error retrying unsubscribe checking status\");",
															"    }",
															"    pm.expect(response.code).to.be.eql(200);",
															"}));",
															"",
															"pm.test(\"Body matches string\", asyncTest(async function () {",
															"    if(response.code !== 200) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.code === 200;",
															"        }, \"Error retrying unsubscribe checking success\");",
															"    }",
															"    pm.expect(response.json().success).to.be.eql(true);",
															"}));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", true);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}?partitioned={{partitioned}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														}
													]
												},
												"description": "Returns an Iterator of Subscription."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription?partitioned={{partitioned}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Gets a Subscription.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"message\", \"subscription\",\"suppressed\");",
															"    pm.expect(pm.response.json().message).to.eql(pm.environment.get(\"subscription\"));",
															"    pm.expect(pm.response.json().subscription).to.eql(pm.environment.get(\"subscription\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													]
												},
												"description": "Returns a Subscription."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"expiresAt\": \"2004-07-30T23:17:47.534Z\",\n \"name\": \"nostrud irure et dolor\",\n \"eventTtl\": {\n  \"seconds\": 79588479,\n  \"zero\": false,\n  \"negative\": false,\n  \"units\": [\n   {\n    \"duration\": {\n     \"value\": \"<Circular reference to #/components/schemas/Duration detected>\"\n    },\n    \"durationEstimated\": false,\n    \"timeBased\": false,\n    \"dateBased\": false\n   },\n   {\n    \"duration\": {\n     \"value\": \"<Circular reference to #/components/schemas/Duration detected>\"\n    },\n    \"durationEstimated\": false,\n    \"timeBased\": false,\n    \"dateBased\": false\n   }\n  ],\n  \"nano\": 54804863\n },\n \"tableFilter\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "Gets a Subscription.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-BV-API-Key",
												"value": "{{api_key}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"bus",
												"1",
												"{{subscription}}"
											]
										},
										"description": "Returns a Subscription."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/bus/1/:subscription",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"bus",
														"1",
														":subscription"
													],
													"variable": [
														{
															"key": "subscription"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"expiresAt\": \"2004-07-30T23:17:47.534Z\",\n \"name\": \"nostrud irure et dolor\",\n \"eventTtl\": {\n  \"seconds\": 79588479,\n  \"zero\": false,\n  \"negative\": false,\n  \"units\": [\n   {\n    \"duration\": {\n     \"value\": \"<Circular reference to #/components/schemas/Duration detected>\"\n    },\n    \"durationEstimated\": false,\n    \"timeBased\": false,\n    \"dateBased\": false\n   },\n   {\n    \"duration\": {\n     \"value\": \"<Circular reference to #/components/schemas/Duration detected>\"\n    },\n    \"durationEstimated\": false,\n    \"timeBased\": false,\n    \"dateBased\": false\n   }\n  ],\n  \"nano\": 54804863\n },\n \"tableFilter\": {}\n}"
										}
									]
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const retryRequest = (callback) => {",
											"    return new Promise((resolve, reject) => {",
											"        pm.sendRequest({",
											"            url: `${pm.environment.get(\"baseurl_dc1\")}/bus/1/${pm.environment.get(\"subscription\")}?partitioned=${pm.environment.get(\"partitioned\")}`,",
											"            method: 'DELETE',",
											"            header: {",
											"                \"X-BV-API-Key\": pm.environment.get(\"api_key\"),",
											"            }",
											"        },async (error, response) => {",
											"            if (error) {",
											"                reject(error);",
											"            }",
											"            resolve(response);",
											"            callback();",
											"        });        ",
											"    });",
											"};",
											"",
											"const retryRequestCall = {",
											"    retryRequest: retryRequest.toString()",
											"};",
											"",
											"pm.globals.set(\"retryRequestCall\", JSON.stringify(retryRequestCall));"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Get claimcount",
							"item": [
								{
									"name": "TC: Request with access to claimcount, with some claimed events and partitioned = false",
									"item": [
										{
											"name": "Creates a table",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('table', 'postman_'+uuid.v4());",
															"",
															"pm.environment.set(\"options\", \"placement:'ugc_global:ugc'\");",
															"pm.environment.set(\"audit\", \"comment:'initial+provisioning'\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Successful PUT request\", function () {    ",
															"    pm.expect(pm.response.json().success).eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options={{options}}&audit={{audit}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "{{options}}"
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is created"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options={{options}}&audit={{audit}}",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "options",
																	"value": "{{options}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Subscribe operation.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('subscription', 'postman_'+uuid.v4()+'_test_subscription');",
															"",
															"pm.environment.set(\"ttl\", \"86400\");",
															"pm.environment.set(\"eventTtl\", \"86400\");",
															"pm.environment.set(\"ignoreSuppressedEvents\", false);",
															"pm.environment.set(\"includeDefaultJoinFilter\", false);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Successful PUT request\", function () {",
															"    pm.expect(pm.response.json().success).eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-condition"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "intrinsic(\"~table\":\"{{table}}\")"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}?ttl={{ttl}}&eventTtl={{eventTtl}}&ignoreSuppressedEvents={{ignoreSuppressedEvents}}&includeDefaultJoinFilter={{includeDefaultJoinFilter}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													],
													"query": [
														{
															"key": "ttl",
															"value": "{{ttl}}"
														},
														{
															"key": "eventTtl",
															"value": "{{eventTtl}}"
														},
														{
															"key": "ignoreSuppressedEvents",
															"value": "{{ignoreSuppressedEvents}}"
														},
														{
															"key": "includeDefaultJoinFilter",
															"value": "{{includeDefaultJoinFilter}}"
														}
													]
												},
												"description": "Returns a SuccessResponse."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription?ttl={{ttl}}&eventTtl={{eventTtl}}&ignoreSuppressedEvents={{ignoreSuppressedEvents}}&includeDefaultJoinFilter={{includeDefaultJoinFilter}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"query": [
																{
																	"key": "ttl",
																	"value": "{{ttl}}"
																},
																{
																	"key": "eventTtl",
																	"value": "{{eventTtl}}"
																},
																{
																	"key": "ignoreSuppressedEvents",
																	"value": "{{ignoreSuppressedEvents}}"
																},
																{
																	"key": "includeDefaultJoinFilter",
																	"value": "{{includeDefaultJoinFilter}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);    ",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Gets the event count.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
															"const retryRequest = eval(retryRequestCall.retryRequest);",
															"",
															"",
															"var response = pm.response;",
															"pm.test(\"Status code is 200\", asyncTest(async function () {",
															"    if (response.status !== 200) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.code === 200;",
															"        });",
															"    }",
															"    pm.response.to.have.status(200);",
															"}));",
															"",
															"pm.test(\"Successful GET request\", asyncTest(async function () {",
															"    if (response.status !== 200) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.json() === 1;",
															"        });",
															"    }",
															"    pm.expect(response.json()).to.be.eql(1);",
															"}));",
															" "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", false);",
															"pm.environment.set(\"limit\", \"5\");",
															"",
															"const url = `${pm.environment.get(\"baseurl_dc1\")}/bus/1/${pm.environment.get(\"subscription\")}/size?partitioned=${pm.environment.get(\"partitioned\")}&limit=${pm.environment.get(\"limit\")}`;",
															"pm.environment.set(\"url\", url);",
															"pm.environment.set(\"method\", \"GET\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}/size?partitioned={{partitioned}}&limit={{limit}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}",
														"size"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														},
														{
															"key": "limit",
															"value": "{{limit}}"
														}
													]
												},
												"description": "Returns a long."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription/size?partitioned={{partitioned}}&limit={{limit}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription",
																"size"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																},
																{
																	"key": "limit",
																	"value": "{{limit}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Gets the claim count.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.to.have.body('0'));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", false);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}/claimcount?partitioned={{partitioned}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}",
														"claimcount"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														}
													]
												},
												"description": "Returns a long."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription/claimcount?partitioned={{partitioned}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription",
																"claimcount"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Poll operation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
															"const retryRequest = eval(retryRequestCall.retryRequest);",
															"",
															"var response = pm.response;",
															"pm.test(\"Status code is 200\", function () {",
															"    response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Successful GET request\", asyncTest(async function () {",
															"    if(response.json().length === 0) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.json().length === 1;",
															"        }, \"Retrying request\");",
															"    }",
															"",
															"    pm.expect(response.json().length).eql(1);",
															"",
															"    pm.expect(response.json()[0]).to.have.keys(\"eventKey\", \"content\");",
															"    pm.expect(response.json()[0].content).to.have.keys(\"test_delta\",\"test_table\",\"customer\",\"~id\",\"~table\",\"~version\",\"~signature\",\"~deleted\",\"~firstUpdateAt\",\"~lastUpdateAt\",\"~lastMutateAt\");",
															"}));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", \"false\");",
															"pm.environment.set(\"ttl\", \"30\");",
															"pm.environment.set(\"limit\", \"5\");",
															"pm.environment.set(\"ignoreLongPoll\", \"false\");",
															"pm.environment.set(\"includeTags\", \"false\");",
															"",
															"const url = `${pm.environment.get(\"baseurl_dc1\")}/bus/1/${pm.environment.get(\"subscription\")}/poll?partitioned=${pm.environment.get(\"partitioned\")}&ttl=${pm.environment.get(\"ttl\")}&limit=${pm.environment.get(\"limit\")}&ignoreLongPoll=${pm.environment.get(\"ignoreLongPoll\")}&includeTags=${pm.environment.get(\"includeTags\")}`;",
															"pm.environment.set(\"url\", url);",
															"pm.environment.set(\"method\", \"GET\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}/poll?partitioned={{partitioned}}&ttl={{ttl}}&limit={{limit}}&ignoreLongPoll={{ignoreLongPoll}}&includeTags={{includeTags}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}",
														"poll"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														},
														{
															"key": "ttl",
															"value": "{{ttl}}"
														},
														{
															"key": "limit",
															"value": "{{limit}}"
														},
														{
															"key": "ignoreLongPoll",
															"value": "{{ignoreLongPoll}}"
														},
														{
															"key": "includeTags",
															"value": "{{includeTags}}"
														}
													]
												},
												"description": "Returns a Response."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription/poll?partitioned={{partitioned}}&ttl={{ttl}}&limit={{limit}}&ignoreLongPoll={{ignoreLongPoll}}&includeTags={{includeTags}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription",
																"poll"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																},
																{
																	"key": "ttl",
																	"value": "{{ttl}}"
																},
																{
																	"key": "limit",
																	"value": "{{limit}}"
																},
																{
																	"key": "ignoreLongPoll",
																	"value": "{{ignoreLongPoll}}"
																},
																{
																	"key": "includeTags",
																	"value": "{{includeTags}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Gets the claim count.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
															"const retryRequest = eval(retryRequestCall.retryRequest);",
															"",
															"var response = pm.response;",
															"pm.test(\"Status code is 200\", function () {",
															"    response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Successful GET request\", asyncTest(async function () {",
															"    if(response.status !== 200) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.json() >= 1;",
															"        }, \"Retrying request\");",
															"    }",
															"    pm.expect(response.json()).to.be.eql(1);",
															"}));",
															" "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", false);",
															"",
															"const url = `${pm.environment.get(\"baseurl_dc1\")}/bus/1/${pm.environment.get(\"subscription\")}/claimcount?partitioned=${pm.environment.get(\"partitioned\")}`;",
															"pm.environment.set(\"url\", url);",
															"pm.environment.set(\"method\", \"GET\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}/claimcount?partitioned={{partitioned}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}",
														"claimcount"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														}
													]
												},
												"description": "Returns a long."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription/claimcount?partitioned={{partitioned}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription",
																"claimcount"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Unsubscribe operation.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
															"const retryRequest = eval(retryRequestCall.retryRequest);",
															"",
															"var response = pm.response;",
															"pm.test(\"Status code is 200\", asyncTest(async function () {",
															"    if(response.code !== 200) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.code === 200;",
															"        }, \"Error retrying unsubscribe checking status \");",
															"    }",
															"    pm.expect(response.code).to.be.eql(200);",
															"}));",
															"",
															"pm.test(\"Successful DELETE request\", asyncTest(async function () {    ",
															"    if(response.code !== 200) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.code === 200;",
															"        }, \"Error retrying unsubscribe checking success\");",
															"    }",
															"    pm.expect(response.json().success).to.be.eql(true);",
															"}));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", true);",
															"",
															"const url = `${pm.environment.get(\"baseurl_dc1\")}/bus/1/${pm.environment.get(\"subscription\")}?partitioned=${pm.environment.get(\"partitioned\")}`;",
															"pm.environment.set(\"url\", url);",
															"pm.environment.set(\"method\", \"DELETE\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}?partitioned={{partitioned}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														}
													]
												},
												"description": "Returns an Iterator of Subscription."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription?partitioned={{partitioned}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Drops a table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Successful DELETE request\", function () {",
															"    pm.expect(pm.response.json().success).eql(true);    ",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"audit\", \"comment:'remove+table'\");",
															"pm.globals.clear();"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit={{audit}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "{{audit}}"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is dropped"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/_table/:table?audit={{audit}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "{{audit}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "TC: Request with access to claimcount, with some claimed events and partitioned = true",
									"item": [
										{
											"name": "Creates a table",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('table', 'postman_'+uuid.v4());",
															"",
															"pm.environment.set(\"options\", \"placement:'ugc_global:ugc'\");",
															"pm.environment.set(\"audit\", \"comment:'initial+provisioning'\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json().success).eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options={{options}}&audit={{audit}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "{{options}}"
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is created"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options={{options}}&audit={{audit}}",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "options",
																	"value": "{{options}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Subscribe operation.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('subscription', 'postman_'+uuid.v4()+'_test_subscription');",
															"",
															"pm.environment.set(\"ttl\", \"86400\");",
															"pm.environment.set(\"eventTtl\", \"86400\");",
															"pm.environment.set(\"ignoreSuppressedEvents\", false);",
															"pm.environment.set(\"includeDefaultJoinFilter\", false);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json().success).eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-condition"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "intrinsic(\"~table\":\"{{table}}\")"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}?ttl={{ttl}}&eventTtl={{eventTtl}}&ignoreSuppressedEvents={{ignoreSuppressedEvents}}&includeDefaultJoinFilter={{includeDefaultJoinFilter}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													],
													"query": [
														{
															"key": "ttl",
															"value": "{{ttl}}"
														},
														{
															"key": "eventTtl",
															"value": "{{eventTtl}}"
														},
														{
															"key": "ignoreSuppressedEvents",
															"value": "{{ignoreSuppressedEvents}}"
														},
														{
															"key": "includeDefaultJoinFilter",
															"value": "{{includeDefaultJoinFilter}}"
														}
													]
												},
												"description": "Returns a SuccessResponse."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription?ttl={{ttl}}&eventTtl={{eventTtl}}&ignoreSuppressedEvents={{ignoreSuppressedEvents}}&includeDefaultJoinFilter={{includeDefaultJoinFilter}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"query": [
																{
																	"key": "ttl",
																	"value": "{{ttl}}"
																},
																{
																	"key": "eventTtl",
																	"value": "{{eventTtl}}"
																},
																{
																	"key": "ignoreSuppressedEvents",
																	"value": "{{ignoreSuppressedEvents}}"
																},
																{
																	"key": "includeDefaultJoinFilter",
																	"value": "{{includeDefaultJoinFilter}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Gets the event count.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
															"const retryRequest = eval(retryRequestCall.retryRequest);",
															"",
															"var response = pm.response;",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", asyncTest(async function () {",
															"    if(response.json() === 0) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.json() > 0;",
															"        });",
															"    }",
															"    pm.expect(response.json()).to.be.above(0);",
															"}));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", true);",
															"pm.environment.set(\"limit\", \"5\");",
															"",
															"const url = `${pm.environment.get(\"baseurl_dc1\")}/bus/1/${pm.environment.get(\"subscription\")}/size?partitioned=${pm.environment.get(\"partitioned\")}&limit=${pm.environment.get(\"limit\")}`;",
															"pm.environment.set(\"url\", url);",
															"pm.environment.set(\"method\", \"GET\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}/size?partitioned={{partitioned}}&limit={{limit}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}",
														"size"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														},
														{
															"key": "limit",
															"value": "{{limit}}"
														}
													]
												},
												"description": "Returns a long."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription/size?partitioned={{partitioned}}&limit={{limit}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription",
																"size"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																},
																{
																	"key": "limit",
																	"value": "{{limit}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Gets the claim count.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.to.have.body('0'));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", true);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}/claimcount?partitioned={{partitioned}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}",
														"claimcount"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														}
													]
												},
												"description": "Returns a long."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription/claimcount?partitioned={{partitioned}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription",
																"claimcount"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Poll operation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
															"const retryRequest = eval(retryRequestCall.retryRequest);",
															"",
															"var response = pm.response;",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", asyncTest(async function () {",
															"    if(response.json().length < 1) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.json().length > 0;",
															"        }, \"Retrying request\");",
															"    }",
															"    const jsonData = response.json();",
															"    pm.expect(jsonData.length).to.eql(1);",
															"",
															"    pm.expect(jsonData[0]).to.have.keys(\"eventKey\", \"content\");",
															"    pm.expect(jsonData[0].content).to.have.keys(\"test_delta\",\"test_table\",\"customer\",\"~id\",\"~table\",\"~version\",\"~signature\",\"~deleted\",\"~firstUpdateAt\",\"~lastUpdateAt\",\"~lastMutateAt\");",
															"}));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", \"false\");",
															"pm.environment.set(\"ttl\", \"30\");",
															"pm.environment.set(\"limit\", \"5\");",
															"pm.environment.set(\"ignoreLongPoll\", \"false\");",
															"pm.environment.set(\"includeTags\", \"false\");",
															"",
															"const url = `${pm.environment.get(\"baseurl_dc1\")}/bus/1/${pm.environment.get(\"subscription\")}/poll?partitioned=${pm.environment.get(\"partitioned\")}&ttl=${pm.environment.get(\"ttl\")}&limit=${pm.environment.get(\"limit\")}&ignoreLongPoll=${pm.environment.get(\"ignoreLongPoll\")}&includeTags=${pm.environment.get(\"includeTags\")}`;",
															"pm.environment.set(\"url\", url);",
															"pm.environment.set(\"method\", \"GET\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}/poll?partitioned={{partitioned}}&ttl={{ttl}}&limit={{limit}}&ignoreLongPoll={{ignoreLongPoll}}&includeTags={{includeTags}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}",
														"poll"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														},
														{
															"key": "ttl",
															"value": "{{ttl}}"
														},
														{
															"key": "limit",
															"value": "{{limit}}"
														},
														{
															"key": "ignoreLongPoll",
															"value": "{{ignoreLongPoll}}"
														},
														{
															"key": "includeTags",
															"value": "{{includeTags}}"
														}
													]
												},
												"description": "Returns a Response."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription/poll?partitioned={{partitioned}}&ttl={{ttl}}&limit={{limit}}&ignoreLongPoll={{ignoreLongPoll}}&includeTags={{includeTags}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription",
																"poll"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																},
																{
																	"key": "ttl",
																	"value": "{{ttl}}"
																},
																{
																	"key": "limit",
																	"value": "{{limit}}"
																},
																{
																	"key": "ignoreLongPoll",
																	"value": "{{ignoreLongPoll}}"
																},
																{
																	"key": "includeTags",
																	"value": "{{includeTags}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Gets the claim count.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
															"const retryRequest = eval(retryRequestCall.retryRequest);",
															"",
															"var response = pm.response;",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", asyncTest(async function () {",
															"    if(response.json() < 1) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.json() > 0;",
															"        }, \"Retrying request\");",
															"    }",
															"    ",
															"    pm.expect(response.json()).to.be.above(0);",
															"}));",
															" "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", true);",
															"",
															"const url = `${pm.environment.get(\"baseurl_dc1\")}/bus/1/${pm.environment.get(\"subscription\")}/claimcount?partitioned=${pm.environment.get(\"partitioned\")}`;",
															"pm.environment.set(\"url\", url);",
															"pm.environment.set(\"method\", \"GET\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}/claimcount?partitioned={{partitioned}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}",
														"claimcount"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														}
													]
												},
												"description": "Returns a long."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription/claimcount?partitioned={{partitioned}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription",
																"claimcount"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Unsubscribe operation.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
															"const retryRequest = eval(retryRequestCall.retryRequest);",
															"",
															"var response = pm.response;",
															"pm.test(\"Status code is 200\", asyncTest(async function () {",
															"    if(response.code !== 200) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.code === 200;",
															"        }, \"Error retrying unsubscribe checking status \");",
															"    }",
															"    pm.expect(response.code).to.be.eql(200);",
															"}));",
															"",
															"pm.test(\"Body matches string\", asyncTest(async function () {",
															"    if(response.code !== 200) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.code === 200;",
															"        }, \"Error retrying unsubscribe checking success\");",
															"    }",
															"    pm.expect(response.json().success).to.be.eql(true);",
															"}));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", true);",
															"",
															"const url = `${pm.environment.get(\"baseurl_dc1\")}/bus/1/${pm.environment.get(\"subscription\")}?partitioned=${pm.environment.get(\"partitioned\")}`;",
															"pm.environment.set(\"url\", url);",
															"pm.environment.set(\"method\", \"DELETE\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}?partitioned={{partitioned}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														}
													]
												},
												"description": "Returns an Iterator of Subscription."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription?partitioned={{partitioned}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Drops a table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json().success).eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"audit\", \"comment:'remove+table'\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit={{audit}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "{{audit}}"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is dropped"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/_table/:table?audit={{audit}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "{{audit}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Request to subscription without claimed events",
									"item": [
										{
											"name": "Creates a table",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('table', 'postman_'+uuid.v4());",
															"",
															"pm.environment.set(\"options\", \"placement:'ugc_global:ugc'\");",
															"pm.environment.set(\"audit\", \"comment:'initial+provisioning'\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json().success).eql(true);    ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options={{options}}&audit={{audit}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "{{options}}"
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is created"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options={{options}}&audit={{audit}}",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "options",
																	"value": "{{options}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Subscribe operation.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('subscription', 'postman_'+uuid.v4()+'_test_subscription');",
															"",
															"pm.environment.set(\"ttl\", \"86400\");",
															"pm.environment.set(\"eventTtl\", \"86400\");",
															"pm.environment.set(\"ignoreSuppressedEvents\", false);",
															"pm.environment.set(\"includeDefaultJoinFilter\", false);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json().success).eql(true);    ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-condition"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "intrinsic(\"~table\":\"{{table}}\")"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}?ttl={{ttl}}&eventTtl={{eventTtl}}&ignoreSuppressedEvents={{ignoreSuppressedEvents}}&includeDefaultJoinFilter={{includeDefaultJoinFilter}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													],
													"query": [
														{
															"key": "ttl",
															"value": "{{ttl}}"
														},
														{
															"key": "eventTtl",
															"value": "{{eventTtl}}"
														},
														{
															"key": "ignoreSuppressedEvents",
															"value": "{{ignoreSuppressedEvents}}"
														},
														{
															"key": "includeDefaultJoinFilter",
															"value": "{{includeDefaultJoinFilter}}"
														}
													]
												},
												"description": "Returns a SuccessResponse."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription?ttl={{ttl}}&eventTtl={{eventTtl}}&ignoreSuppressedEvents={{ignoreSuppressedEvents}}&includeDefaultJoinFilter={{includeDefaultJoinFilter}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"query": [
																{
																	"key": "ttl",
																	"value": "{{ttl}}"
																},
																{
																	"key": "eventTtl",
																	"value": "{{eventTtl}}"
																},
																{
																	"key": "ignoreSuppressedEvents",
																	"value": "{{ignoreSuppressedEvents}}"
																},
																{
																	"key": "includeDefaultJoinFilter",
																	"value": "{{includeDefaultJoinFilter}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Gets the event count.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
															"const retryRequest = eval(retryRequestCall.retryRequest);",
															"",
															"var response = pm.response;",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", asyncTest(async function () {",
															"    pm.expect(response.json()).to.be.eql(0);",
															"}));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", true);",
															"pm.environment.set(\"limit\", \"5\");",
															"",
															"const url = `${pm.environment.get(\"baseurl_dc1\")}/bus/1/${pm.environment.get(\"subscription\")}/size?partitioned=${pm.environment.get(\"partitioned\")}&limit=${pm.environment.get(\"limit\")}`;",
															"pm.environment.set(\"url\", url);",
															"pm.environment.set(\"method\", \"GET\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}/size?partitioned={{partitioned}}&limit={{limit}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}",
														"size"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														},
														{
															"key": "limit",
															"value": "{{limit}}"
														}
													]
												},
												"description": "Returns a long."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription/size?partitioned={{partitioned}}&limit={{limit}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription",
																"size"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																},
																{
																	"key": "limit",
																	"value": "{{limit}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Gets the claim count.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.to.have.body('0'));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", true);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}/claimcount?partitioned={{partitioned}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}",
														"claimcount"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														}
													]
												},
												"description": "Returns a long."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription/claimcount?partitioned={{partitioned}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription",
																"claimcount"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Poll operation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", false);",
															"pm.environment.set(\"ttl\", \"30\");",
															"pm.environment.set(\"limit\", \"5\");",
															"pm.environment.set(\"ignoreLongPoll\", \"false\");",
															"pm.environment.set(\"includeTags\", \"false\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}/poll?partitioned={{partitioned}}&ttl={{ttl}}&limit={{limit}}&ignoreLongPoll={{ignoreLongPoll}}&includeTags={{includeTags}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}",
														"poll"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														},
														{
															"key": "ttl",
															"value": "{{ttl}}"
														},
														{
															"key": "limit",
															"value": "{{limit}}"
														},
														{
															"key": "ignoreLongPoll",
															"value": "{{ignoreLongPoll}}"
														},
														{
															"key": "includeTags",
															"value": "{{includeTags}}"
														}
													]
												},
												"description": "Returns a Response."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription/poll?partitioned={{partitioned}}&ttl={{ttl}}&limit={{limit}}&ignoreLongPoll={{ignoreLongPoll}}&includeTags={{includeTags}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription",
																"poll"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																},
																{
																	"key": "ttl",
																	"value": "{{ttl}}"
																},
																{
																	"key": "limit",
																	"value": "{{limit}}"
																},
																{
																	"key": "ignoreLongPoll",
																	"value": "{{ignoreLongPoll}}"
																},
																{
																	"key": "includeTags",
																	"value": "{{includeTags}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Gets the claim count.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql(0);",
															"});",
															" "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", true);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}/claimcount?partitioned={{partitioned}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}",
														"claimcount"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														}
													]
												},
												"description": "Returns a long."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription/claimcount?partitioned={{partitioned}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription",
																"claimcount"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Unsubscribe operation.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
															"const retryRequest = eval(retryRequestCall.retryRequest);",
															"",
															"var response = pm.response;",
															"pm.test(\"Status code is 200\", asyncTest(async function () {",
															"    if(response.code !== 200) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.code === 200;",
															"        }, \"Error retrying unsubscribe checking status \");",
															"    }",
															"    pm.expect(response.code).to.be.eql(200);",
															"}));",
															"",
															"pm.test(\"Body matches string\", asyncTest(async function () {",
															"    if(response.code !== 200) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.code === 200;",
															"        }, \"Error retrying unsubscribe checking success\");",
															"    }",
															"    pm.expect(response.json().success).to.be.eql(true);",
															"}));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", true);",
															"",
															"const url = `${pm.environment.get(\"baseurl_dc1\")}/bus/1/${pm.environment.get(\"subscription\")}?partitioned=${pm.environment.get(\"partitioned\")}`;",
															"pm.environment.set(\"url\", url);",
															"pm.environment.set(\"method\", \"DELETE\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}?partitioned={{partitioned}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														}
													]
												},
												"description": "Returns an Iterator of Subscription."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription?partitioned={{partitioned}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Drops a table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json().success).eql(true);    ",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"audit\", \"comment:'remove+table'\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit={{audit}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "{{audit}}"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is dropped"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/_table/:table?audit={{audit}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "{{audit}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Request without access to claimcount",
									"item": [
										{
											"name": "Gets the claim count.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json().reason).to.be.oneOf([`not authorized to update table ${pm.environment.get('table')}`, 'not authorized']);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", false);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key_no_rights}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}/claimcount?partitioned={{partitioned}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}",
														"claimcount"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														}
													]
												},
												"description": "Returns a long."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription/claimcount?partitioned={{partitioned}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription",
																"claimcount"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const retryRequest = () => {",
											"    return new Promise((resolve, reject) => {",
											"        pm.sendRequest({",
											"            url: `${pm.environment.get(\"url\")}`,",
											"            method: `${pm.environment.get(\"method\")}`,",
											"            header: {",
											"                \"X-BV-API-Key\": pm.environment.get(\"api_key\"),",
											"            }",
											"        }, (error, response) => {",
											"            if (error) {",
											"                reject(error);",
											"            }",
											"            resolve(response);            ",
											"        });",
											"    });",
											"};",
											"",
											"const retryRequestCall = {",
											"    retryRequest: retryRequest.toString()",
											"};",
											"",
											"pm.globals.set(\"retryRequestCall\", JSON.stringify(retryRequestCall));"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Get peek",
							"item": [
								{
									"name": "TC: Request with access to peek unclaimed events without parameters",
									"item": [
										{
											"name": "Creates a table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Successful PUT request\", function () {",
															"    pm.expect(pm.response.json().success).eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('table', 'postman_'+uuid.v4());",
															"",
															"pm.environment.set(\"options\", \"placement:'ugc_global:ugc'\");",
															"pm.environment.set(\"audit\", \"comment:'initial+provisioning'\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options={{options}}&audit={{audit}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "{{options}}"
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is created"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options={{options}}&audit={{audit}}",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "options",
																	"value": "{{options}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Subscribe operation.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('subscription', 'postman_'+uuid.v4()+'_test_subscription');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Successful PUT request\", function () {",
															"    pm.expect(pm.response.json().success).eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-condition"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "intrinsic(\"~table\":\"{{table}}\")"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}?ttl={{ttl}}&eventTtl={{eventTtl}}&ignoreSuppressedEvents={{ignoreSuppressedEvents}}&includeDefaultJoinFilter={{includeDefaultJoinFilter}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													],
													"query": [
														{
															"key": "ttl",
															"value": "{{ttl}}"
														},
														{
															"key": "eventTtl",
															"value": "{{eventTtl}}"
														},
														{
															"key": "ignoreSuppressedEvents",
															"value": "{{ignoreSuppressedEvents}}"
														},
														{
															"key": "includeDefaultJoinFilter",
															"value": "{{includeDefaultJoinFilter}}"
														}
													]
												},
												"description": "Returns a SuccessResponse."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription?ttl={{ttl}}&eventTtl={{eventTtl}}&ignoreSuppressedEvents={{ignoreSuppressedEvents}}&includeDefaultJoinFilter={{includeDefaultJoinFilter}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"query": [
																{
																	"key": "ttl",
																	"value": "{{ttl}}"
																},
																{
																	"key": "eventTtl",
																	"value": "{{eventTtl}}"
																},
																{
																	"key": "ignoreSuppressedEvents",
																	"value": "{{ignoreSuppressedEvents}}"
																},
																{
																	"key": "includeDefaultJoinFilter",
																	"value": "{{includeDefaultJoinFilter}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Gets the event count.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", \"true\");",
															"pm.environment.set(\"limit\", \"10\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}/size?partitioned={{partitioned}}&limit={{limit}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}",
														"size"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														},
														{
															"key": "limit",
															"value": "{{limit}}"
														}
													]
												},
												"description": "Returns a long."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription/size?partitioned={{partitioned}}&limit={{limit}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription",
																"size"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																},
																{
																	"key": "limit",
																	"value": "{{limit}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Gets the claim count.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.to.have.body('0'));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}/claimcount?partitioned={{partitioned}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}",
														"claimcount"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														}
													]
												},
												"description": "Returns a long."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription/claimcount?partitioned={{partitioned}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription",
																"claimcount"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Peek operation.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
															"const retryRequest = eval(retryRequestCall.retryRequest);",
															"",
															"var response = pm.response;",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Number of events as expected\", asyncTest(async function () {",
															"    if (response.json().length !== 1) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.json().length === 1;",
															"        }, \"Retrying to get number of events\");",
															"    }",
															"    pm.expect(response.json().length === 1);",
															"}));",
															"",
															"pm.test(\"Successful GET request\", asyncTest(async function () {",
															"     if (response.json().length !== 1) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.json().length === 1;",
															"        }, \"Retrying to get body\");",
															"    };",
															"    ",
															"    pm.expect(response.json()[0]).to.have.keys(\"eventKey\", \"content\");",
															"    pm.expect(response.json()[0].content).to.have.keys(\"test_delta\",\"test_table\",\"customer\",\"~id\",\"~table\",\"~version\",\"~signature\",\"~deleted\",\"~firstUpdateAt\",\"~lastUpdateAt\",\"~lastMutateAt\");",
															"}));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", \"true\");",
															"pm.environment.set(\"limit\", \"1\");",
															"pm.environment.set(\"includeTags\", \"false\");",
															"",
															"const url = `${pm.environment.get(\"baseurl_dc1\")}/bus/1/${pm.environment.get(\"subscription\")}/peek`;",
															"pm.environment.set(\"url\", url);",
															"pm.environment.set(\"method\", \"GET\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}/peek",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}",
														"peek"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}",
															"disabled": true
														},
														{
															"key": "limit",
															"value": "{{limit}}",
															"disabled": true
														},
														{
															"key": "includeTags",
															"value": "false",
															"disabled": true
														}
													]
												},
												"description": "Returns an List of Events."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription/peek?partitioned={{partitioned}}&limit={{limit}}&includeTags={{includeTags}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription",
																"peek"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																},
																{
																	"key": "limit",
																	"value": "{{limit}}"
																},
																{
																	"key": "includeTags",
																	"value": "{{includeTags}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"id\": \"non id sit ipsum\",\n \"payload\": {\n  \"tags\": [\n   \"tempor dolor\",\n   \"sed dolor\"\n  ],\n  \"changeId\": \"fa0c71cd-e155-e444-b9dc-1d2f8b109bf7\",\n  \"key\": \"in pariatu\",\n  \"table\": \"dolore Lorem\"\n }\n}"
												}
											]
										},
										{
											"name": "Gets the claim count.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.to.have.body('0'));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}/claimcount?partitioned={{partitioned}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}",
														"claimcount"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														}
													]
												},
												"description": "Returns a long."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription/claimcount?partitioned={{partitioned}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription",
																"claimcount"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Unsubscribe operation.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
															"const retryRequest = eval(retryRequestCall.retryRequest);",
															"",
															"var response = pm.response;",
															"pm.test(\"Status code is 200\", asyncTest(async function () {",
															"    if(response.code !== 200) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.code === 200;",
															"        }, \"Error retrying unsubscribe checking status \");",
															"    }",
															"    pm.expect(response.code).to.be.eql(200);",
															"}));",
															"",
															"pm.test(\"Successful DELETE request\", asyncTest(async function () {",
															"    if(response.code !== 200) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.code === 200;",
															"        }, \"Error retrying unsubscribe checking success\");",
															"    }",
															"    pm.expect(response.json().success).to.be.eql(true);",
															"}));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", \"true\");",
															"",
															"const url = `${pm.environment.get(\"baseurl_dc1\")}/bus/1/${pm.environment.get(\"subscription\")}?partitioned=true`;",
															"pm.environment.set(\"url\", url);",
															"pm.environment.set(\"method\", \"DELETE\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}?partitioned={{partitioned}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														}
													]
												},
												"description": "Returns an Iterator of Subscription."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription?partitioned={{partitioned}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Drops a table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Successful DELETE request\", function () {",
															"    pm.expect(pm.response.json().success).eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"audit\", \"comment:'remove+table'\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit={{audit}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "{{audit}}"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is dropped"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/_table/:table?audit={{audit}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "{{audit}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Request with access to peek unclaimed events with partititoned=true, limit=11, includeTags=false parameters",
									"item": [
										{
											"name": "Creates a table",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('table', 'postman_'+uuid.v4());",
															"",
															"pm.environment.set(\"options\", \"placement:'ugc_global:ugc'\");",
															"pm.environment.set(\"audit\", \"comment:'initial+provisioning'\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Successful PUT request\", function () {",
															"    pm.expect(pm.response.json().success).eql(true);    ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options={{options}}&audit={{audit}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "{{options}}"
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is created"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options={{options}}&audit={{audit}}",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "options",
																	"value": "{{options}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Subscribe operation.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('subscription', 'postman_'+uuid.v4()+'_test_subscription');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Successful PUT request\", function () {",
															"    pm.expect(pm.response.json().success).eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-condition"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "intrinsic(\"~table\":\"{{table}}\")"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}?ttl={{ttl}}&eventTtl={{eventTtl}}&ignoreSuppressedEvents={{ignoreSuppressedEvents}}&includeDefaultJoinFilter={{includeDefaultJoinFilter}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													],
													"query": [
														{
															"key": "ttl",
															"value": "{{ttl}}"
														},
														{
															"key": "eventTtl",
															"value": "{{eventTtl}}"
														},
														{
															"key": "ignoreSuppressedEvents",
															"value": "{{ignoreSuppressedEvents}}"
														},
														{
															"key": "includeDefaultJoinFilter",
															"value": "{{includeDefaultJoinFilter}}"
														}
													]
												},
												"description": "Returns a SuccessResponse."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription?ttl={{ttl}}&eventTtl={{eventTtl}}&ignoreSuppressedEvents={{ignoreSuppressedEvents}}&includeDefaultJoinFilter={{includeDefaultJoinFilter}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"query": [
																{
																	"key": "ttl",
																	"value": "{{ttl}}"
																},
																{
																	"key": "eventTtl",
																	"value": "{{eventTtl}}"
																},
																{
																	"key": "ignoreSuppressedEvents",
																	"value": "{{ignoreSuppressedEvents}}"
																},
																{
																	"key": "includeDefaultJoinFilter",
																	"value": "{{includeDefaultJoinFilter}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 1.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 2.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 3.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 4.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 5.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 6.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 7.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 8.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 9.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 10.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Gets the event count.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
															"const retryRequest = eval(retryRequestCall.retryRequest);",
															"",
															"var response = pm.response;",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", asyncTest(async function () {",
															"    if(!response.json() > 0) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            if(response.json() > 0) {",
															"                return response.json() > 0;",
															"            }        ",
															"        }, \"Retrying request\");",
															"    }",
															"    pm.expect(response.json()).to.be.above(0);",
															"}));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", \"true\");",
															"pm.environment.set(\"limit\", \"10\");",
															"",
															"const url = `${pm.environment.get(\"baseurl_dc1\")}/bus/1/${pm.environment.get(\"subscription\")}/size?partitioned=${pm.environment.get(\"partitioned\")}&limit=${pm.environment.get(\"limit\")}`;",
															"pm.environment.set(\"url\", url);",
															"pm.environment.set(\"method\", \"GET\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}/size?partitioned={{partitioned}}&limit={{limit}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}",
														"size"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														},
														{
															"key": "limit",
															"value": "{{limit}}"
														}
													]
												},
												"description": "Returns a long."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription/size?partitioned={{partitioned}}&limit={{limit}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription",
																"size"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																},
																{
																	"key": "limit",
																	"value": "{{limit}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Gets the claim count.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.to.have.body('0'));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}/claimcount?partitioned={{partitioned}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}",
														"claimcount"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														}
													]
												},
												"description": "Returns a long."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription/claimcount?partitioned={{partitioned}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription",
																"claimcount"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Peek operation.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
															"const retryRequest = eval(retryRequestCall.retryRequest);",
															"",
															"var response = pm.response;",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Successful GET request\", asyncTest(async function () {",
															"     if (response.json().length < 1) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.json().length > 0;",
															"        }, \"Retrying to get body\");",
															"    };    ",
															"    pm.expect(response.json().length > 0);",
															"    pm.expect(response.json()[0]).to.have.keys(\"eventKey\", \"content\");",
															"    pm.expect(response.json()[0].content).to.have.keys(\"test_delta\",\"test_table\",\"customer\",\"~id\",\"~table\",\"~version\",\"~signature\",\"~deleted\",\"~firstUpdateAt\",\"~lastUpdateAt\",\"~lastMutateAt\");",
															"}));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", \"true\");",
															"pm.environment.set(\"limit\", \"10\");",
															"pm.environment.set(\"includeTags\", \"false\");",
															"",
															"const url = `${pm.environment.get(\"baseurl_dc1\")}/bus/1/${pm.environment.get(\"subscription\")}/peek`;",
															"pm.environment.set(\"url\", url);",
															"pm.environment.set(\"method\", \"GET\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}/peek?partitioned={{partitioned}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}",
														"peek"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														},
														{
															"key": "limit",
															"value": "{{limit}}",
															"disabled": true
														},
														{
															"key": "includeTags",
															"value": "{{includeTags}}",
															"disabled": true
														}
													]
												},
												"description": "Returns an List of Events."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription/peek?partitioned={{partitioned}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription",
																"peek"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																},
																{
																	"key": "limit",
																	"value": "{{limit}}",
																	"disabled": true
																},
																{
																	"key": "includeTags",
																	"value": "{{includeTags}}",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"id\": \"non id sit ipsum\",\n \"payload\": {\n  \"tags\": [\n   \"tempor dolor\",\n   \"sed dolor\"\n  ],\n  \"changeId\": \"fa0c71cd-e155-e444-b9dc-1d2f8b109bf7\",\n  \"key\": \"in pariatu\",\n  \"table\": \"dolore Lorem\"\n }\n}"
												}
											]
										},
										{
											"name": "Gets the claim count.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.to.have.body('0'));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}/claimcount?partitioned={{partitioned}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}",
														"claimcount"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														}
													]
												},
												"description": "Returns a long."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription/claimcount?partitioned={{partitioned}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription",
																"claimcount"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Unsubscribe operation.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
															"const retryRequest = eval(retryRequestCall.retryRequest);",
															"",
															"var response = pm.response;",
															"pm.test(\"Status code is 200\", asyncTest(async function () {",
															"    if(response.code !== 200) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.code === 200;",
															"        }, \"Error retrying unsubscribe checking status\");",
															"    }",
															"    pm.expect(response.code).to.be.eql(200);",
															"}));",
															"",
															"pm.test(\"Successful DELETE request\", asyncTest(async function () {",
															"    if(response.code !== 200) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.code === 200;",
															"        }, \"Error retrying unsubscribe checking success\");",
															"    }",
															"    pm.expect(response.json().success).to.be.eql(true);",
															"}));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", \"true\");",
															"",
															"const url = `${pm.environment.get(\"baseurl_dc1\")}/bus/1/${pm.environment.get(\"subscription\")}?partitioned=true`;",
															"pm.environment.set(\"url\", url);",
															"pm.environment.set(\"method\", \"DELETE\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}?partitioned={{partitioned}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														}
													]
												},
												"description": "Returns an Iterator of Subscription."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription?partitioned={{partitioned}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Drops a table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Successful DELETE request\", function () {",
															"    pm.expect(pm.response.json().success).eql(true); ",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"audit\", \"comment:'remove+table'\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit={{audit}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "{{audit}}"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is dropped"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/_table/:table?audit={{audit}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "{{audit}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Request with access to peek unclaimed events from 2 subscriptions",
									"item": [
										{
											"name": "Creates a table",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('table', 'postman_'+uuid.v4());",
															"",
															"pm.environment.set(\"options\", \"placement:'ugc_global:ugc'\");",
															"pm.environment.set(\"audit\", \"comment:'initial+provisioning'\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Successful PUT request\", function () {",
															"    pm.expect(pm.response.json().success).eql(true); ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options={{options}}&audit={{audit}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "{{options}}"
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is created"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options={{options}}&audit={{audit}}",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "options",
																	"value": "{{options}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates a table 1",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('table1', 'postman_'+uuid.v4());",
															"",
															"pm.environment.set(\"options\", \"placement:'ugc_global:ugc'\");",
															"pm.environment.set(\"audit\", \"comment:'initial+provisioning'\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Successful PUT request\", function () {",
															"     pm.expect(pm.response.json().success).eql(true); ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table1}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table1}}?options={{options}}&audit={{audit}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table1}}"
													],
													"query": [
														{
															"key": "options",
															"value": "{{options}}"
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is created"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options={{options}}&audit={{audit}}",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "options",
																	"value": "{{options}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Subscribe operation.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('subscription', 'postman_'+uuid.v4()+'_test_subscription');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Successful PUT request\", function () {",
															"    pm.expect(pm.response.json().success).eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-condition"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "intrinsic(\"~table\":\"{{table}}\")"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}?ttl={{ttl}}&eventTtl={{eventTtl}}&ignoreSuppressedEvents={{ignoreSuppressedEvents}}&includeDefaultJoinFilter={{includeDefaultJoinFilter}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													],
													"query": [
														{
															"key": "ttl",
															"value": "{{ttl}}"
														},
														{
															"key": "eventTtl",
															"value": "{{eventTtl}}"
														},
														{
															"key": "ignoreSuppressedEvents",
															"value": "{{ignoreSuppressedEvents}}"
														},
														{
															"key": "includeDefaultJoinFilter",
															"value": "{{includeDefaultJoinFilter}}"
														}
													]
												},
												"description": "Returns a SuccessResponse."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription?ttl={{ttl}}&eventTtl={{eventTtl}}&ignoreSuppressedEvents={{ignoreSuppressedEvents}}&includeDefaultJoinFilter={{includeDefaultJoinFilter}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"query": [
																{
																	"key": "ttl",
																	"value": "{{ttl}}"
																},
																{
																	"key": "eventTtl",
																	"value": "{{eventTtl}}"
																},
																{
																	"key": "ignoreSuppressedEvents",
																	"value": "{{ignoreSuppressedEvents}}"
																},
																{
																	"key": "includeDefaultJoinFilter",
																	"value": "{{includeDefaultJoinFilter}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Subscribe operation 1",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('subscription1', 'postman_'+uuid.v4()+'_test_subscription');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Successful PUT request\", function () {",
															"    pm.expect(pm.response.json().success).eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-condition"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "intrinsic(\"~table\":\"{{table1}}\")"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription1}}?ttl={{ttl}}&eventTtl={{eventTtl}}&ignoreSuppressedEvents={{ignoreSuppressedEvents}}&includeDefaultJoinFilter={{includeDefaultJoinFilter}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription1}}"
													],
													"query": [
														{
															"key": "ttl",
															"value": "{{ttl}}"
														},
														{
															"key": "eventTtl",
															"value": "{{eventTtl}}"
														},
														{
															"key": "ignoreSuppressedEvents",
															"value": "{{ignoreSuppressedEvents}}"
														},
														{
															"key": "includeDefaultJoinFilter",
															"value": "{{includeDefaultJoinFilter}}"
														}
													]
												},
												"description": "Returns a SuccessResponse."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription?ttl={{ttl}}&eventTtl={{eventTtl}}&ignoreSuppressedEvents={{ignoreSuppressedEvents}}&includeDefaultJoinFilter={{includeDefaultJoinFilter}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"query": [
																{
																	"key": "ttl",
																	"value": "{{ttl}}"
																},
																{
																	"key": "eventTtl",
																	"value": "{{eventTtl}}"
																},
																{
																	"key": "ignoreSuppressedEvents",
																	"value": "{{ignoreSuppressedEvents}}"
																},
																{
																	"key": "includeDefaultJoinFilter",
																	"value": "{{includeDefaultJoinFilter}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
															"const retryRequest = eval(retryRequestCall.retryRequest);",
															"",
															"var response = pm.response;",
															"pm.test(\"Successful POST request\", asyncTest(async function () {",
															"    if (!Object.keys(response.json()).includes(\"success\")) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            resourceCreated = await retryRequest();",
															"            return resourceCreated === true;",
															"        });",
															"    }",
															"    pm.expect(response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(response.json().success).to.eql(true);",
															"",
															"}));",
															"",
															"pm.test(\"Status code is 200\", asyncTest(async function () {",
															"    if(response.code !== 200 ) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.code === 200;",
															"        });",
															"    }",
															"    pm.expect(response.code).to.be.eql(200);",
															"}));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");",
															"",
															"const url = `${pm.environment.get(\"baseurl_dc1\")}/sor/1/${pm.environment.get(\"table\")}/${pm.environment.get(\"document_id\")}?audit=comment:'update+data'&consistency=GLOBAL&tag=test_tag&debug=true`;",
															"pm.environment.set(\"url\", url);",
															"pm.environment.set(\"method\", \"POST\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 1.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
															"const retryRequest = eval(retryRequestCall.retryRequest);",
															"",
															"var response = pm.response;",
															"pm.test(\"Successful POST request\", asyncTest(async function () {",
															"    if (!Object.keys(response.json()).includes(\"success\")) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            resourceCreated = await retryRequest();",
															"            return resourceCreated === true;",
															"        });",
															"    }",
															"    pm.expect(response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(response.json().success).to.eql(true);",
															"",
															"}));",
															"",
															"pm.test(\"Status code is 200\", asyncTest(async function () {",
															"    if(response.code !== 200 ) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.code === 200;",
															"        });",
															"    }",
															"    pm.expect(response.code).to.be.eql(200);",
															"}));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id1', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");",
															"",
															"const url = `${pm.environment.get(\"baseurl_dc1\")}/sor/1/${pm.environment.get(\"table\")}/${pm.environment.get(\"document_id\")}?audit=comment:'update+data'&consistency=GLOBAL&tag=test_tag&debug=true`;",
															"pm.environment.set(\"url\", url);",
															"pm.environment.set(\"method\", \"POST\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table1}}/{{document_id1}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table1}}",
														"{{document_id1}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{changeId}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Peek operation.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
															"const retryRequest = eval(retryRequestCall.retryRequest);",
															"",
															"var response = pm.response;",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Number of events as expected\", asyncTest(async function () {",
															"    if (response.json().length < 1) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();            ",
															"            return response.json().length == 1;",
															"        }, \"Retrying to get number of events\");",
															"    }",
															"    pm.expect(response.json().length == 1);",
															"}));",
															"",
															"pm.test(\"Body matches string\", asyncTest(async function () {",
															"     if (response.json().length < 1) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();            ",
															"            return response.json().length == 1;",
															"        }, \"Retrying to get body\");",
															"    };",
															"    pm.expect(response.json()[0]).to.have.keys(\"eventKey\", \"content\", \"tags\");",
															"    pm.expect(response.json()[0].content).to.have.keys(\"test_delta\",\"test_table\",\"customer\",\"~id\",\"~table\",\"~version\",\"~signature\",\"~deleted\",\"~firstUpdateAt\",\"~lastUpdateAt\",\"~lastMutateAt\");",
															"}));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", \"true\");",
															"pm.environment.set(\"limit\", \"11\");",
															"pm.environment.set(\"includeTags\", \"true\");",
															"",
															"const url = `${pm.environment.get(\"baseurl_dc1\")}/bus/1/${pm.environment.get(\"subscription\")}/peek?partitioned=true&limit=11&includeTags=true`;",
															"pm.environment.set(\"url\", url);",
															"pm.environment.set(\"method\", \"GET\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}/peek?partitioned={{partitioned}}&limit={{limit}}&includeTags={{includeTags}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}",
														"peek"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														},
														{
															"key": "limit",
															"value": "{{limit}}"
														},
														{
															"key": "includeTags",
															"value": "{{includeTags}}"
														}
													]
												},
												"description": "Returns an List of Events."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription/peek?partitioned={{partitioned}}&limit={{limit}}&includeTags={{includeTags}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription",
																"peek"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																},
																{
																	"key": "limit",
																	"value": "{{limit}}"
																},
																{
																	"key": "includeTags",
																	"value": "{{includeTags}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"id\": \"non id sit ipsum\",\n \"payload\": {\n  \"tags\": [\n   \"tempor dolor\",\n   \"sed dolor\"\n  ],\n  \"changeId\": \"fa0c71cd-e155-e444-b9dc-1d2f8b109bf7\",\n  \"key\": \"in pariatu\",\n  \"table\": \"dolore Lorem\"\n }\n}"
												}
											]
										},
										{
											"name": "Peek operation 1.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
															"const retryRequest = eval(retryRequestCall.retryRequest);",
															"",
															"var response = pm.response;",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Number of events as expected\", asyncTest(async function () {",
															"    if (response.json().length < 1) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();            ",
															"            return response.json().length == 1;",
															"        }, \"Retrying to get number of events\");",
															"    }",
															"    pm.expect(response.json().length == 1);",
															"}));",
															"",
															"pm.test(\"Body matches string\", asyncTest(async function () {",
															"     if (response.json().length < 1) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();            ",
															"            return response.json().length == 1;",
															"        }, \"Retrying to get body\");",
															"    };",
															"    pm.expect(response.json()[0]).to.have.keys(\"eventKey\", \"content\", \"tags\");",
															"    pm.expect(response.json()[0].content).to.have.keys(\"test_delta\",\"test_table\",\"customer\",\"~id\",\"~table\",\"~version\",\"~signature\",\"~deleted\",\"~firstUpdateAt\",\"~lastUpdateAt\",\"~lastMutateAt\");",
															"}));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", \"true\");",
															"pm.environment.set(\"limit\", \"11\");",
															"pm.environment.set(\"includeTags\", \"true\");",
															"",
															"const url = `${pm.environment.get(\"baseurl_dc1\")}/bus/1/${pm.environment.get(\"subscription\")}/peek?partitioned=true&limit=11&includeTags=true`;",
															"pm.environment.set(\"url\", url);",
															"pm.environment.set(\"method\", \"GET\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription1}}/peek?partitioned={{partitioned}}&limit={{limit}}&includeTags={{includeTags}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription1}}",
														"peek"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														},
														{
															"key": "limit",
															"value": "{{limit}}"
														},
														{
															"key": "includeTags",
															"value": "{{includeTags}}"
														}
													]
												},
												"description": "Returns an List of Events."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription/peek?partitioned={{partitioned}}&limit={{limit}}&includeTags={{includeTags}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription",
																"peek"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																},
																{
																	"key": "limit",
																	"value": "{{limit}}"
																},
																{
																	"key": "includeTags",
																	"value": "{{includeTags}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"id\": \"non id sit ipsum\",\n \"payload\": {\n  \"tags\": [\n   \"tempor dolor\",\n   \"sed dolor\"\n  ],\n  \"changeId\": \"fa0c71cd-e155-e444-b9dc-1d2f8b109bf7\",\n  \"key\": \"in pariatu\",\n  \"table\": \"dolore Lorem\"\n }\n}"
												}
											]
										},
										{
											"name": "Unsubscribe operation.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
															"const retryRequest = eval(retryRequestCall.retryRequest);",
															"",
															"var response = pm.response;",
															"pm.test(\"Status code is 200\", asyncTest(async function () {",
															"    if(response.code !== 200) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.code === 200;",
															"        }, \"Error retrying unsubscribe checking status\");",
															"    }",
															"    pm.expect(response).to.have.status(200);",
															"}));",
															"",
															"pm.test(\"Successful DELETE request\", asyncTest(async function () {",
															"    if(response.code !== 200) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.code === 200;",
															"        }, \"Error retrying unsubscribe checking success\");",
															"    }",
															"    pm.expect(response.json().success).eql(true);",
															"}));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", \"true\");",
															"",
															"const url = `${pm.environment.get(\"baseurl_dc1\")}/bus/1/${pm.environment.get(\"subscription\")}?partitioned=true`;",
															"pm.environment.set(\"url\", url);",
															"pm.environment.set(\"method\", \"DELETE\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}?partitioned={{partitioned}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														}
													]
												},
												"description": "Returns an Iterator of Subscription."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription?partitioned={{partitioned}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Unsubscribe operation 1.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
															"const retryRequest = eval(retryRequestCall.retryRequest);",
															"",
															"var response = pm.response;",
															"pm.test(\"Status code is 200\", asyncTest(async function () {",
															"    if(response.code !== 200) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.code === 200;",
															"        }, \"Error retrying unsubscribe checking status \");",
															"    }",
															"    pm.expect(response.code).to.be.eql(200);",
															"}));",
															"",
															"pm.test(\"Successful DELETE request\", asyncTest(async function () {",
															"    if(response.code !== 200) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.code === 200;",
															"        }, \"Error retrying unsubscribe checking success\");",
															"    }",
															"    pm.expect(response.json().success).eql(true);",
															"}));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", \"true\");",
															"",
															"const url = `${pm.environment.get(\"baseurl_dc1\")}/bus/1/${pm.environment.get(\"subscription1\")}?partitioned=true`;",
															"pm.environment.set(\"url\", url);",
															"pm.environment.set(\"method\", \"DELETE\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription1}}?partitioned={{partitioned}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription1}}"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														}
													]
												},
												"description": "Returns an Iterator of Subscription."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription?partitioned={{partitioned}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Drops a table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Successful DELETE request\", function () {",
															"    pm.expect(pm.response.json().success).eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"audit\", \"comment:'remove+table'\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit={{audit}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "{{audit}}"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is dropped"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/_table/:table?audit={{audit}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "{{audit}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Drops a table 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Successful DELETE request\", function () {",
															"    pm.expect(pm.response.json().success).eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"audit\", \"comment:'remove+table'\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table1}}?audit={{audit}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table1}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "{{audit}}"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is dropped"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/_table/:table?audit={{audit}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "{{audit}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Request with access to peek unclaimed events with partititoned=false, limit=11, includeTags=true parameters",
									"item": [
										{
											"name": "Creates a table",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('table', 'postman_'+uuid.v4());",
															"",
															"pm.environment.set(\"options\", \"placement:'ugc_global:ugc'\");",
															"pm.environment.set(\"audit\", \"comment:'initial+provisioning'\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Successful PUT request\", function () {",
															"    pm.expect(pm.response.json().success).eql(true);    ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options={{options}}&audit={{audit}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "{{options}}"
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is created"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options={{options}}&audit={{audit}}",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "options",
																	"value": "{{options}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Subscribe operation.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('subscription', 'postman_'+uuid.v4()+'_test_subscription');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Successful PUT request\", function () {",
															"    pm.expect(pm.response.json().success).eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-condition"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "intrinsic(\"~table\":\"{{table}}\")"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}?ttl={{ttl}}&eventTtl={{eventTtl}}&ignoreSuppressedEvents={{ignoreSuppressedEvents}}&includeDefaultJoinFilter={{includeDefaultJoinFilter}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													],
													"query": [
														{
															"key": "ttl",
															"value": "{{ttl}}"
														},
														{
															"key": "eventTtl",
															"value": "{{eventTtl}}"
														},
														{
															"key": "ignoreSuppressedEvents",
															"value": "{{ignoreSuppressedEvents}}"
														},
														{
															"key": "includeDefaultJoinFilter",
															"value": "{{includeDefaultJoinFilter}}"
														}
													]
												},
												"description": "Returns a SuccessResponse."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription?ttl={{ttl}}&eventTtl={{eventTtl}}&ignoreSuppressedEvents={{ignoreSuppressedEvents}}&includeDefaultJoinFilter={{includeDefaultJoinFilter}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"query": [
																{
																	"key": "ttl",
																	"value": "{{ttl}}"
																},
																{
																	"key": "eventTtl",
																	"value": "{{eventTtl}}"
																},
																{
																	"key": "ignoreSuppressedEvents",
																	"value": "{{ignoreSuppressedEvents}}"
																},
																{
																	"key": "includeDefaultJoinFilter",
																	"value": "{{includeDefaultJoinFilter}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id1', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id1}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id1}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id2', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id2}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id2}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 2",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id3', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id3}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id3}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id4', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id4}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id4}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 4",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id5', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id5}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id5}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 5",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id6', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id6}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id6}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 6",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id7', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id7}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id7}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 7",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id8', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id8}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id8}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 8",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id9', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id9}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id9}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 9",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id10', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id10}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id10}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 10",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id11', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id11}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id11}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 11",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id12', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id12}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id12}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Gets the event count.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
															"const retryRequest = eval(retryRequestCall.retryRequest);",
															"",
															"var response = pm.response;",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", asyncTest(async function () {",
															"    if(response.json() < 1) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();            ",
															"            return response.json() > 0;                 ",
															"        }, \"Retrying request\");",
															"    }",
															"    pm.expect(response.json() > 0);",
															"}));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", \"true\");",
															"pm.environment.set(\"limit\", \"10\");",
															"",
															"const url = `${pm.environment.get(\"baseurl_dc1\")}/bus/1/${pm.environment.get(\"subscription\")}/size?partitioned=${pm.environment.get(\"partitioned\")}&limit=${pm.environment.get(\"limit\")}`;",
															"pm.environment.set(\"url\", url);",
															"pm.environment.set(\"method\", \"GET\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}/size?partitioned={{partitioned}}&limit={{limit}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}",
														"size"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														},
														{
															"key": "limit",
															"value": "{{limit}}"
														}
													]
												},
												"description": "Returns a long."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription/size?partitioned={{partitioned}}&limit={{limit}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription",
																"size"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																},
																{
																	"key": "limit",
																	"value": "{{limit}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Gets the claim count.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql(0);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}/claimcount?partitioned={{partitioned}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}",
														"claimcount"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														}
													]
												},
												"description": "Returns a long."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription/claimcount?partitioned={{partitioned}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription",
																"claimcount"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Peek operation.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
															"const retryRequest = eval(retryRequestCall.retryRequest);",
															"",
															"var response = pm.response;",
															"pm.test(\"Body matches string\", asyncTest(async function () {",
															"     if (response.json().length < 1) {",
															"         await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.json().length > 0;",
															"        },\"Retrying getting body\");",
															"     }     ",
															"    pm.expect(response.json().length > 0);  ",
															"    pm.expect(response.json()[0]).to.have.keys(\"eventKey\", \"content\", \"tags\");",
															"    pm.expect(response.json()[0].content).to.have.keys(\"test_delta\",\"test_table\",\"customer\",\"~id\",\"~table\",\"~version\",\"~signature\",\"~deleted\",\"~firstUpdateAt\",\"~lastUpdateAt\",\"~lastMutateAt\");",
															"    pm.expect(response.json()[0].tags[0][0]).to.be.eql(\"test_tag\");",
															"}));",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", \"false\");",
															"pm.environment.set(\"limit\", \"11\");",
															"pm.environment.set(\"includeTags\", \"true\");",
															"",
															"const url = `${pm.environment.get(\"baseurl_dc1\")}/bus/1/${pm.environment.get(\"subscription\")}/peek?partitioned=false&limit=11&includeTags=true`;",
															"pm.environment.set(\"url\", url);",
															"pm.environment.set(\"method\", \"GET\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}/peek?partitioned={{partitioned}}&limit={{limit}}&includeTags={{includeTags}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}",
														"peek"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														},
														{
															"key": "limit",
															"value": "{{limit}}"
														},
														{
															"key": "includeTags",
															"value": "{{includeTags}}"
														}
													]
												},
												"description": "Returns an List of Events."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription/peek?partitioned={{partitioned}}&limit={{limit}}&includeTags={{includeTags}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription",
																"peek"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																},
																{
																	"key": "limit",
																	"value": "{{limit}}"
																},
																{
																	"key": "includeTags",
																	"value": "{{includeTags}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"id\": \"non id sit ipsum\",\n \"payload\": {\n  \"tags\": [\n   \"tempor dolor\",\n   \"sed dolor\"\n  ],\n  \"changeId\": \"fa0c71cd-e155-e444-b9dc-1d2f8b109bf7\",\n  \"key\": \"in pariatu\",\n  \"table\": \"dolore Lorem\"\n }\n}"
												}
											]
										},
										{
											"name": "Gets the claim count.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.to.have.body('0'));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}/claimcount?partitioned={{partitioned}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}",
														"claimcount"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														}
													]
												},
												"description": "Returns a long."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription/claimcount?partitioned={{partitioned}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription",
																"claimcount"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Unsubscribe operation.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
															"const retryRequest = eval(retryRequestCall.retryRequest);",
															"",
															"var response = pm.response;",
															"pm.test(\"Status code is 200\", asyncTest(async function () {",
															"    if(response.code !== 200) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.code === 200;",
															"        }, \"Error retrying unsubscribe checking status \");",
															"    }",
															"    pm.expect(response).to.have.status(200);",
															"}));",
															"",
															"pm.test(\"Successful DELETE request\", asyncTest(async function () {",
															"    if(response.code !== 200) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.code === 200;",
															"        }, \"Error retrying unsubscribe checking success\");",
															"    }",
															"    pm.expect(response.json().success).eql(true);",
															"}));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", \"true\");",
															"",
															"const url = `${pm.environment.get(\"baseurl_dc1\")}/bus/1/${pm.environment.get(\"subscription\")}?partitioned=true`;",
															"pm.environment.set(\"url\", url);",
															"pm.environment.set(\"method\", \"DELETE\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}?partitioned={{partitioned}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														}
													]
												},
												"description": "Returns an Iterator of Subscription."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription?partitioned={{partitioned}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Drops a table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Successful DELETE request\", function () {",
															"    pm.expect(pm.response.json().success).eql(true); ",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"audit\", \"comment:'remove+table'\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit={{audit}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "{{audit}}"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is dropped"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/_table/:table?audit={{audit}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "{{audit}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Request with api-key without access to peek",
									"item": [
										{
											"name": "Peek operation.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", \"true\");",
															"pm.environment.set(\"limit\", \"10\");",
															"pm.environment.set(\"includeTags\", \"false\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json().reason).to.be.eql('not authorized');",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key_no_rights}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}/peek?partitioned={{partitioned}}&limit={{limit}}&includeTags={{includeTags}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}",
														"peek"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														},
														{
															"key": "limit",
															"value": "{{limit}}"
														},
														{
															"key": "includeTags",
															"value": "{{includeTags}}"
														}
													]
												},
												"description": "Returns an List of Events."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription/peek?partitioned={{partitioned}}&limit={{limit}}&includeTags={{includeTags}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription",
																"peek"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																},
																{
																	"key": "limit",
																	"value": "{{limit}}"
																},
																{
																	"key": "includeTags",
																	"value": "{{includeTags}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"id\": \"non id sit ipsum\",\n \"payload\": {\n  \"tags\": [\n   \"tempor dolor\",\n   \"sed dolor\"\n  ],\n  \"changeId\": \"fa0c71cd-e155-e444-b9dc-1d2f8b109bf7\",\n  \"key\": \"in pariatu\",\n  \"table\": \"dolore Lorem\"\n }\n}"
												}
											]
										}
									]
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const retryRequest = () => {",
											"    return new Promise((resolve, reject) => {",
											"        pm.sendRequest({",
											"            url: `${pm.environment.get(\"url\")}`,",
											"            method: `${pm.environment.get(\"method\")}`,",
											"            header: {",
											"                \"X-BV-API-Key\": pm.environment.get(\"api_key\"),",
											"            }",
											"        }, (error, response) => {",
											"            if (error) {",
											"                reject(error);",
											"            }",
											"            resolve(response);            ",
											"        });",
											"    });",
											"};",
											"",
											"const retryRequestCall = {",
											"    retryRequest: retryRequest.toString()",
											"};",
											"",
											"pm.globals.set(\"retryRequestCall\", JSON.stringify(retryRequestCall));",
											"",
											"pm.environment.set(\"ttl\", \"86400\");",
											"pm.environment.set(\"eventTtl\", \"86400\");",
											"pm.environment.set(\"ignoreSuppressedEvents\", false);",
											"pm.environment.set(\"includeDefaultJoinFilter\", false);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Get poll",
							"item": [
								{
									"name": "TC: Request with access to poll from table without unclaimed events without parameters",
									"item": [
										{
											"name": "Creates a table",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('table', 'postman_'+uuid.v4());",
															"",
															"pm.environment.set(\"options\", \"placement:'ugc_global:ugc'\");",
															"pm.environment.set(\"audit\", \"comment:'initial+provisioning'\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Successful PUT request\", function () {",
															"    pm.expect(pm.response.json().success).eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options={{options}}&audit={{audit}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "{{options}}"
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is created"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options={{options}}&audit={{audit}}",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "options",
																	"value": "{{options}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Subscribe operation.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('subscription', 'postman_'+uuid.v4()+'_test_subscription');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json().success).eql(true);    ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-condition"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "intrinsic(\"~table\":\"{{table}}\")"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}?ttl={{ttl}}&eventTtl={{eventTtl}}&ignoreSuppressedEvents={{ignoreSuppressedEvents}}&includeDefaultJoinFilter={{includeDefaultJoinFilter}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													],
													"query": [
														{
															"key": "ttl",
															"value": "{{ttl}}"
														},
														{
															"key": "eventTtl",
															"value": "{{eventTtl}}"
														},
														{
															"key": "ignoreSuppressedEvents",
															"value": "{{ignoreSuppressedEvents}}"
														},
														{
															"key": "includeDefaultJoinFilter",
															"value": "{{includeDefaultJoinFilter}}"
														}
													]
												},
												"description": "Returns a SuccessResponse."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription?ttl={{ttl}}&eventTtl={{eventTtl}}&ignoreSuppressedEvents={{ignoreSuppressedEvents}}&includeDefaultJoinFilter={{includeDefaultJoinFilter}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"query": [
																{
																	"key": "ttl",
																	"value": "{{ttl}}"
																},
																{
																	"key": "eventTtl",
																	"value": "{{eventTtl}}"
																},
																{
																	"key": "ignoreSuppressedEvents",
																	"value": "{{ignoreSuppressedEvents}}"
																},
																{
																	"key": "includeDefaultJoinFilter",
																	"value": "{{includeDefaultJoinFilter}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Gets the event count.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", \"true\");",
															"pm.environment.set(\"limit\", \"10\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}/size?partitioned={{partitioned}}&limit={{limit}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}",
														"size"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														},
														{
															"key": "limit",
															"value": "{{limit}}"
														}
													]
												},
												"description": "Returns a long."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription/size?partitioned={{partitioned}}&limit={{limit}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription",
																"size"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																},
																{
																	"key": "limit",
																	"value": "{{limit}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Gets the claim count.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql(0);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}/claimcount?partitioned={{partitioned}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}",
														"claimcount"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														}
													]
												},
												"description": "Returns a long."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription/claimcount?partitioned={{partitioned}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription",
																"claimcount"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "poll operation.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Successful GET request\", function () {",
															"    pm.expect(pm.response.json()).to.be.empty;",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", \"true\");",
															"pm.environment.set(\"ttl\", \"30\");",
															"pm.environment.set(\"limit\", \"10\");",
															"pm.environment.set(\"ignoreLongPoll\", \"false\");",
															"pm.environment.set(\"includeTags\", \"false\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}/poll",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}",
														"poll"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "true",
															"disabled": true
														},
														{
															"key": "ttl",
															"value": "30",
															"disabled": true
														},
														{
															"key": "limit",
															"value": "10",
															"disabled": true
														},
														{
															"key": "ignoreLongPoll",
															"value": "false",
															"disabled": true
														},
														{
															"key": "includeTags",
															"value": "false",
															"disabled": true
														}
													]
												},
												"description": "Returns a Response."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription/poll?partitioned={{partitioned}}&ttl={{ttl}}&limit={{limit}}&ignoreLongPoll={{ignoreLongPoll}}&includeTags={{includeTags}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription",
																"poll"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																},
																{
																	"key": "ttl",
																	"value": "{{ttl}}"
																},
																{
																	"key": "limit",
																	"value": "{{limit}}"
																},
																{
																	"key": "ignoreLongPoll",
																	"value": "{{ignoreLongPoll}}"
																},
																{
																	"key": "includeTags",
																	"value": "{{includeTags}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Gets the claim count.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql(0);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}/claimcount?partitioned={{partitioned}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}",
														"claimcount"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														}
													]
												},
												"description": "Returns a long."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription/claimcount?partitioned={{partitioned}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription",
																"claimcount"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Unsubscribe operation.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
															"const retryRequest = eval(retryRequestCall.retryRequest);",
															"",
															"var response = pm.response;",
															"pm.test(\"Status code is 200\", asyncTest(async function () {",
															"    if(response.code !== 200) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.code === 200;",
															"        }, \"Error retrying unsubscribe checking status \");",
															"    }",
															"    pm.expect(response.code).to.be.eql(200);",
															"}));",
															"",
															"pm.test(\"Successful DELETE request\", asyncTest(async function () {",
															"    if(response.code !== 200) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.code === 200;",
															"        }, \"Error retrying unsubscribe checking success\");",
															"    }",
															"    pm.expect(response.json().success).to.be.eql(true);",
															"}));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", \"true\");",
															"",
															"const url = `${pm.environment.get(\"baseurl_dc1\")}/bus/1/${pm.environment.get(\"subscription\")}?partitioned=${pm.environment.get(\"partitioned\")}`;",
															"pm.environment.set(\"url\", url);",
															"pm.environment.set(\"method\", \"DELETE\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}?partitioned={{partitioned}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														}
													]
												},
												"description": "Returns an Iterator of Subscription."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription?partitioned={{partitioned}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Drops a table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Successful DELETE request\", function () {",
															"    pm.expect(pm.response.json().success).eql(true);    ",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"audit\", \"comment:'remove+table'\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit={{audit}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "{{audit}}"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is dropped"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/_table/:table?audit={{audit}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "{{audit}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Request with access to poll unclaimed events with partititoned=true, ttl=20 limit=5, includeTags=true, ignoreLongPoll=true parameters",
									"item": [
										{
											"name": "Creates a table",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('table', 'postman_'+uuid.v4());",
															"",
															"pm.environment.set(\"options\", \"placement:'ugc_global:ugc'\");",
															"pm.environment.set(\"audit\", \"comment:'initial+provisioning'\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Successful PUT request\", function () {",
															"    pm.expect(pm.response.json().success).eql(true);    ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options={{options}}&audit={{audit}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "{{options}}"
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is created"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options={{options}}&audit={{audit}}",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "options",
																	"value": "{{options}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Subscribe operation.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('subscription', 'postman_'+uuid.v4()+'_test_subscription');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json().success).eql(true);     ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-condition"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "intrinsic(\"~table\":\"{{table}}\")"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}?ttl={{ttl}}&eventTtl={{eventTtl}}&ignoreSuppressedEvents={{ignoreSuppressedEvents}}&includeDefaultJoinFilter={{includeDefaultJoinFilter}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													],
													"query": [
														{
															"key": "ttl",
															"value": "{{ttl}}"
														},
														{
															"key": "eventTtl",
															"value": "{{eventTtl}}"
														},
														{
															"key": "ignoreSuppressedEvents",
															"value": "{{ignoreSuppressedEvents}}"
														},
														{
															"key": "includeDefaultJoinFilter",
															"value": "{{includeDefaultJoinFilter}}"
														}
													]
												},
												"description": "Returns a SuccessResponse."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription?ttl={{ttl}}&eventTtl={{eventTtl}}&ignoreSuppressedEvents={{ignoreSuppressedEvents}}&includeDefaultJoinFilter={{includeDefaultJoinFilter}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"query": [
																{
																	"key": "ttl",
																	"value": "{{ttl}}"
																},
																{
																	"key": "eventTtl",
																	"value": "{{eventTtl}}"
																},
																{
																	"key": "ignoreSuppressedEvents",
																	"value": "{{ignoreSuppressedEvents}}"
																},
																{
																	"key": "includeDefaultJoinFilter",
																	"value": "{{includeDefaultJoinFilter}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id1', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id1}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id1}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{changeId}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id2', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id2}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id2}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{changeId}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id3', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id3}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id3}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{changeId}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id4', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id4}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id4}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{changeId}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 4",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id5', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id5}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id5}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{changeId}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 5",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id6', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id6}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id6}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{changeId}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 6",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id7', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id7}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id7}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{changeId}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 7",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id8', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id8}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id8}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{changeId}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 8",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id9', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id9}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id9}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{changeId}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 9",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id10', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id10}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id10}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{changeId}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 10",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id11', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id11}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id11}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{changeId}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Gets the event count.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
															"const retryRequest = eval(retryRequestCall.retryRequest);",
															"",
															"var response = pm.response;",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", asyncTest(async function () {",
															"    if(response.json() === 0) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.json() > 0;        ",
															"        }, \"Retrying request\");",
															"    }",
															"    pm.expect(response.json() > 0);",
															"}));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", \"true\");",
															"pm.environment.set(\"limit\", \"10\");",
															"",
															"const url = `${pm.environment.get(\"baseurl_dc1\")}/bus/1/${pm.environment.get(\"subscription\")}/size?partitioned=${pm.environment.get(\"partitioned\")}&limit=${pm.environment.get(\"limit\")}`;",
															"pm.environment.set(\"url\", url);",
															"pm.environment.set(\"method\", \"GET\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}/size?partitioned={{partitioned}}&limit={{limit}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}",
														"size"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														},
														{
															"key": "limit",
															"value": "{{limit}}"
														}
													]
												},
												"description": "Returns a long."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription/size?partitioned={{partitioned}}&limit={{limit}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription",
																"size"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																},
																{
																	"key": "limit",
																	"value": "{{limit}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Gets the claim count.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json() === 0);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}/claimcount?partitioned={{partitioned}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}",
														"claimcount"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														}
													]
												},
												"description": "Returns a long."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription/claimcount?partitioned={{partitioned}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription",
																"claimcount"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "poll operation.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
															"const retryRequest = eval(retryRequestCall.retryRequest);",
															"",
															"var response = pm.response;",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", asyncTest(async function () {",
															"    if(response.json().length < 1) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();            ",
															"            return response.json().length > 0;",
															"        },\"Retrying to get events to poll\");  ",
															"        const jsonData = response.json();",
															"        pm.expect(jsonData.length > 0);",
															"        pm.expect(jsonData[0]).to.have.keys(\"eventKey\", \"content\", \"tags\");",
															"        pm.expect(jsonData[0].content).to.have.keys(\"test_delta\",\"test_table\",\"customer\",\"~id\",\"~table\",\"~version\",\"~signature\",\"~deleted\",\"~firstUpdateAt\",\"~lastUpdateAt\",\"~lastMutateAt\");",
															"    }",
															"",
															"    if(response.json().length < 1) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.json().length > 0;",
															"        }, \"Retrying until there no events to poll\");",
															"    }",
															"    pm.expect(response.json().length).to.be.above(0);",
															"}));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"ttl\", \"20\");",
															"pm.environment.set(\"limit\", \"5\");",
															"pm.environment.set(\"ignoreLongPoll\", \"true\");",
															"pm.environment.set(\"includeTags\", \"true\");",
															"",
															"const url = `${pm.environment.get(\"baseurl_dc1\")}/bus/1/${pm.environment.get(\"subscription\")}/poll?ttl=${pm.environment.get(\"ttl\")}&limit=${pm.environment.get(\"limit\")}&ignoreLongPoll=${pm.environment.get(\"ignoreLongPoll\")}&includeTags=${pm.environment.get(\"includeTags\")}`;",
															"pm.environment.set(\"url\", url);",
															"pm.environment.set(\"method\", \"GET\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}/poll?ttl={{ttl}}&limit={{limit}}&ignoreLongPoll={{ignoreLongPoll}}&includeTags={{includeTags}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}",
														"poll"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "ttl",
															"value": "{{ttl}}"
														},
														{
															"key": "limit",
															"value": "{{limit}}"
														},
														{
															"key": "ignoreLongPoll",
															"value": "{{ignoreLongPoll}}"
														},
														{
															"key": "includeTags",
															"value": "{{includeTags}}"
														}
													]
												},
												"description": "Returns a Response."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription/poll?partitioned={{partitioned}}&ttl={{ttl}}&limit={{limit}}&ignoreLongPoll={{ignoreLongPoll}}&includeTags={{includeTags}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription",
																"poll"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																},
																{
																	"key": "ttl",
																	"value": "{{ttl}}"
																},
																{
																	"key": "limit",
																	"value": "{{limit}}"
																},
																{
																	"key": "ignoreLongPoll",
																	"value": "{{ignoreLongPoll}}"
																},
																{
																	"key": "includeTags",
																	"value": "{{includeTags}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Gets the claim count.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
															"const retryRequest = eval(retryRequestCall.retryRequest);",
															"",
															"var response = pm.response;",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", asyncTest(async function () {    ",
															"    if(response.json() === 0) {        ",
															"        await waitUntil(setTimeout, clearTimeout, async () => {           ",
															"            response = await retryRequest();",
															"            return response.json() > 0;",
															"        }, \"Retrying request\");",
															"    }",
															"    pm.expect(response.json() > 0);",
															"}));",
															" "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", \"true\");",
															"",
															"const url = `${pm.environment.get(\"baseurl_dc1\")}/bus/1/${pm.environment.get(\"subscription\")}/claimcount?partitioned=${pm.environment.get(\"partitioned\")}`;",
															"pm.environment.set(\"url\", url);",
															"pm.environment.set(\"method\", \"GET\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}/claimcount?partitioned={{partitioned}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}",
														"claimcount"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														}
													]
												},
												"description": "Returns a long."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription/claimcount?partitioned={{partitioned}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription",
																"claimcount"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Unsubscribe operation.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
															"const retryRequest = eval(retryRequestCall.retryRequest);",
															"",
															"var response = pm.response;",
															"pm.test(\"Status code is 200\", asyncTest(async function () {",
															"    if(pm.response.status !== 200) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.code === 200;",
															"        }, \"Error retrying unsubscribe checking status \");",
															"    }",
															"    pm.expect(response).to.have.status(200);",
															"}));",
															"",
															"pm.test(\"Successful DELETE request\", asyncTest(async function () {",
															"    if(pm.response.status !== 200) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.code === 200;",
															"        }, \"Error retrying unsubscribe checking success\");",
															"    }",
															"    pm.expect(response.json().success).eql(true);",
															"}));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", \"true\");",
															"",
															"const url = `${pm.environment.get(\"baseurl_dc1\")}/bus/1/${pm.environment.get(\"subscription\")}?partitioned=${pm.environment.get(\"partitioned\")}`;",
															"pm.environment.set(\"url\", url);",
															"pm.environment.set(\"method\", \"DELETE\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}?partitioned={{partitioned}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														}
													]
												},
												"description": "Returns an Iterator of Subscription."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription?partitioned={{partitioned}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Drops a table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Successful DELETE request\", function () {",
															"    pm.expect(pm.response.json().success).eql(true);    ",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"audit\", \"comment:'remove+table'\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'remove+table'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "comment:'remove+table'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is dropped"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/_table/:table?audit={{audit}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "{{audit}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Request with access to poll unclaimed events without parameters",
									"item": [
										{
											"name": "Creates a table",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('table', 'postman_'+uuid.v4());",
															"",
															"pm.environment.set(\"options\", \"placement:'ugc_global:ugc'\");",
															"pm.environment.set(\"audit\", \"comment:'initial+provisioning'\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Successful PUT request\", function () {",
															"    pm.expect(pm.response.json().success).eql(true);    ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options={{options}}&audit={{audit}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "{{options}}"
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is created"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options={{options}}&audit={{audit}}",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "options",
																	"value": "{{options}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Subscribe operation.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('subscription', 'postman_'+uuid.v4()+'_test_subscription');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json().success).eql(true);    ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-condition"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "intrinsic(\"~table\":\"{{table}}\")"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}?ttl={{ttl}}&eventTtl={{eventTtl}}&ignoreSuppressedEvents={{ignoreSuppressedEvents}}&includeDefaultJoinFilter={{includeDefaultJoinFilter}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													],
													"query": [
														{
															"key": "ttl",
															"value": "{{ttl}}"
														},
														{
															"key": "eventTtl",
															"value": "{{eventTtl}}"
														},
														{
															"key": "ignoreSuppressedEvents",
															"value": "{{ignoreSuppressedEvents}}"
														},
														{
															"key": "includeDefaultJoinFilter",
															"value": "{{includeDefaultJoinFilter}}"
														}
													]
												},
												"description": "Returns a SuccessResponse."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription?ttl={{ttl}}&eventTtl={{eventTtl}}&ignoreSuppressedEvents={{ignoreSuppressedEvents}}&includeDefaultJoinFilter={{includeDefaultJoinFilter}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"query": [
																{
																	"key": "ttl",
																	"value": "{{ttl}}"
																},
																{
																	"key": "eventTtl",
																	"value": "{{eventTtl}}"
																},
																{
																	"key": "ignoreSuppressedEvents",
																	"value": "{{ignoreSuppressedEvents}}"
																},
																{
																	"key": "includeDefaultJoinFilter",
																	"value": "{{includeDefaultJoinFilter}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id1', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id1}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id1}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id2', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id2}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id2}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id3', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id3}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id3}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id4', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id4}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id4}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 4",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id5', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id5}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id5}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 5",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id6', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id6}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id6}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 6",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id7', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id7}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id7}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 7",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id8', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id8}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id8}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 8",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id9', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id9}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id9}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 9",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id10', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id10}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id10}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 10",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id11', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id11}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id11}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Gets the claim count.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.to.have.body('0'));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}/claimcount?partitioned={{partitioned}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}",
														"claimcount"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														}
													]
												},
												"description": "Returns a long."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription/claimcount?partitioned={{partitioned}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription",
																"claimcount"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "poll operation.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
															"const retryRequest = eval(retryRequestCall.retryRequest);",
															"",
															"var response = pm.response;",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", asyncTest(async function () {",
															"    if(response.json().length != 10) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();            ",
															"            return response.json().length == 10;",
															"        },\"Retrying to get events to poll\");    ",
															"    pm.expect(response.json().length == 10);",
															"    pm.expect(response.json()[0]).to.have.keys(\"eventKey\", \"content\");",
															"    pm.expect(response.json()[0].content).to.have.keys(\"test_delta\",\"test_table\",\"customer\",\"~id\",\"~table\",\"~version\",\"~signature\",\"~deleted\",\"~firstUpdateAt\",\"~lastUpdateAt\",\"~lastMutateAt\");",
															"    }    ",
															"    if(response.json().length == 10) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.json().length === 0;",
															"        }, \"Retrying until there no events to poll\");",
															"    }",
															"    pm.expect(response.json().length).to.be.eql(0);",
															"}));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", \"true\");",
															"pm.environment.set(\"ttl\", \"30\");",
															"pm.environment.set(\"limit\", \"10\");",
															"pm.environment.set(\"ignoreLongPoll\", \"false\");",
															"pm.environment.set(\"includeTags\", \"false\");",
															"",
															"const url = `${pm.environment.get(\"baseurl_dc1\")}/bus/1/${pm.environment.get(\"subscription\")}/poll`;",
															"pm.environment.set(\"url\", url);",
															"pm.environment.set(\"method\", \"GET\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}/poll",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}",
														"poll"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "true",
															"disabled": true
														},
														{
															"key": "ttl",
															"value": "30",
															"disabled": true
														},
														{
															"key": "limit",
															"value": "10",
															"disabled": true
														},
														{
															"key": "ignoreLongPoll",
															"value": "false",
															"disabled": true
														},
														{
															"key": "includeTags",
															"value": "false",
															"disabled": true
														}
													]
												},
												"description": "Returns a Response."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription/poll?partitioned={{partitioned}}&ttl={{ttl}}&limit={{limit}}&ignoreLongPoll={{ignoreLongPoll}}&includeTags={{includeTags}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription",
																"poll"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																},
																{
																	"key": "ttl",
																	"value": "{{ttl}}"
																},
																{
																	"key": "limit",
																	"value": "{{limit}}"
																},
																{
																	"key": "ignoreLongPoll",
																	"value": "{{ignoreLongPoll}}"
																},
																{
																	"key": "includeTags",
																	"value": "{{includeTags}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Gets the claim count.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
															"const retryRequest = eval(retryRequestCall.retryRequest);",
															"",
															"var response = pm.response;",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", asyncTest(async function () {",
															"    if(!response.json() > 0) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();            ",
															"            return response.json() > 0;",
															"        }, \"Retrying request\");",
															"    }",
															"    pm.expect(response.json()).to.be.above(0);    ",
															"}));",
															" "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", \"true\");",
															"",
															"const url = `${pm.environment.get(\"baseurl_dc1\")}/bus/1/${pm.environment.get(\"subscription\")}/claimcount?partitioned=${pm.environment.get(\"partitioned\")}`;",
															"pm.environment.set(\"url\", url);",
															"pm.environment.set(\"method\", \"GET\");",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}/claimcount?partitioned={{partitioned}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}",
														"claimcount"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														}
													]
												},
												"description": "Returns a long."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription/claimcount?partitioned={{partitioned}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription",
																"claimcount"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Unsubscribe operation.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
															"const retryRequest = eval(retryRequestCall.retryRequest);",
															"",
															"var response = pm.response;",
															"pm.test(\"Status code is 200\", asyncTest(async function () {",
															"    if(pm.response.status !== 200) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.code === 200;",
															"        }, \"Error retrying unsubscribe checking status \");",
															"    }",
															"    pm.expect(response).to.have.status(200);",
															"}));",
															"",
															"pm.test(\"Successful DELETE request\", asyncTest(async function () {",
															"    if(pm.response.status !== 200) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.code === 200;",
															"        }, \"Error retrying unsubscribe checking success\");",
															"    }",
															"    pm.expect(response.json().success).eql(true);",
															"}));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", \"true\");",
															"",
															"const url = `${pm.environment.get(\"baseurl_dc1\")}/bus/1/${pm.environment.get(\"subscription\")}?partitioned=${pm.environment.get(\"partitioned\")}`;",
															"pm.environment.set(\"url\", url);",
															"pm.environment.set(\"method\", \"DELETE\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}?partitioned={{partitioned}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														}
													]
												},
												"description": "Returns an Iterator of Subscription."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription?partitioned={{partitioned}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Drops a table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Successful DELETE request\", function () {",
															"    pm.expect(pm.response.json().success).eql(true); ",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"audit\", \"comment:'remove+table'\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit={{audit}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "{{audit}}"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is dropped"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/_table/:table?audit={{audit}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "{{audit}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Request with access to poll unclaimed events from 2 subscriptions",
									"item": [
										{
											"name": "Creates a table",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('table', 'postman_'+uuid.v4());",
															"",
															"pm.environment.set(\"options\", \"placement:'ugc_global:ugc'\");",
															"pm.environment.set(\"audit\", \"comment:'initial+provisioning'\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Successful PUT request\", function () {",
															"    pm.expect(pm.response.json().success).eql(true); ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options={{options}}&audit={{audit}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "{{options}}"
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is created"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options={{options}}&audit={{audit}}",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "options",
																	"value": "{{options}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates a table 1",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('table1', 'postman_'+uuid.v4());",
															"",
															"pm.environment.set(\"options\", \"placement:'ugc_global:ugc'\");",
															"pm.environment.set(\"audit\", \"comment:'initial+provisioning'\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Successful PUT request\", function () {",
															"    pm.expect(pm.response.json().success).eql(true); ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table1}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table1}}?options={{options}}&audit={{audit}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table1}}"
													],
													"query": [
														{
															"key": "options",
															"value": "{{options}}"
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is created"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options={{options}}&audit={{audit}}",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "options",
																	"value": "{{options}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Subscribe operation.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('subscription', 'postman_'+uuid.v4()+'_test_subscription');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"   pm.expect(pm.response.json().success).eql(true); ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-condition"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "intrinsic(\"~table\":\"{{table}}\")"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}?ttl={{ttl}}&eventTtl={{eventTtl}}&ignoreSuppressedEvents={{ignoreSuppressedEvents}}&includeDefaultJoinFilter={{includeDefaultJoinFilter}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													],
													"query": [
														{
															"key": "ttl",
															"value": "{{ttl}}"
														},
														{
															"key": "eventTtl",
															"value": "{{eventTtl}}"
														},
														{
															"key": "ignoreSuppressedEvents",
															"value": "{{ignoreSuppressedEvents}}"
														},
														{
															"key": "includeDefaultJoinFilter",
															"value": "{{includeDefaultJoinFilter}}"
														}
													]
												},
												"description": "Returns a SuccessResponse."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription?ttl={{ttl}}&eventTtl={{eventTtl}}&ignoreSuppressedEvents={{ignoreSuppressedEvents}}&includeDefaultJoinFilter={{includeDefaultJoinFilter}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"query": [
																{
																	"key": "ttl",
																	"value": "{{ttl}}"
																},
																{
																	"key": "eventTtl",
																	"value": "{{eventTtl}}"
																},
																{
																	"key": "ignoreSuppressedEvents",
																	"value": "{{ignoreSuppressedEvents}}"
																},
																{
																	"key": "includeDefaultJoinFilter",
																	"value": "{{includeDefaultJoinFilter}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Subscribe operation 1",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('subscription1', 'postman_'+uuid.v4()+'_test_subscription');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json().success).eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-condition"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "intrinsic(\"~table\":\"{{table1}}\")"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription1}}?ttl={{ttl}}&eventTtl={{eventTtl}}&ignoreSuppressedEvents={{ignoreSuppressedEvents}}&includeDefaultJoinFilter={{includeDefaultJoinFilter}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription1}}"
													],
													"query": [
														{
															"key": "ttl",
															"value": "{{ttl}}"
														},
														{
															"key": "eventTtl",
															"value": "{{eventTtl}}"
														},
														{
															"key": "ignoreSuppressedEvents",
															"value": "{{ignoreSuppressedEvents}}"
														},
														{
															"key": "includeDefaultJoinFilter",
															"value": "{{includeDefaultJoinFilter}}"
														}
													]
												},
												"description": "Returns a SuccessResponse."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription?ttl={{ttl}}&eventTtl={{eventTtl}}&ignoreSuppressedEvents={{ignoreSuppressedEvents}}&includeDefaultJoinFilter={{includeDefaultJoinFilter}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"query": [
																{
																	"key": "ttl",
																	"value": "{{ttl}}"
																},
																{
																	"key": "eventTtl",
																	"value": "{{eventTtl}}"
																},
																{
																	"key": "ignoreSuppressedEvents",
																	"value": "{{ignoreSuppressedEvents}}"
																},
																{
																	"key": "includeDefaultJoinFilter",
																	"value": "{{includeDefaultJoinFilter}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json().length === 1);",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 1.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json().length === 1);",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"",
															"});",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id1', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table1}}/{{document_id1}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table1}}",
														"{{document_id1}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id1}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "poll operation.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
															"const retryRequest = eval(retryRequestCall.retryRequest);",
															"",
															"var response = pm.response;",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", asyncTest(async function () {",
															"    if(response.json().length === 0) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();            ",
															"            return response.json().length > 0;",
															"        },\"Retrying to get events to poll\");",
															"",
															"    var jsonData = response.json();          ",
															"    pm.expect(jsonData.length > 0);",
															"    pm.expect(jsonData[0]).to.have.keys(\"eventKey\", \"content\");",
															"    pm.expect(jsonData[0].content).to.have.keys(\"test_delta\",\"test_table\",\"customer\",\"~id\",\"~table\",\"~version\",\"~signature\",\"~deleted\",\"~firstUpdateAt\",\"~lastUpdateAt\",\"~lastMutateAt\");",
															"    }    ",
															"    if(response.json().length > 0) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.json().length === 0;",
															"        }, \"Retrying until there no events to poll\");",
															"    }",
															"    jsonData = response.json(); ",
															"    pm.expect(jsonData.length).to.eql(0);",
															"}));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", \"true\");",
															"pm.environment.set(\"ttl\", \"30\");",
															"pm.environment.set(\"limit\", \"10\");",
															"pm.environment.set(\"ignoreLongPoll\", \"false\");",
															"pm.environment.set(\"includeTags\", \"false\");",
															"",
															"const url = `${pm.environment.get(\"baseurl_dc1\")}/bus/1/${pm.environment.get(\"subscription\")}/poll?partitioned=${pm.environment.get(\"partitioned\")}&ttl=${pm.environment.get(\"ttl\")}&limit=${pm.environment.get(\"limit\")}&ignoreLongPoll=${pm.environment.get(\"ignoreLongPoll\")}&includeTags=${pm.environment.get(\"includeTags\")}`;",
															"pm.environment.set(\"url\", url);",
															"pm.environment.set(\"method\", \"GET\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}/poll?partitioned={{partitioned}}&ttl={{ttl}}&limit={{limit}}&ignoreLongPoll={{ignoreLongPoll}}&includeTags={{includeTags}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}",
														"poll"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														},
														{
															"key": "ttl",
															"value": "{{ttl}}"
														},
														{
															"key": "limit",
															"value": "{{limit}}"
														},
														{
															"key": "ignoreLongPoll",
															"value": "{{ignoreLongPoll}}"
														},
														{
															"key": "includeTags",
															"value": "{{includeTags}}"
														}
													]
												},
												"description": "Returns a Response."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription/poll?partitioned={{partitioned}}&ttl={{ttl}}&limit={{limit}}&ignoreLongPoll={{ignoreLongPoll}}&includeTags={{includeTags}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription",
																"poll"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																},
																{
																	"key": "ttl",
																	"value": "{{ttl}}"
																},
																{
																	"key": "limit",
																	"value": "{{limit}}"
																},
																{
																	"key": "ignoreLongPoll",
																	"value": "{{ignoreLongPoll}}"
																},
																{
																	"key": "includeTags",
																	"value": "{{includeTags}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "poll operation 1.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
															"const retryRequest = eval(retryRequestCall.retryRequest);",
															"",
															"var response = pm.response;",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", asyncTest(async function () {",
															"    if(response.json().length === 0) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();      ",
															"            return response.json().length > 0;",
															"        },\"Retrying to get events to poll\");  ",
															"    ",
															"    var jsonData = response.json();  ",
															"    pm.expect(jsonData.length).to.be.above(0);",
															"    pm.expect(jsonData[0]).to.have.keys(\"eventKey\", \"content\");",
															"    pm.expect(jsonData[0].content).to.have.keys(\"test_delta\",\"test_table\",\"customer\",\"~id\",\"~table\",\"~version\",\"~signature\",\"~deleted\",\"~firstUpdateAt\",\"~lastUpdateAt\",\"~lastMutateAt\");",
															"    }",
															"",
															"    if(response.json().length > 0) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.json().length === 0;",
															"        }, \"Retrying until there no events to poll\");",
															"    }",
															"    jsonData = response.json(); ",
															"    pm.expect(jsonData.length).to.eql(0);",
															"}));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", \"true\");",
															"pm.environment.set(\"ttl\", \"30\");",
															"pm.environment.set(\"limit\", \"10\");",
															"pm.environment.set(\"ignoreLongPoll\", \"false\");",
															"pm.environment.set(\"includeTags\", \"false\");",
															"",
															"const url = `${pm.environment.get(\"baseurl_dc1\")}/bus/1/${pm.environment.get(\"subscription1\")}/poll?partitioned=${pm.environment.get(\"partitioned\")}&ttl=${pm.environment.get(\"ttl\")}&limit=${pm.environment.get(\"limit\")}&ignoreLongPoll=${pm.environment.get(\"ignoreLongPoll\")}&includeTags=${pm.environment.get(\"includeTags\")}`;",
															"pm.environment.set(\"url\", url);",
															"pm.environment.set(\"method\", \"GET\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription1}}/poll?partitioned={{partitioned}}&ttl={{ttl}}&limit={{limit}}&ignoreLongPoll={{ignoreLongPoll}}&includeTags={{includeTags}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription1}}",
														"poll"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														},
														{
															"key": "ttl",
															"value": "{{ttl}}"
														},
														{
															"key": "limit",
															"value": "{{limit}}"
														},
														{
															"key": "ignoreLongPoll",
															"value": "{{ignoreLongPoll}}"
														},
														{
															"key": "includeTags",
															"value": "{{includeTags}}"
														}
													]
												},
												"description": "Returns a Response."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription/poll?partitioned={{partitioned}}&ttl={{ttl}}&limit={{limit}}&ignoreLongPoll={{ignoreLongPoll}}&includeTags={{includeTags}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription",
																"poll"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																},
																{
																	"key": "ttl",
																	"value": "{{ttl}}"
																},
																{
																	"key": "limit",
																	"value": "{{limit}}"
																},
																{
																	"key": "ignoreLongPoll",
																	"value": "{{ignoreLongPoll}}"
																},
																{
																	"key": "includeTags",
																	"value": "{{includeTags}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Unsubscribe operation.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
															"const retryRequest = eval(retryRequestCall.retryRequest);",
															"",
															"var response = pm.response;",
															"pm.test(\"Status code is 200\", asyncTest(async function () {",
															"    if(pm.response.status !== 200) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.code === 200;",
															"        }, \"Error retrying unsubscribe checking status \");",
															"    }",
															"    pm.expect(response).to.have.status(200);",
															"}));",
															"",
															"pm.test(\"Successful DELETE request\", asyncTest(async function () {",
															"    if(pm.response.status !== 200) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.code === 200;",
															"        }, \"Error retrying unsubscribe checking success\");",
															"    }",
															"    pm.expect(response.json().success).eql(true);",
															"}));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", \"true\");",
															"",
															"const url = `${pm.environment.get(\"baseurl_dc1\")}/bus/1/${pm.environment.get(\"subscription\")}?partitioned=${pm.environment.get(\"partitioned\")}`;",
															"pm.environment.set(\"url\", url);",
															"pm.environment.set(\"method\", \"DELETE\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}?partitioned={{partitioned}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														}
													]
												},
												"description": "Returns an Iterator of Subscription."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription?partitioned={{partitioned}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Unsubscribe operation 1.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
															"const retryRequest = eval(retryRequestCall.retryRequest);",
															"",
															"var response = pm.response;",
															"pm.test(\"Status code is 200\", asyncTest(async function () {",
															"    if(pm.response.status !== 200) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.code === 200;",
															"        }, \"Error retrying unsubscribe checking status \");",
															"    }",
															"    pm.expect(response).to.have.status(200);",
															"}));",
															"",
															"pm.test(\"Successful DELETE request\", asyncTest(async function () {",
															"    if(pm.response.status !== 200) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.code === 200;",
															"        }, \"Error retrying unsubscribe checking success\");",
															"    }",
															"    pm.expect(response.json().success).eql(true);",
															"}));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", \"true\");",
															"",
															"const url = `${pm.environment.get(\"baseurl_dc1\")}/bus/1/${pm.environment.get(\"subscription1\")}?partitioned=${pm.environment.get(\"partitioned\")}`;",
															"pm.environment.set(\"url\", url);",
															"pm.environment.set(\"method\", \"DELETE\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription1}}?partitioned={{partitioned}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription1}}"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														}
													]
												},
												"description": "Returns an Iterator of Subscription."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription?partitioned={{partitioned}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Drops a table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Successful DELETE request\", function () {",
															"    pm.expect(pm.response.json().success).eql(true); ",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"audit\", \"comment:'remove+table'\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit={{audit}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "{{audit}}"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is dropped"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/_table/:table?audit={{audit}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "{{audit}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Drops a table 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Successful DELETE request\", function () {",
															"    pm.expect(pm.response.json().success).eql(true); ",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"audit\", \"comment:'remove+table'\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table1}}?audit={{audit}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table1}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "{{audit}}"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is dropped"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/_table/:table?audit={{audit}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "{{audit}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Request with access to poll unclaimed events with partititoned=false, limit=11, includeTags=true parameters",
									"item": [
										{
											"name": "Creates a table",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('table', 'postman_'+uuid.v4());",
															"",
															"pm.environment.set(\"options\", \"placement:'ugc_global:ugc'\");",
															"pm.environment.set(\"audit\", \"comment:'initial+provisioning'\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Successful PUT request\", function () {",
															"    pm.expect(pm.response.json().success).eql(true); ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options={{options}}&audit={{audit}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "{{options}}"
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is created"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options={{options}}&audit={{audit}}",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "options",
																	"value": "{{options}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Subscribe operation.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('subscription', 'postman_'+uuid.v4()+'_test_subscription');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"   pm.expect(pm.response.json().success).eql(true); ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-condition"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "intrinsic(\"~table\":\"{{table}}\")"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}?ttl={{ttl}}&eventTtl={{eventTtl}}&ignoreSuppressedEvents={{ignoreSuppressedEvents}}&includeDefaultJoinFilter={{includeDefaultJoinFilter}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													],
													"query": [
														{
															"key": "ttl",
															"value": "{{ttl}}"
														},
														{
															"key": "eventTtl",
															"value": "{{eventTtl}}"
														},
														{
															"key": "ignoreSuppressedEvents",
															"value": "{{ignoreSuppressedEvents}}"
														},
														{
															"key": "includeDefaultJoinFilter",
															"value": "{{includeDefaultJoinFilter}}"
														}
													]
												},
												"description": "Returns a SuccessResponse."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription?ttl={{ttl}}&eventTtl={{eventTtl}}&ignoreSuppressedEvents={{ignoreSuppressedEvents}}&includeDefaultJoinFilter={{includeDefaultJoinFilter}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"query": [
																{
																	"key": "ttl",
																	"value": "{{ttl}}"
																},
																{
																	"key": "eventTtl",
																	"value": "{{eventTtl}}"
																},
																{
																	"key": "ignoreSuppressedEvents",
																	"value": "{{ignoreSuppressedEvents}}"
																},
																{
																	"key": "includeDefaultJoinFilter",
																	"value": "{{includeDefaultJoinFilter}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id1', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id1}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id1}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id2', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id2}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id2}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id3', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id3}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id3}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id4', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id4}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id4}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 4",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id5', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id5}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id5}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 5",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id6', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id6}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id6}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 6",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id7', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id7}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id7}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 7",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id8', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id8}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id8}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 8",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id9', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id9}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id9}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 9",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id10', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id10}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id10}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 10",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id11', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id11}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id11}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Gets the event count.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
															"const retryRequest = eval(retryRequestCall.retryRequest);",
															"",
															"var response = pm.response;",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", asyncTest(async function () {",
															"    if(response.json() === 0) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.json() > 0;        ",
															"        }, \"Retrying request\");",
															"    }",
															"    pm.expect(response.json()).to.be.above(0);",
															"}));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", \"true\");",
															"pm.environment.set(\"limit\", \"10\");",
															"",
															"const url = `${pm.environment.get(\"baseurl_dc1\")}/bus/1/${pm.environment.get(\"subscription\")}/size?partitioned=${pm.environment.get(\"partitioned\")}&limit=${pm.environment.get(\"limit\")}`;",
															"pm.environment.set(\"url\", url);",
															"pm.environment.set(\"method\", \"GET\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}/size?partitioned={{partitioned}}&limit={{limit}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}",
														"size"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														},
														{
															"key": "limit",
															"value": "{{limit}}"
														}
													]
												},
												"description": "Returns a long."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription/size?partitioned={{partitioned}}&limit={{limit}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription",
																"size"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																},
																{
																	"key": "limit",
																	"value": "{{limit}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Gets the claim count.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.to.have.body('0'));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}/claimcount?partitioned={{partitioned}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}",
														"claimcount"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														}
													]
												},
												"description": "Returns a long."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription/claimcount?partitioned={{partitioned}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription",
																"claimcount"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "poll operation.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
															"const retryRequest = eval(retryRequestCall.retryRequest);",
															"",
															"var response = pm.response;",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", asyncTest(async function () {",
															"    if(response.json().length < 1) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();            ",
															"            return response.json().length > 0;",
															"        },\"Retrying to get events to poll\");    ",
															"    }",
															"",
															"    pm.expect(response.json().length > 0);",
															"    pm.expect(response.json()[0]).to.have.keys(\"eventKey\", \"content\", \"tags\");",
															"    pm.expect(response.json()[0].content).to.have.keys(\"test_delta\",\"test_table\",\"customer\",\"~id\",\"~table\",\"~version\",\"~signature\",\"~deleted\",\"~firstUpdateAt\",\"~lastUpdateAt\",\"~lastMutateAt\");",
															"",
															"    if(response.json().length > 0) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();            ",
															"            return response.json().length < 1;",
															"        }, \"Retrying until there no events to poll\");",
															"    }",
															"    pm.expect(response.json().length).to.eql(0);",
															"}));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", \"false\");",
															"pm.environment.set(\"ttl\", \"35\");",
															"pm.environment.set(\"limit\", \"11\");",
															"pm.environment.set(\"ignoreLongPoll\", \"false\");",
															"pm.environment.set(\"includeTags\", \"true\");",
															"",
															"const url = `${pm.environment.get(\"baseurl_dc1\")}/bus/1/${pm.environment.get(\"subscription\")}/poll?partitioned=${pm.environment.get(\"partitioned\")}&ttl=${pm.environment.get(\"ttl\")}&limit=${pm.environment.get(\"limit\")}&ignoreLongPoll=${pm.environment.get(\"ignoreLongPoll\")}&includeTags=${pm.environment.get(\"includeTags\")}`;",
															"pm.environment.set(\"url\", url);",
															"pm.environment.set(\"method\", \"GET\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}/poll?partitioned={{partitioned}}&ttl={{ttl}}&limit={{limit}}&ignoreLongPoll={{ignoreLongPoll}}&includeTags={{includeTags}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}",
														"poll"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														},
														{
															"key": "ttl",
															"value": "{{ttl}}"
														},
														{
															"key": "limit",
															"value": "{{limit}}"
														},
														{
															"key": "ignoreLongPoll",
															"value": "{{ignoreLongPoll}}"
														},
														{
															"key": "includeTags",
															"value": "{{includeTags}}"
														}
													]
												},
												"description": "Returns a Response."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription/poll?partitioned={{partitioned}}&ttl={{ttl}}&limit={{limit}}&ignoreLongPoll={{ignoreLongPoll}}&includeTags={{includeTags}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription",
																"poll"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																},
																{
																	"key": "ttl",
																	"value": "{{ttl}}"
																},
																{
																	"key": "limit",
																	"value": "{{limit}}"
																},
																{
																	"key": "ignoreLongPoll",
																	"value": "{{ignoreLongPoll}}"
																},
																{
																	"key": "includeTags",
																	"value": "{{includeTags}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Gets the claim count.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
															"const retryRequest = eval(retryRequestCall.retryRequest);",
															"",
															"var response = pm.response;",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", asyncTest(async function () {",
															"    if(!response.json() > 0) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.json() > 0;",
															"        }, \"Retrying request\");",
															"    }    ",
															"    pm.expect(response.json()) > 0;",
															"}));",
															" "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", \"true\");",
															"",
															"const url = `${pm.environment.get(\"baseurl_dc1\")}/bus/1/${pm.environment.get(\"subscription\")}/claimcount?partitioned=${pm.environment.get(\"partitioned\")}`;",
															"pm.environment.set(\"url\", url);",
															"pm.environment.set(\"method\", \"GET\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}/claimcount?partitioned={{partitioned}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}",
														"claimcount"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														}
													]
												},
												"description": "Returns a long."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription/claimcount?partitioned={{partitioned}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription",
																"claimcount"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Unsubscribe operation.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
															"const retryRequest = eval(retryRequestCall.retryRequest);",
															"",
															"var response = pm.response;",
															"pm.test(\"Status code is 200\", asyncTest(async function () {",
															"    if(pm.response.status !== 200) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.code === 200;",
															"        }, \"Error retrying unsubscribe checking status \");",
															"    }",
															"    pm.expect(response).to.have.status(200);",
															"}));",
															"",
															"pm.test(\"Successful DELETE request\", asyncTest(async function () {",
															"    if(pm.response.status !== 200) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.code === 200;",
															"        }, \"Error retrying unsubscribe checking success\");",
															"    }",
															"    pm.expect(response.json().success).eql(true);",
															"}));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", \"true\");",
															"",
															"const url = `${pm.environment.get(\"baseurl_dc1\")}/bus/1/${pm.environment.get(\"subscription\")}?partitioned=${pm.environment.get(\"partitioned\")}`;",
															"pm.environment.set(\"url\", url);",
															"pm.environment.set(\"method\", \"DELETE\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}?partitioned={{partitioned}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														}
													]
												},
												"description": "Returns an Iterator of Subscription."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription?partitioned={{partitioned}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Drops a table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Successful DELETE request\", function () {",
															"    pm.expect(pm.response.json().success).eql(true);    ",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"audit\", \"comment:'remove+table'\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit={{audit}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "{{audit}}"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is dropped"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/_table/:table?audit={{audit}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "{{audit}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Request with api-key without access to poll",
									"item": [
										{
											"name": "poll operation.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json().reason).to.be.eql('not authorized');",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", \"true\");",
															"pm.environment.set(\"ttl\", \"30\");",
															"pm.environment.set(\"limit\", \"10\");",
															"pm.environment.set(\"ignoreLongPoll\", \"false\");",
															"pm.environment.set(\"includeTags\", \"false\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key_no_rights}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}/poll?partitioned={{partitioned}}&ttl={{ttl}}&limit={{limit}}&ignoreLongPoll={{ignoreLongPoll}}&includeTags={{includeTags}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}",
														"poll"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														},
														{
															"key": "ttl",
															"value": "{{ttl}}"
														},
														{
															"key": "limit",
															"value": "{{limit}}"
														},
														{
															"key": "ignoreLongPoll",
															"value": "{{ignoreLongPoll}}"
														},
														{
															"key": "includeTags",
															"value": "{{includeTags}}"
														}
													]
												},
												"description": "Returns a Response."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription/poll?partitioned={{partitioned}}&ttl={{ttl}}&limit={{limit}}&ignoreLongPoll={{ignoreLongPoll}}&includeTags={{includeTags}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription",
																"poll"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																},
																{
																	"key": "ttl",
																	"value": "{{ttl}}"
																},
																{
																	"key": "limit",
																	"value": "{{limit}}"
																},
																{
																	"key": "ignoreLongPoll",
																	"value": "{{ignoreLongPoll}}"
																},
																{
																	"key": "includeTags",
																	"value": "{{includeTags}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "TC: Request to not existing subscription",
									"item": [
										{
											"name": "poll operation.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.be.empty;",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", \"true\");",
															"pm.environment.set(\"ttl\", \"30\");",
															"pm.environment.set(\"limit\", \"10\");",
															"pm.environment.set(\"ignoreLongPoll\", \"false\");",
															"pm.environment.set(\"includeTags\", \"false\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/not_existing_subscription/poll?partitioned={{partitioned}}&ttl={{ttl}}&limit={{limit}}&ignoreLongPoll={{ignoreLongPoll}}&includeTags={{includeTags}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"not_existing_subscription",
														"poll"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														},
														{
															"key": "ttl",
															"value": "{{ttl}}"
														},
														{
															"key": "limit",
															"value": "{{limit}}"
														},
														{
															"key": "ignoreLongPoll",
															"value": "{{ignoreLongPoll}}"
														},
														{
															"key": "includeTags",
															"value": "{{includeTags}}"
														}
													]
												},
												"description": "Returns a Response."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription/poll?partitioned={{partitioned}}&ttl={{ttl}}&limit={{limit}}&ignoreLongPoll={{ignoreLongPoll}}&includeTags={{includeTags}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription",
																"poll"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																},
																{
																	"key": "ttl",
																	"value": "{{ttl}}"
																},
																{
																	"key": "limit",
																	"value": "{{limit}}"
																},
																{
																	"key": "ignoreLongPoll",
																	"value": "{{ignoreLongPoll}}"
																},
																{
																	"key": "includeTags",
																	"value": "{{includeTags}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const retryRequest = () => {",
											"    return new Promise((resolve, reject) => {",
											"        pm.sendRequest({",
											"            url: `${pm.environment.get(\"url\")}`,",
											"            method: `${pm.environment.get(\"method\")}`,",
											"            header: {",
											"                \"X-BV-API-Key\": pm.environment.get(\"api_key\"),",
											"            }",
											"        }, (error, response) => {",
											"            if (error) {",
											"                reject(error);",
											"            }",
											"            resolve(response);",
											"        });",
											"    });",
											"};",
											"",
											"const retryRequestCall = {",
											"    retryRequest: retryRequest.toString()",
											"};",
											"",
											"pm.globals.set(\"retryRequestCall\", JSON.stringify(retryRequestCall));",
											"",
											"pm.environment.set(\"ttl\", \"86400\");",
											"pm.environment.set(\"eventTtl\", \"86400\");",
											"pm.environment.set(\"ignoreSuppressedEvents\", false);",
											"pm.environment.set(\"includeDefaultJoinFilter\", false);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Get size",
							"item": [
								{
									"name": "TC: Request with access rights to get size and without parameters to existing subscription",
									"item": [
										{
											"name": "Creates a table",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('table', 'postman_'+uuid.v4());",
															"",
															"pm.environment.set(\"options\", \"placement:'ugc_global:ugc'\");",
															"pm.environment.set(\"audit\", \"comment:'initial+provisioning'\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Successful PUT request\", function () {",
															"    pm.expect(pm.response.json().success).eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options={{options}}&audit={{audit}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "{{options}}"
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is created"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options={{options}}&audit={{audit}}",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "options",
																	"value": "{{options}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Subscribe operation.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('subscription', 'postman_'+uuid.v4()+'_test_subscription');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Successful PUT request\", function () {",
															"    pm.expect(pm.response.json().success).eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-condition"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "intrinsic(\"~table\":\"{{table}}\")"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}?ttl={{ttl}}&eventTtl={{eventTtl}}&ignoreSuppressedEvents={{ignoreSuppressedEvents}}&includeDefaultJoinFilter={{includeDefaultJoinFilter}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													],
													"query": [
														{
															"key": "ttl",
															"value": "{{ttl}}"
														},
														{
															"key": "eventTtl",
															"value": "{{eventTtl}}"
														},
														{
															"key": "ignoreSuppressedEvents",
															"value": "{{ignoreSuppressedEvents}}"
														},
														{
															"key": "includeDefaultJoinFilter",
															"value": "{{includeDefaultJoinFilter}}"
														}
													]
												},
												"description": "Returns a SuccessResponse."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription?ttl={{ttl}}&eventTtl={{eventTtl}}&ignoreSuppressedEvents={{ignoreSuppressedEvents}}&includeDefaultJoinFilter={{includeDefaultJoinFilter}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"query": [
																{
																	"key": "ttl",
																	"value": "{{ttl}}"
																},
																{
																	"key": "eventTtl",
																	"value": "{{eventTtl}}"
																},
																{
																	"key": "ignoreSuppressedEvents",
																	"value": "{{ignoreSuppressedEvents}}"
																},
																{
																	"key": "includeDefaultJoinFilter",
																	"value": "{{includeDefaultJoinFilter}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id1', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id1}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id1}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id2', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id2}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id2}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id3', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id3}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id3}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id4', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id4}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id4}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 4",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id5', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id5}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id5}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 5",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id6', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id6}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id6}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 6",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id7', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id7}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id7}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 7",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id8', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id8}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id8}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 8",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id9', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id9}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id9}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 9",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id10', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id10}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id10}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 10",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id11', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id11}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id11}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Gets the event count.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
															"const retryRequest = eval(retryRequestCall.retryRequest);",
															"",
															"var response = pm.response;",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", asyncTest(async function () {",
															"    if(response.json() === 0) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.json() > 0;",
															"        }, \"Retrying request\");",
															"    }",
															"    pm.expect(response.json() > 0);",
															"}));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const url = `${pm.environment.get(\"baseurl_dc1\")}/bus/1/${pm.environment.get(\"subscription\")}/size`;",
															"pm.environment.set(\"url\", url);",
															"pm.environment.set(\"method\", \"GET\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}/size",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}",
														"size"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "true",
															"disabled": true
														},
														{
															"key": "limit",
															"value": "10",
															"disabled": true
														}
													]
												},
												"description": "Returns a long."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription/size?partitioned={{partitioned}}&limit={{limit}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription",
																"size"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																},
																{
																	"key": "limit",
																	"value": "{{limit}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Unsubscribe operation.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
															"const retryRequest = eval(retryRequestCall.retryRequest);",
															"",
															"var response = pm.response;",
															"pm.test(\"Status code is 200\", asyncTest(async function () {",
															"    if(pm.response.status !== 200) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.code === 200;",
															"        }, \"Error retrying unsubscribe checking status \");",
															"    }",
															"    pm.expect(response).to.have.status(200);",
															"}));",
															"",
															"pm.test(\"Successful DELETE request\", asyncTest(async function () {",
															"    if(pm.response.status !== 200) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.code === 200;",
															"        }, \"Error retrying unsubscribe checking success\");",
															"    }",
															"    pm.expect(response.json().success).eql(true);",
															"}));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", \"true\");",
															"",
															"const url = `${pm.environment.get(\"baseurl_dc1\")}/bus/1/${pm.environment.get(\"subscription\")}?partitioned=${pm.environment.get(\"partitioned\")}`;",
															"pm.environment.set(\"url\", url);",
															"pm.environment.set(\"method\", \"DELETE\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}?partitioned={{partitioned}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														}
													]
												},
												"description": "Returns an Iterator of Subscription."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription?partitioned={{partitioned}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Drops a table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Successful DELETE request\", function () {",
															"    pm.expect(pm.response.json().success).eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"audit\", \"comment:'remove+table'\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit={{audit}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "{{audit}}"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is dropped"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/_table/:table?audit={{audit}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "{{audit}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Request with access rights to get size and without parameters to existing subscription and limit set=5",
									"item": [
										{
											"name": "Creates a table",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('table', 'postman_'+uuid.v4());",
															"",
															"pm.environment.set(\"options\", \"placement:'ugc_global:ugc'\");",
															"pm.environment.set(\"audit\", \"comment:'initial+provisioning'\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Successful PUT request\", function () {",
															"    pm.expect(pm.response.json().success).eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options={{options}}&audit={{audit}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "{{options}}"
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is created"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options={{options}}&audit={{audit}}",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "options",
																	"value": "{{options}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Subscribe operation.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('subscription', 'postman_'+uuid.v4()+'_test_subscription');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Successful PUT request\", function () {",
															"    pm.expect(pm.response.json().success).eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-condition"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "intrinsic(\"~table\":\"{{table}}\")"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}?ttl={{ttl}}&eventTtl={{eventTtl}}&ignoreSuppressedEvents={{ignoreSuppressedEvents}}&includeDefaultJoinFilter={{includeDefaultJoinFilter}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													],
													"query": [
														{
															"key": "ttl",
															"value": "{{ttl}}"
														},
														{
															"key": "eventTtl",
															"value": "{{eventTtl}}"
														},
														{
															"key": "ignoreSuppressedEvents",
															"value": "{{ignoreSuppressedEvents}}"
														},
														{
															"key": "includeDefaultJoinFilter",
															"value": "{{includeDefaultJoinFilter}}"
														}
													]
												},
												"description": "Returns a SuccessResponse."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription?ttl={{ttl}}&eventTtl={{eventTtl}}&ignoreSuppressedEvents={{ignoreSuppressedEvents}}&includeDefaultJoinFilter={{includeDefaultJoinFilter}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"query": [
																{
																	"key": "ttl",
																	"value": "{{ttl}}"
																},
																{
																	"key": "eventTtl",
																	"value": "{{eventTtl}}"
																},
																{
																	"key": "ignoreSuppressedEvents",
																	"value": "{{ignoreSuppressedEvents}}"
																},
																{
																	"key": "includeDefaultJoinFilter",
																	"value": "{{includeDefaultJoinFilter}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id1', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id1}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id1}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id2', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id2}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id2}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id3', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id3}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id3}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id4', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id4}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id4}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 4",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id5', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id5}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id5}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 5",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id6', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id6}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id6}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 6",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id7', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id7}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id7}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 7",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id8', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id8}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id8}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 8",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id9', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id9}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id9}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 9",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id10', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id10}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id10}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 10",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id11', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id11}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id11}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Gets the event count.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
															"const retryRequest = eval(retryRequestCall.retryRequest);",
															"",
															"var response = pm.response;",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", asyncTest(async function () {",
															"    if(response.json() === 0) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"                return response.json() > 0;      ",
															"        }, \"Retrying request\");",
															"    }",
															"    pm.expect(response.json()).to.be.above(0);",
															"}));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"limit\", \"5\");",
															"",
															"const url = `${pm.environment.get(\"baseurl_dc1\")}/bus/1/${pm.environment.get(\"subscription\")}/size?limit=${pm.environment.get(\"limit\")}`;",
															"pm.environment.set(\"url\", url);",
															"pm.environment.set(\"method\", \"GET\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}/size?limit={{limit}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}",
														"size"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}",
															"disabled": true
														},
														{
															"key": "limit",
															"value": "{{limit}}"
														}
													]
												},
												"description": "Returns a long."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription/size?partitioned={{partitioned}}&limit={{limit}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription",
																"size"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																},
																{
																	"key": "limit",
																	"value": "{{limit}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Unsubscribe operation.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
															"const retryRequest = eval(retryRequestCall.retryRequest);",
															"",
															"var response = pm.response;",
															"pm.test(\"Status code is 200\", asyncTest(async function () {",
															"    if(pm.response.status !== 200) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.code === 200;",
															"        }, \"Error retrying unsubscribe checking status \");",
															"    }",
															"    pm.expect(response).to.have.status(200);",
															"}));",
															"",
															"pm.test(\"Successful DELETE request\", asyncTest(async function () {",
															"    if(pm.response.status !== 200) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.code === 200;",
															"        }, \"Error retrying unsubscribe checking success\");",
															"    }",
															"    pm.expect(response.json().success).eql(true);",
															"}));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", \"true\");",
															"",
															"const url = `${pm.environment.get(\"baseurl_dc1\")}/bus/1/${pm.environment.get(\"subscription\")}?partitioned=${pm.environment.get(\"partitioned\")}`;",
															"pm.environment.set(\"url\", url);",
															"pm.environment.set(\"method\", \"DELETE\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}?partitioned={{partitioned}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														}
													]
												},
												"description": "Returns an Iterator of Subscription."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription?partitioned={{partitioned}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Drops a table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Successful DELETE request\", function () {",
															"    pm.expect(pm.response.json().success).eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"audit\", \"comment:'remove+table'\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit={{audit}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "{{audit}}"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is dropped"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/_table/:table?audit={{audit}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "{{audit}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Request with access rights to get size and without parameters to existing subscription and limit set=100",
									"item": [
										{
											"name": "Creates a table",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('table', 'postman_'+uuid.v4());",
															"",
															"pm.environment.set(\"options\", \"placement:'ugc_global:ugc'\");",
															"pm.environment.set(\"audit\", \"comment:'initial+provisioning'\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Successful PUT request\", function () {",
															"    pm.expect(pm.response.json().success).eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options={{options}}&audit={{audit}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "{{options}}"
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is created"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options={{options}}&audit={{audit}}",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "options",
																	"value": "{{options}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Subscribe operation.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('subscription', 'postman_'+uuid.v4()+'_test_subscription');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Successful PUT request\", function () {",
															"    pm.expect(pm.response.json().success).eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-condition"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "intrinsic(\"~table\":\"{{table}}\")"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}?ttl={{ttl}}&eventTtl={{eventTtl}}&ignoreSuppressedEvents={{ignoreSuppressedEvents}}&includeDefaultJoinFilter={{includeDefaultJoinFilter}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													],
													"query": [
														{
															"key": "ttl",
															"value": "{{ttl}}"
														},
														{
															"key": "eventTtl",
															"value": "{{eventTtl}}"
														},
														{
															"key": "ignoreSuppressedEvents",
															"value": "{{ignoreSuppressedEvents}}"
														},
														{
															"key": "includeDefaultJoinFilter",
															"value": "{{includeDefaultJoinFilter}}"
														}
													]
												},
												"description": "Returns a SuccessResponse."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription?ttl={{ttl}}&eventTtl={{eventTtl}}&ignoreSuppressedEvents={{ignoreSuppressedEvents}}&includeDefaultJoinFilter={{includeDefaultJoinFilter}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"query": [
																{
																	"key": "ttl",
																	"value": "{{ttl}}"
																},
																{
																	"key": "eventTtl",
																	"value": "{{eventTtl}}"
																},
																{
																	"key": "ignoreSuppressedEvents",
																	"value": "{{ignoreSuppressedEvents}}"
																},
																{
																	"key": "includeDefaultJoinFilter",
																	"value": "{{includeDefaultJoinFilter}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id1', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id1}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id1}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id2', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id2}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id2}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id3', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id3}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id3}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id4', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id4}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id4}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 4",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id5', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id5}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id5}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 5",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id6', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id6}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id6}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 6",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id7', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id7}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id7}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 7",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id8', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id8}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id8}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 8",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id9', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id9}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id9}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 9",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id10', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id10}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id10}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 10",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id11', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id11}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id11}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 11",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id12', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id12}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id12}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 12",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id13', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id13}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id13}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 13",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id14', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id14}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id14}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 14",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id15', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id15}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id15}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Gets the event count.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
															"const retryRequest = eval(retryRequestCall.retryRequest);",
															"",
															"var response = pm.response;",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", asyncTest(async function () {",
															"    if(response.json() === 0) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.json() > 0;",
															"        }, \"Retrying request\");",
															"    }",
															"    pm.expect(response.json()).to.be.above(0);",
															"}));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"limit\", \"100\");",
															"",
															"const url = `${pm.environment.get(\"baseurl_dc1\")}/bus/1/${pm.environment.get(\"subscription\")}/size?limit=${pm.environment.get(\"limit\")}`;",
															"pm.environment.set(\"url\", url);",
															"pm.environment.set(\"method\", \"GET\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}/size?limit={{limit}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}",
														"size"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}",
															"disabled": true
														},
														{
															"key": "limit",
															"value": "{{limit}}"
														}
													]
												},
												"description": "Returns a long."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription/size?partitioned={{partitioned}}&limit={{limit}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription",
																"size"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																},
																{
																	"key": "limit",
																	"value": "{{limit}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Unsubscribe operation.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
															"const retryRequest = eval(retryRequestCall.retryRequest);",
															"",
															"var response = pm.response;",
															"pm.test(\"Status code is 200\", asyncTest(async function () {",
															"    if(pm.response.status !== 200) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.code === 200;",
															"        }, \"Error retrying unsubscribe checking status \");",
															"    }",
															"    pm.expect(response).to.have.status(200);",
															"}));",
															"",
															"pm.test(\"Successful DELETE request\", asyncTest(async function () {",
															"    if(pm.response.status !== 200) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.code === 200;",
															"        }, \"Error retrying unsubscribe checking success\");",
															"    }",
															"    pm.expect(response.json().success).eql(true);",
															"}));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", \"true\");",
															"",
															"const url = `${pm.environment.get(\"baseurl_dc1\")}/bus/1/${pm.environment.get(\"subscription\")}?partitioned=${pm.environment.get(\"partitioned\")}`;",
															"pm.environment.set(\"url\", url);",
															"pm.environment.set(\"method\", \"DELETE\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}?partitioned={{partitioned}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														}
													]
												},
												"description": "Returns an Iterator of Subscription."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription?partitioned={{partitioned}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Drops a table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Successful DELETE request\", function () {",
															"    pm.expect(pm.response.json().success).eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"audit\", \"comment:'remove+table'\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit={{audit}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "{{audit}}"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is dropped"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/_table/:table?audit={{audit}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "{{audit}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Request with access rights to get size and without parameters to existing subscription, partitioned=false",
									"item": [
										{
											"name": "Creates a table",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('table', 'postman_'+uuid.v4());",
															"",
															"pm.environment.set(\"options\", \"placement:'ugc_global:ugc'\");",
															"pm.environment.set(\"audit\", \"comment:'initial+provisioning'\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Successful PUT request\", function () {",
															"    pm.expect(pm.response.json().success).eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options={{options}}&audit={{audit}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "{{options}}"
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is created"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options={{options}}&audit={{audit}}",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "options",
																	"value": "{{options}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Subscribe operation.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('subscription', 'postman_'+uuid.v4()+'_test_subscription');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Successful PUT request\", function () {",
															"    pm.expect(pm.response.json().success).eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-condition"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "intrinsic(\"~table\":\"{{table}}\")"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}?ttl={{ttl}}&eventTtl={{eventTtl}}&ignoreSuppressedEvents={{ignoreSuppressedEvents}}&includeDefaultJoinFilter={{includeDefaultJoinFilter}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													],
													"query": [
														{
															"key": "ttl",
															"value": "{{ttl}}"
														},
														{
															"key": "eventTtl",
															"value": "{{eventTtl}}"
														},
														{
															"key": "ignoreSuppressedEvents",
															"value": "{{ignoreSuppressedEvents}}"
														},
														{
															"key": "includeDefaultJoinFilter",
															"value": "{{includeDefaultJoinFilter}}"
														}
													]
												},
												"description": "Returns a SuccessResponse."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription?ttl={{ttl}}&eventTtl={{eventTtl}}&ignoreSuppressedEvents={{ignoreSuppressedEvents}}&includeDefaultJoinFilter={{includeDefaultJoinFilter}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"query": [
																{
																	"key": "ttl",
																	"value": "{{ttl}}"
																},
																{
																	"key": "eventTtl",
																	"value": "{{eventTtl}}"
																},
																{
																	"key": "ignoreSuppressedEvents",
																	"value": "{{ignoreSuppressedEvents}}"
																},
																{
																	"key": "includeDefaultJoinFilter",
																	"value": "{{includeDefaultJoinFilter}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id1', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id1}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id1}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id2', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id2}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id2}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id3', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id3}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id3}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id4', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id4}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id4}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 4",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id5', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id5}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id5}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 5",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id6', uuid.v4());",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id6}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id6}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 6",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id7', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id7}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id7}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 7",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id8', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id8}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id8}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 8",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id9', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id9}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id9}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 9",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id10}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id10}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 10",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id11', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id11}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id11}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Gets the event count.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
															"const retryRequest = eval(retryRequestCall.retryRequest);",
															"",
															"var response = pm.response;",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", asyncTest(async function () {",
															"    if(response.json() === 0) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.json() > 0;        ",
															"        }, \"Retrying request\");",
															"    }",
															"    pm.expect(response.json()).to.be.above(0);",
															"}));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", \"false\");",
															"",
															"const url = `${pm.environment.get(\"baseurl_dc1\")}/bus/1/${pm.environment.get(\"subscription\")}/size?partitioned=${pm.environment.get(\"partitioned\")}`;",
															"pm.environment.set(\"url\", url);",
															"pm.environment.set(\"method\", \"GET\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}/size?partitioned={{partitioned}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}",
														"size"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														},
														{
															"key": "limit",
															"value": "{{limit}}",
															"disabled": true
														}
													]
												},
												"description": "Returns a long."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription/size?partitioned={{partitioned}}&limit={{limit}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription",
																"size"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																},
																{
																	"key": "limit",
																	"value": "{{limit}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Unsubscribe operation.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
															"const retryRequest = eval(retryRequestCall.retryRequest);",
															"",
															"var response = pm.response;",
															"pm.test(\"Status code is 200\", asyncTest(async function () {",
															"    if(pm.response.status !== 200) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.code === 200;",
															"        }, \"Error retrying unsubscribe checking status \");",
															"    }",
															"    pm.expect(response).to.have.status(200);",
															"}));",
															"",
															"pm.test(\"Successful DELETE request\", asyncTest(async function () {",
															"    if(pm.response.status !== 200) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.code === 200;",
															"        }, \"Error retrying unsubscribe checking success\");",
															"    }",
															"    pm.expect(response.json().success).eql(true);",
															"}));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", \"true\");",
															"",
															"const url = `${pm.environment.get(\"baseurl_dc1\")}/bus/1/${pm.environment.get(\"subscription\")}?partitioned=${pm.environment.get(\"partitioned\")}`;",
															"pm.environment.set(\"url\", url);",
															"pm.environment.set(\"method\", \"DELETE\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}?partitioned={{partitioned}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														}
													]
												},
												"description": "Returns an Iterator of Subscription."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription?partitioned={{partitioned}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Drops a table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Successful DELETE request\", function () {",
															"    pm.expect(pm.response.json().success).eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"audit\", \"comment:'remove+table'\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit={{audit}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "{{audit}}"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is dropped"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/_table/:table?audit={{audit}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "{{audit}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Request with access rights to get size and without parameters to existing subscription, partitioned=true",
									"item": [
										{
											"name": "Creates a table",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('table', 'postman_'+uuid.v4());",
															"",
															"pm.environment.set(\"options\", \"placement:'ugc_global:ugc'\");",
															"pm.environment.set(\"audit\", \"comment:'initial+provisioning'\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Successful PUT request\", function () {",
															"    pm.expect(pm.response.json().success).eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options={{options}}&audit={{audit}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "{{options}}"
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is created"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options={{options}}&audit={{audit}}",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "options",
																	"value": "{{options}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Subscribe operation.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('subscription', 'postman_'+uuid.v4()+'_test_subscription');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Successful PUT request\", function () {",
															"    pm.expect(pm.response.json().success).eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-condition"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "intrinsic(\"~table\":\"{{table}}\")"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}?ttl={{ttl}}&eventTtl={{eventTtl}}&ignoreSuppressedEvents={{ignoreSuppressedEvents}}&includeDefaultJoinFilter={{includeDefaultJoinFilter}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													],
													"query": [
														{
															"key": "ttl",
															"value": "{{ttl}}"
														},
														{
															"key": "eventTtl",
															"value": "{{eventTtl}}"
														},
														{
															"key": "ignoreSuppressedEvents",
															"value": "{{ignoreSuppressedEvents}}"
														},
														{
															"key": "includeDefaultJoinFilter",
															"value": "{{includeDefaultJoinFilter}}"
														}
													]
												},
												"description": "Returns a SuccessResponse."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription?ttl={{ttl}}&eventTtl={{eventTtl}}&ignoreSuppressedEvents={{ignoreSuppressedEvents}}&includeDefaultJoinFilter={{includeDefaultJoinFilter}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"query": [
																{
																	"key": "ttl",
																	"value": "{{ttl}}"
																},
																{
																	"key": "eventTtl",
																	"value": "{{eventTtl}}"
																},
																{
																	"key": "ignoreSuppressedEvents",
																	"value": "{{ignoreSuppressedEvents}}"
																},
																{
																	"key": "includeDefaultJoinFilter",
																	"value": "{{includeDefaultJoinFilter}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id1', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id1}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id1}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id2', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id2}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id2}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id3', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id3}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id3}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id4', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id4}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id4}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 4",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id5', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id5}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id5}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 5",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id6', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id6}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id6}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 6",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id7', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id7}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id7}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 7",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id8', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id8}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id8}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 8",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id9', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id9}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id9}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 9",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id10', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id10}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id10}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta 10",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches strings\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('document_id11', uuid.v4());",
															"",
															"pm.environment.set(\"audit\", \"comment:'update+data'\");",
															"pm.environment.set(\"consistency\", \"GLOBAL\");",
															"pm.environment.set(\"tag\", \"test_tag\");",
															"pm.environment.set(\"debug\", \"true\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id11}}?audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id11}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "{{change_id}}",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "{{audit}}"
														},
														{
															"key": "consistency",
															"value": "{{consistency}}"
														},
														{
															"key": "tag",
															"value": "{{tag}}"
														},
														{
															"key": "debug",
															"value": "{{debug}}"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId={{change_id}}&audit={{audit}}&consistency={{consistency}}&tag={{tag}}&debug={{debug}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "{{change_id}}"
																},
																{
																	"key": "audit",
																	"value": "{{audit}}"
																},
																{
																	"key": "consistency",
																	"value": "{{consistency}}"
																},
																{
																	"key": "tag",
																	"value": "{{tag}}"
																},
																{
																	"key": "debug",
																	"value": "{{debug}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Gets the event count.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
															"const retryRequest = eval(retryRequestCall.retryRequest);",
															"",
															"var response = pm.response;",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", asyncTest(async function () {",
															"    if(response.json() === 0) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.json() > 0;        ",
															"        }, \"Retrying request\");",
															"    }",
															"    pm.expect(response.json()).to.be.above(0);",
															"}));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", \"true\");",
															"",
															"const url = `${pm.environment.get(\"baseurl_dc1\")}/bus/1/${pm.environment.get(\"subscription\")}/size?partitioned=${pm.environment.get(\"partitioned\")}`;",
															"pm.environment.set(\"url\", url);",
															"pm.environment.set(\"method\", \"GET\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}/size?partitioned={{partitioned}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}",
														"size"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														},
														{
															"key": "limit",
															"value": "{{limit}}",
															"disabled": true
														}
													]
												},
												"description": "Returns a long."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription/size?partitioned={{partitioned}}&limit={{limit}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription",
																"size"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																},
																{
																	"key": "limit",
																	"value": "{{limit}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Unsubscribe operation.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
															"const retryRequest = eval(retryRequestCall.retryRequest);",
															"",
															"var response = pm.response;",
															"pm.test(\"Status code is 200\", asyncTest(async function () {",
															"    if(pm.response.status !== 200) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.code === 200;",
															"        }, \"Error retrying unsubscribe checking status \");",
															"    }",
															"    pm.expect(response).to.have.status(200);",
															"}));",
															"",
															"pm.test(\"Successful DELETE request\", asyncTest(async function () {",
															"    if(pm.response.status !== 200) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.code === 200;",
															"        }, \"Error retrying unsubscribe checking success\");",
															"    }",
															"    pm.expect(response.json().success).eql(true);",
															"}));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", \"true\");",
															"",
															"const url = `${pm.environment.get(\"baseurl_dc1\")}/bus/1/${pm.environment.get(\"subscription\")}?partitioned=${pm.environment.get(\"partitioned\")}`;",
															"pm.environment.set(\"url\", url);",
															"pm.environment.set(\"method\", \"DELETE\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}?partitioned={{partitioned}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														}
													]
												},
												"description": "Returns an Iterator of Subscription."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription?partitioned={{partitioned}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Drops a table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Successful DELETE request\", function () {",
															"    pm.expect(pm.response.json().success).eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"audit\", \"comment:'remove+table'\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit={{audit}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "{{audit}}"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is dropped"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/_table/:table?audit={{audit}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "{{audit}}"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Request with api-key without access to get size",
									"item": [
										{
											"name": "Gets the event count.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json().reason).to.be.eql('not authorized');",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", \"true\");",
															"pm.environment.set(\"limit\", \"10\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key_no_rights}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}/size?partitioned={{partitioned}}&limit={{limit}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}",
														"size"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														},
														{
															"key": "limit",
															"value": "{{limit}}"
														}
													]
												},
												"description": "Returns a long."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription/size?partitioned={{partitioned}}&limit={{limit}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription",
																"size"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																},
																{
																	"key": "limit",
																	"value": "{{limit}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "TC: Request to not existing subscription",
									"item": [
										{
											"name": "Gets the event count.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.be.eql(0);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"partitioned\", \"true\");",
															"pm.environment.set(\"limit\", \"10\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/not_existing_subscription/size?partitioned={{partitioned}}&limit={{limit}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"not_existing_subscription",
														"size"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														},
														{
															"key": "limit",
															"value": "{{limit}}"
														}
													]
												},
												"description": "Returns a long."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription/size?partitioned={{partitioned}}&limit={{limit}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription",
																"size"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																},
																{
																	"key": "limit",
																	"value": "{{limit}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const retryRequest = () => {",
											"    return new Promise((resolve, reject) => {",
											"        pm.sendRequest({",
											"            url: `${pm.environment.get(\"url\")}`,",
											"            method: `${pm.environment.get(\"method\")}`,",
											"            header: {",
											"                \"X-BV-API-Key\": pm.environment.get(\"api_key\"),",
											"            }",
											"        }, (error, response) => {",
											"            if (error) {",
											"                reject(error);",
											"            }",
											"            resolve(response);",
											"        });",
											"    });",
											"};",
											"",
											"const retryRequestCall = {",
											"    retryRequest: retryRequest.toString()",
											"};",
											"",
											"pm.globals.set(\"retryRequestCall\", JSON.stringify(retryRequestCall));",
											"",
											"pm.environment.set(\"ttl\", \"86400\");",
											"pm.environment.set(\"eventTtl\", \"86400\");",
											"pm.environment.set(\"ignoreSuppressedEvents\", false);",
											"pm.environment.set(\"includeDefaultJoinFilter\", false);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"/**",
					" * Waits until the given predicate returns a truthy value. Calls and awaits the predicate",
					" * function at the given interval time. Can be used to poll until a certain condition is true.",
					" *",
					" * @example",
					" * ```js",
					" * import { fixture, waitUntil } from '@open-wc/testing-helpers';",
					" *",
					" * const element = await fixture(html`<my-element></my-element>`);",
					" *",
					" * await waitUntil(() => element.someAsyncProperty, 'element should become ready');",
					" *",
					"",
					" *",
					" * @param {() => boolean | Promise<boolean>} predicate - predicate function which is called each poll interval.",
					" *   The predicate is awaited, so it can return a promise.",
					" * @param {string} [message] an optional message to display when the condition timed out",
					" * @param {{ interval?: number, timeout?: number }} [options] timeout and polling interval",
					" */",
					"waitUntil = (setTimeout, clearTimeout, predicate, message, options = {}) => {",
					"  const { interval = 1000, timeout = 120000 } = options;",
					"",
					"  return new Promise((resolve, reject) => {",
					"    let timeoutId;",
					"    let failTimeoutId;",
					"",
					"    failTimeoutId = setTimeout(() => {",
					"      clearTimeout(timeoutId);",
					"      try {",
					"          pm.expect.fail(message ? `Timeout: ${message}` : `waitUntil timed out after ${timeout}ms`);",
					"      } catch(err) {",
					"          reject(err);",
					"      }",
					"    }, timeout);",
					"",
					"    async function nextInterval() {",
					"      try {",
					"        const result = await predicate();",
					"        if (result) {",
					"          clearTimeout(failTimeoutId);",
					"          resolve();",
					"        } else {",
					"          timeoutId = setTimeout(function() {",
					"            nextInterval();",
					"          }, interval);",
					"        }",
					"      } catch (error) {",
					"        clearTimeout(failTimeoutId);",
					"        reject(error);",
					"      }",
					"    }",
					"    nextInterval();",
					"  });",
					"};",
					"",
					"asyncTest = (cb) => {",
					"    return (done) => {",
					"        try {",
					"            cb(done).then(() => done()).catch((err) => done(err));",
					"        } catch (err) {",
					"            done(err);",
					"        }",
					"    };",
					"}",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}