{
	"info": {
		"_postman_id": "5536a2e3-2331-4a1e-8569-b50d2164f820",
		"name": "EmoDB_Tests_databus_put_subscription",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Put subscription",
			"item": [
				{
					"name": "TC: Create subscription without pparameters",
					"item": [
						{
							"name": "Subscribe operation.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set('subscription', 'postman_'+uuid.v4()+'_test_subscription');",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.json().success).eql(true);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x.json-condition"
									},
									{
										"key": "X-BV-API-Key",
										"value": "{{api_key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\"adipisicing ea\""
								},
								"url": {
									"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}",
									"host": [
										"{{baseurl_dc1}}"
									],
									"path": [
										"bus",
										"1",
										"{{subscription}}"
									],
									"query": [
										{
											"key": "ttl",
											"value": "86400",
											"disabled": true
										},
										{
											"key": "eventTtl",
											"value": "86400",
											"disabled": true
										},
										{
											"key": "ignoreSuppressedEvents",
											"value": "adipisicing ea",
											"disabled": true
										},
										{
											"key": "includeDefaultJoinFilter",
											"value": "true",
											"disabled": true
										}
									]
								},
								"description": "Returns a SuccessResponse."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\"adipisicing ea\""
										},
										"url": {
											"raw": "{{baseUrl}}/bus/1/:subscription?ttl=86400&eventTtl=86400&ignoreSuppressedEvents=adipisicing ea&includeDefaultJoinFilter=adipisicing ea",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bus",
												"1",
												":subscription"
											],
											"query": [
												{
													"key": "ttl",
													"value": "86400"
												},
												{
													"key": "eventTtl",
													"value": "86400"
												},
												{
													"key": "ignoreSuppressedEvents",
													"value": "adipisicing ea"
												},
												{
													"key": "includeDefaultJoinFilter",
													"value": "adipisicing ea"
												}
											],
											"variable": [
												{
													"key": "subscription"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"success\": false,\n \"debug\": {}\n}"
								}
							]
						},
						{
							"name": "Unsubscribe operation.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
											"const retryRequest = eval(retryRequestCall.retryRequest);",
											"",
											"var response = pm.response;",
											"pm.test(\"Status code is 200\", asyncTest(async function () {",
											"    if(response.code !== 200) {",
											"        await waitUntil(setTimeout, clearTimeout, async () => {",
											"            response = await retryRequest();",
											"            return response.code === 200;",
											"        }, \"Error retrying unsubscribe checking status \");",
											"    }",
											"    pm.expect(response.code).to.be.eql(200);",
											"}));",
											"",
											"pm.test(\"Body matches string\", asyncTest(async function () {",
											"    if(response.code !== 200) {",
											"        await waitUntil(setTimeout, clearTimeout, async () => {",
											"            response = await retryRequest();",
											"            return response.code === 200;",
											"        }, \"Error retrying unsubscribe checking success\");",
											"    }",
											"    pm.expect(response.json().success).to.be.eql(true);",
											"}));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"partitioned\", false);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-BV-API-Key",
										"value": "{{api_key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}?partitioned={{partitioned}}",
									"host": [
										"{{baseurl_dc1}}"
									],
									"path": [
										"bus",
										"1",
										"{{subscription}}"
									],
									"query": [
										{
											"key": "partitioned",
											"value": "{{partitioned}}"
										}
									]
								},
								"description": "Returns an Iterator of Subscription."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/bus/1/:subscription?partitioned={{partitioned}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bus",
												"1",
												":subscription"
											],
											"query": [
												{
													"key": "partitioned",
													"value": "{{partitioned}}"
												}
											],
											"variable": [
												{
													"key": "subscription"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"success\": false,\n \"debug\": {}\n}"
								}
							]
						}
					]
				},
				{
					"name": "TC: Request without permission",
					"item": [
						{
							"name": "Subscribe operation.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set('subscription', 'postman_'+uuid.v4()+'_test_subscription');",
											"",
											"pm.environment.set(\"ttl\", \"86400\");",
											"pm.environment.set(\"eventTtl\", \"86400\");",
											"pm.environment.set(\"ignoreSuppressedEvents\", false);",
											"pm.environment.set(\"includeDefaultJoinFilter\", false);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.json().reason).eql(\"not authorized\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x.json-condition"
									},
									{
										"key": "X-BV-API-Key",
										"value": "{{api_key_no_rights}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\"adipisicing ea\""
								},
								"url": {
									"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}",
									"host": [
										"{{baseurl_dc1}}"
									],
									"path": [
										"bus",
										"1",
										"{{subscription}}"
									],
									"query": [
										{
											"key": "ttl",
											"value": "86400",
											"disabled": true
										},
										{
											"key": "eventTtl",
											"value": "86400",
											"disabled": true
										},
										{
											"key": "ignoreSuppressedEvents",
											"value": "adipisicing ea",
											"disabled": true
										},
										{
											"key": "includeDefaultJoinFilter",
											"value": "true",
											"disabled": true
										}
									]
								},
								"description": "Returns a SuccessResponse."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\"adipisicing ea\""
										},
										"url": {
											"raw": "{{baseUrl}}/bus/1/:subscription?ttl=86400&eventTtl=86400&ignoreSuppressedEvents=adipisicing ea&includeDefaultJoinFilter=adipisicing ea",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bus",
												"1",
												":subscription"
											],
											"query": [
												{
													"key": "ttl",
													"value": "86400"
												},
												{
													"key": "eventTtl",
													"value": "86400"
												},
												{
													"key": "ignoreSuppressedEvents",
													"value": "adipisicing ea"
												},
												{
													"key": "includeDefaultJoinFilter",
													"value": "adipisicing ea"
												}
											],
											"variable": [
												{
													"key": "subscription"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"success\": false,\n \"debug\": {}\n}"
								}
							]
						},
						{
							"name": "Unsubscribe operation.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
											"const retryRequest = eval(retryRequestCall.retryRequest);",
											"",
											"var response = pm.response;",
											"pm.test(\"Status code is 200\", asyncTest(async function () {",
											"    if(response.code !== 200) {",
											"        await waitUntil(setTimeout, clearTimeout, async () => {",
											"            response = await retryRequest();",
											"            return response.code === 200;",
											"        }, \"Error retrying unsubscribe checking status \");",
											"    }",
											"    pm.expect(response.code).to.be.eql(200);",
											"}));",
											"",
											"pm.test(\"Body matches string\", asyncTest(async function () {",
											"    if(response.code !== 200) {",
											"        await waitUntil(setTimeout, clearTimeout, async () => {",
											"            response = await retryRequest();",
											"            return response.code === 200;",
											"        }, \"Error retrying unsubscribe checking success\");",
											"    }",
											"    pm.expect(response.json().success).to.be.eql(true);",
											"}));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"partitioned\", false);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-BV-API-Key",
										"value": "{{api_key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}?partitioned={{partitioned}}",
									"host": [
										"{{baseurl_dc1}}"
									],
									"path": [
										"bus",
										"1",
										"{{subscription}}"
									],
									"query": [
										{
											"key": "partitioned",
											"value": "{{partitioned}}"
										}
									]
								},
								"description": "Returns an Iterator of Subscription."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/bus/1/:subscription?partitioned={{partitioned}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bus",
												"1",
												":subscription"
											],
											"query": [
												{
													"key": "partitioned",
													"value": "{{partitioned}}"
												}
											],
											"variable": [
												{
													"key": "subscription"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"success\": false,\n \"debug\": {}\n}"
								}
							]
						}
					]
				},
				{
					"name": "TC: Request with access rights and with ttl, eventTtl, ignoreSuppressedEvents = true, includeDefaultJoinFilter = true",
					"item": [
						{
							"name": "Subscribe operation.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set('subscription', 'postman_'+uuid.v4()+'_test_subscription');",
											"",
											"pm.environment.set(\"ttl\", \"86400\");",
											"pm.environment.set(\"eventTtl\", \"86400\");",
											"pm.environment.set(\"ignoreSuppressedEvents\", true);",
											"pm.environment.set(\"includeDefaultJoinFilter\", true);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.json().success).eql(true);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x.json-condition"
									},
									{
										"key": "X-BV-API-Key",
										"value": "{{api_key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\"adipisicing ea\""
								},
								"url": {
									"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}",
									"host": [
										"{{baseurl_dc1}}"
									],
									"path": [
										"bus",
										"1",
										"{{subscription}}"
									],
									"query": [
										{
											"key": "ttl",
											"value": "86400",
											"disabled": true
										},
										{
											"key": "eventTtl",
											"value": "86400",
											"disabled": true
										},
										{
											"key": "ignoreSuppressedEvents",
											"value": "adipisicing ea",
											"disabled": true
										},
										{
											"key": "includeDefaultJoinFilter",
											"value": "true",
											"disabled": true
										}
									]
								},
								"description": "Returns a SuccessResponse."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\"adipisicing ea\""
										},
										"url": {
											"raw": "{{baseUrl}}/bus/1/:subscription?ttl=86400&eventTtl=86400&ignoreSuppressedEvents=adipisicing ea&includeDefaultJoinFilter=adipisicing ea",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bus",
												"1",
												":subscription"
											],
											"query": [
												{
													"key": "ttl",
													"value": "86400"
												},
												{
													"key": "eventTtl",
													"value": "86400"
												},
												{
													"key": "ignoreSuppressedEvents",
													"value": "adipisicing ea"
												},
												{
													"key": "includeDefaultJoinFilter",
													"value": "adipisicing ea"
												}
											],
											"variable": [
												{
													"key": "subscription"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"success\": false,\n \"debug\": {}\n}"
								}
							]
						},
						{
							"name": "Unsubscribe operation.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
											"const retryRequest = eval(retryRequestCall.retryRequest);",
											"",
											"var response = pm.response;",
											"pm.test(\"Status code is 200\", asyncTest(async function () {",
											"    if(response.code !== 200) {",
											"        await waitUntil(setTimeout, clearTimeout, async () => {",
											"            response = await retryRequest();",
											"            return response.code === 200;",
											"        }, \"Error retrying unsubscribe checking status \");",
											"    }",
											"    pm.expect(response.code).to.be.eql(200);",
											"}));",
											"",
											"pm.test(\"Body matches string\", asyncTest(async function () {",
											"    if(response.code !== 200) {",
											"        await waitUntil(setTimeout, clearTimeout, async () => {",
											"            response = await retryRequest();",
											"            return response.code === 200;",
											"        }, \"Error retrying unsubscribe checking success\");",
											"    }",
											"    pm.expect(response.json().success).to.be.eql(true);",
											"}));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"partitioned\", false);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-BV-API-Key",
										"value": "{{api_key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}?partitioned={{partitioned}}",
									"host": [
										"{{baseurl_dc1}}"
									],
									"path": [
										"bus",
										"1",
										"{{subscription}}"
									],
									"query": [
										{
											"key": "partitioned",
											"value": "{{partitioned}}"
										}
									]
								},
								"description": "Returns an Iterator of Subscription."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/bus/1/:subscription?partitioned={{partitioned}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bus",
												"1",
												":subscription"
											],
											"query": [
												{
													"key": "partitioned",
													"value": "{{partitioned}}"
												}
											],
											"variable": [
												{
													"key": "subscription"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"success\": false,\n \"debug\": {}\n}"
								}
							]
						}
					]
				},
				{
					"name": "TC: Request with access rights and with ttl = 86399, eventTtl = 86398, ignoreSuppressedEvents = false, includeDefaultJoinFilter = false",
					"item": [
						{
							"name": "Subscribe operation.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set('subscription', 'postman_'+uuid.v4()+'_test_subscription');",
											"",
											"pm.environment.set(\"ttl\", \"86399\");",
											"pm.environment.set(\"eventTtl\", \"86398\");",
											"pm.environment.set(\"ignoreSuppressedEvents\", false);",
											"pm.environment.set(\"includeDefaultJoinFilter\", false);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.json().success).eql(true);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x.json-condition"
									},
									{
										"key": "X-BV-API-Key",
										"value": "{{api_key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\"adipisicing ea\""
								},
								"url": {
									"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}",
									"host": [
										"{{baseurl_dc1}}"
									],
									"path": [
										"bus",
										"1",
										"{{subscription}}"
									],
									"query": [
										{
											"key": "ttl",
											"value": "86400",
											"disabled": true
										},
										{
											"key": "eventTtl",
											"value": "86400",
											"disabled": true
										},
										{
											"key": "ignoreSuppressedEvents",
											"value": "adipisicing ea",
											"disabled": true
										},
										{
											"key": "includeDefaultJoinFilter",
											"value": "true",
											"disabled": true
										}
									]
								},
								"description": "Returns a SuccessResponse."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\"adipisicing ea\""
										},
										"url": {
											"raw": "{{baseUrl}}/bus/1/:subscription?ttl=86400&eventTtl=86400&ignoreSuppressedEvents=adipisicing ea&includeDefaultJoinFilter=adipisicing ea",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bus",
												"1",
												":subscription"
											],
											"query": [
												{
													"key": "ttl",
													"value": "86400"
												},
												{
													"key": "eventTtl",
													"value": "86400"
												},
												{
													"key": "ignoreSuppressedEvents",
													"value": "adipisicing ea"
												},
												{
													"key": "includeDefaultJoinFilter",
													"value": "adipisicing ea"
												}
											],
											"variable": [
												{
													"key": "subscription"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"success\": false,\n \"debug\": {}\n}"
								}
							]
						},
						{
							"name": "Unsubscribe operation.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
											"const retryRequest = eval(retryRequestCall.retryRequest);",
											"",
											"var response = pm.response;",
											"pm.test(\"Status code is 200\", asyncTest(async function () {",
											"    if(response.code !== 200) {",
											"        await waitUntil(setTimeout, clearTimeout, async () => {",
											"            response = await retryRequest();",
											"            return response.code === 200;",
											"        }, \"Error retrying unsubscribe checking status \");",
											"    }",
											"    pm.expect(response.code).to.be.eql(200);",
											"}));",
											"",
											"pm.test(\"Body matches string\", asyncTest(async function () {",
											"    if(response.code !== 200) {",
											"        await waitUntil(setTimeout, clearTimeout, async () => {",
											"            response = await retryRequest();",
											"            return response.code === 200;",
											"        }, \"Error retrying unsubscribe checking success\");",
											"    }",
											"    pm.expect(response.json().success).to.be.eql(true);",
											"}));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"partitioned\", false);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-BV-API-Key",
										"value": "{{api_key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}?partitioned={{partitioned}}",
									"host": [
										"{{baseurl_dc1}}"
									],
									"path": [
										"bus",
										"1",
										"{{subscription}}"
									],
									"query": [
										{
											"key": "partitioned",
											"value": "{{partitioned}}"
										}
									]
								},
								"description": "Returns an Iterator of Subscription."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/bus/1/:subscription?partitioned={{partitioned}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bus",
												"1",
												":subscription"
											],
											"query": [
												{
													"key": "partitioned",
													"value": "{{partitioned}}"
												}
											],
											"variable": [
												{
													"key": "subscription"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"success\": false,\n \"debug\": {}\n}"
								}
							]
						}
					]
				},
				{
					"name": "TC: Request with access rights and with ttl = 86401, eventTtl = 86402, ignoreSuppressedEvents = false, includeDefaultJoinFilter = false",
					"item": [
						{
							"name": "Subscribe operation.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set('subscription', 'postman_'+uuid.v4()+'_test_subscription');",
											"",
											"pm.environment.set(\"ttl\", \"86401\");",
											"pm.environment.set(\"eventTtl\", \"86402\");",
											"pm.environment.set(\"ignoreSuppressedEvents\", false);",
											"pm.environment.set(\"includeDefaultJoinFilter\", false);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.json().success).eql(true);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x.json-condition"
									},
									{
										"key": "X-BV-API-Key",
										"value": "{{api_key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\"adipisicing ea\""
								},
								"url": {
									"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}",
									"host": [
										"{{baseurl_dc1}}"
									],
									"path": [
										"bus",
										"1",
										"{{subscription}}"
									],
									"query": [
										{
											"key": "ttl",
											"value": "86400",
											"disabled": true
										},
										{
											"key": "eventTtl",
											"value": "86400",
											"disabled": true
										},
										{
											"key": "ignoreSuppressedEvents",
											"value": "adipisicing ea",
											"disabled": true
										},
										{
											"key": "includeDefaultJoinFilter",
											"value": "true",
											"disabled": true
										}
									]
								},
								"description": "Returns a SuccessResponse."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\"adipisicing ea\""
										},
										"url": {
											"raw": "{{baseUrl}}/bus/1/:subscription?ttl=86400&eventTtl=86400&ignoreSuppressedEvents=adipisicing ea&includeDefaultJoinFilter=adipisicing ea",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bus",
												"1",
												":subscription"
											],
											"query": [
												{
													"key": "ttl",
													"value": "86400"
												},
												{
													"key": "eventTtl",
													"value": "86400"
												},
												{
													"key": "ignoreSuppressedEvents",
													"value": "adipisicing ea"
												},
												{
													"key": "includeDefaultJoinFilter",
													"value": "adipisicing ea"
												}
											],
											"variable": [
												{
													"key": "subscription"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"success\": false,\n \"debug\": {}\n}"
								}
							]
						},
						{
							"name": "Unsubscribe operation.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
											"const retryRequest = eval(retryRequestCall.retryRequest);",
											"",
											"var response = pm.response;",
											"pm.test(\"Status code is 200\", asyncTest(async function () {",
											"    if(response.code !== 200) {",
											"        await waitUntil(setTimeout, clearTimeout, async () => {",
											"            response = await retryRequest();",
											"            return response.code === 200;",
											"        }, \"Error retrying unsubscribe checking status \");",
											"    }",
											"    pm.expect(response.code).to.be.eql(200);",
											"}));",
											"",
											"pm.test(\"Body matches string\", asyncTest(async function () {",
											"    if(response.code !== 200) {",
											"        await waitUntil(setTimeout, clearTimeout, async () => {",
											"            response = await retryRequest();",
											"            return response.code === 200;",
											"        }, \"Error retrying unsubscribe checking success\");",
											"    }",
											"    pm.expect(response.json().success).to.be.eql(true);",
											"}));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"partitioned\", false);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-BV-API-Key",
										"value": "{{api_key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}?partitioned={{partitioned}}",
									"host": [
										"{{baseurl_dc1}}"
									],
									"path": [
										"bus",
										"1",
										"{{subscription}}"
									],
									"query": [
										{
											"key": "partitioned",
											"value": "{{partitioned}}"
										}
									]
								},
								"description": "Returns an Iterator of Subscription."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/bus/1/:subscription?partitioned={{partitioned}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bus",
												"1",
												":subscription"
											],
											"query": [
												{
													"key": "partitioned",
													"value": "{{partitioned}}"
												}
											],
											"variable": [
												{
													"key": "subscription"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"success\": false,\n \"debug\": {}\n}"
								}
							]
						}
					]
				},
				{
					"name": "TC: Request to create subscription with existing name",
					"item": [
						{
							"name": "Subscribe operation 1.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set('subscription', 'postman_'+uuid.v4()+'_test_subscription');",
											"",
											"pm.environment.set(\"ttl\", \"86401\");",
											"pm.environment.set(\"eventTtl\", \"86402\");",
											"pm.environment.set(\"ignoreSuppressedEvents\", false);",
											"pm.environment.set(\"includeDefaultJoinFilter\", false);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.json().success).eql(true);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x.json-condition"
									},
									{
										"key": "X-BV-API-Key",
										"value": "{{api_key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\"adipisicing ea\""
								},
								"url": {
									"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}",
									"host": [
										"{{baseurl_dc1}}"
									],
									"path": [
										"bus",
										"1",
										"{{subscription}}"
									],
									"query": [
										{
											"key": "ttl",
											"value": "86400",
											"disabled": true
										},
										{
											"key": "eventTtl",
											"value": "86400",
											"disabled": true
										},
										{
											"key": "ignoreSuppressedEvents",
											"value": "adipisicing ea",
											"disabled": true
										},
										{
											"key": "includeDefaultJoinFilter",
											"value": "true",
											"disabled": true
										}
									]
								},
								"description": "Returns a SuccessResponse."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\"adipisicing ea\""
										},
										"url": {
											"raw": "{{baseUrl}}/bus/1/:subscription?ttl=86400&eventTtl=86400&ignoreSuppressedEvents=adipisicing ea&includeDefaultJoinFilter=adipisicing ea",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bus",
												"1",
												":subscription"
											],
											"query": [
												{
													"key": "ttl",
													"value": "86400"
												},
												{
													"key": "eventTtl",
													"value": "86400"
												},
												{
													"key": "ignoreSuppressedEvents",
													"value": "adipisicing ea"
												},
												{
													"key": "includeDefaultJoinFilter",
													"value": "adipisicing ea"
												}
											],
											"variable": [
												{
													"key": "subscription"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"success\": false,\n \"debug\": {}\n}"
								}
							]
						},
						{
							"name": "Subscribe operation 2.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set('subscription', 'postman_'+uuid.v4()+'_test_subscription');",
											"",
											"pm.environment.set(\"ttl\", \"86401\");",
											"pm.environment.set(\"eventTtl\", \"86402\");",
											"pm.environment.set(\"ignoreSuppressedEvents\", false);",
											"pm.environment.set(\"includeDefaultJoinFilter\", false);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.json().success).eql(true);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x.json-condition"
									},
									{
										"key": "X-BV-API-Key",
										"value": "{{api_key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\"adipisicing ea\""
								},
								"url": {
									"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}",
									"host": [
										"{{baseurl_dc1}}"
									],
									"path": [
										"bus",
										"1",
										"{{subscription}}"
									],
									"query": [
										{
											"key": "ttl",
											"value": "86400",
											"disabled": true
										},
										{
											"key": "eventTtl",
											"value": "86400",
											"disabled": true
										},
										{
											"key": "ignoreSuppressedEvents",
											"value": "adipisicing ea",
											"disabled": true
										},
										{
											"key": "includeDefaultJoinFilter",
											"value": "true",
											"disabled": true
										}
									]
								},
								"description": "Returns a SuccessResponse."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\"adipisicing ea\""
										},
										"url": {
											"raw": "{{baseUrl}}/bus/1/:subscription?ttl=86400&eventTtl=86400&ignoreSuppressedEvents=adipisicing ea&includeDefaultJoinFilter=adipisicing ea",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bus",
												"1",
												":subscription"
											],
											"query": [
												{
													"key": "ttl",
													"value": "86400"
												},
												{
													"key": "eventTtl",
													"value": "86400"
												},
												{
													"key": "ignoreSuppressedEvents",
													"value": "adipisicing ea"
												},
												{
													"key": "includeDefaultJoinFilter",
													"value": "adipisicing ea"
												}
											],
											"variable": [
												{
													"key": "subscription"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"success\": false,\n \"debug\": {}\n}"
								}
							]
						},
						{
							"name": "Unsubscribe operation.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
											"const retryRequest = eval(retryRequestCall.retryRequest);",
											"",
											"var response = pm.response;",
											"pm.test(\"Status code is 200\", asyncTest(async function () {",
											"    if(response.code !== 200) {",
											"        await waitUntil(setTimeout, clearTimeout, async () => {",
											"            response = await retryRequest();",
											"            return response.code === 200;",
											"        }, \"Error retrying unsubscribe checking status \");",
											"    }",
											"    pm.expect(response.code).to.be.eql(200);",
											"}));",
											"",
											"pm.test(\"Body matches string\", asyncTest(async function () {",
											"    if(response.code !== 200) {",
											"        await waitUntil(setTimeout, clearTimeout, async () => {",
											"            response = await retryRequest();",
											"            return response.code === 200;",
											"        }, \"Error retrying unsubscribe checking success\");",
											"    }",
											"    pm.expect(response.json().success).to.be.eql(true);",
											"}));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"partitioned\", false);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-BV-API-Key",
										"value": "{{api_key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}?partitioned={{partitioned}}",
									"host": [
										"{{baseurl_dc1}}"
									],
									"path": [
										"bus",
										"1",
										"{{subscription}}"
									],
									"query": [
										{
											"key": "partitioned",
											"value": "{{partitioned}}"
										}
									]
								},
								"description": "Returns an Iterator of Subscription."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/bus/1/:subscription?partitioned={{partitioned}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bus",
												"1",
												":subscription"
											],
											"query": [
												{
													"key": "partitioned",
													"value": "{{partitioned}}"
												}
											],
											"variable": [
												{
													"key": "subscription"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"success\": false,\n \"debug\": {}\n}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Subscribe operation.",
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x.json-condition"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "\"adipisicing ea\""
				},
				"url": {
					"raw": "{{baseurl_dc1}}/bus/1/:subscription?ttl=86400&eventTtl=86400&ignoreSuppressedEvents=adipisicing ea&includeDefaultJoinFilter=adipisicing ea",
					"host": [
						"{{baseurl_dc1}}"
					],
					"path": [
						"bus",
						"1",
						":subscription"
					],
					"query": [
						{
							"key": "ttl",
							"value": "86400"
						},
						{
							"key": "eventTtl",
							"value": "86400"
						},
						{
							"key": "ignoreSuppressedEvents",
							"value": "adipisicing ea"
						},
						{
							"key": "includeDefaultJoinFilter",
							"value": "adipisicing ea"
						}
					],
					"variable": [
						{
							"key": "subscription",
							"value": "adipisicing ea",
							"description": "(Required) "
						}
					]
				},
				"description": "Returns a SuccessResponse."
			},
			"response": [
				{
					"name": "successful operation",
					"originalRequest": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\"adipisicing ea\""
						},
						"url": {
							"raw": "{{baseUrl}}/bus/1/:subscription?ttl=86400&eventTtl=86400&ignoreSuppressedEvents=adipisicing ea&includeDefaultJoinFilter=adipisicing ea",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bus",
								"1",
								":subscription"
							],
							"query": [
								{
									"key": "ttl",
									"value": "86400"
								},
								{
									"key": "eventTtl",
									"value": "86400"
								},
								{
									"key": "ignoreSuppressedEvents",
									"value": "adipisicing ea"
								},
								{
									"key": "includeDefaultJoinFilter",
									"value": "adipisicing ea"
								}
							],
							"variable": [
								{
									"key": "subscription"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"success\": false,\n \"debug\": {}\n}"
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"/**",
					" * Waits until the given predicate returns a truthy value. Calls and awaits the predicate",
					" * function at the given interval time. Can be used to poll until a certain condition is true.",
					" *",
					" * @example",
					" * ```js",
					" * import { fixture, waitUntil } from '@open-wc/testing-helpers';",
					" *",
					" * const element = await fixture(html`<my-element></my-element>`);",
					" *",
					" * await waitUntil(() => element.someAsyncProperty, 'element should become ready');",
					" *",
					"",
					" *",
					" * @param {() => boolean | Promise<boolean>} predicate - predicate function which is called each poll interval.",
					" *   The predicate is awaited, so it can return a promise.",
					" * @param {string} [message] an optional message to display when the condition timed out",
					" * @param {{ interval?: number, timeout?: number }} [options] timeout and polling interval",
					" */",
					"waitUntil = (setTimeout, clearTimeout, predicate, message, options = {}) => {",
					"  const { interval = 1000, timeout = 120000 } = options;",
					"",
					"  return new Promise((resolve, reject) => {",
					"    let timeoutId;",
					"    let failTimeoutId;",
					"",
					"    failTimeoutId = setTimeout(() => {",
					"      clearTimeout(timeoutId);",
					"      try {",
					"          pm.expect.fail(message ? `Timeout: ${message}` : `waitUntil timed out after ${timeout}ms`);",
					"      } catch(err) {",
					"          reject(err);",
					"      }",
					"    }, timeout);",
					"",
					"    async function nextInterval() {",
					"      try {",
					"        const result = await predicate();",
					"        if (result) {",
					"          clearTimeout(failTimeoutId);",
					"          resolve();",
					"        } else {",
					"          timeoutId = setTimeout(function() {",
					"            nextInterval();",
					"          }, interval);",
					"        }",
					"      } catch (error) {",
					"        clearTimeout(failTimeoutId);",
					"        reject(error);",
					"      }",
					"    }",
					"    nextInterval();",
					"  });",
					"};",
					"",
					"asyncTest = (cb) => {",
					"    return (done) => {",
					"        try {",
					"            cb(done).then(() => done()).catch((err) => done(err));",
					"        } catch (err) {",
					"            done(err);",
					"        }",
					"    };",
					"}",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}