{
	"info": {
		"_postman_id": "eb0b872b-a5ea-4e18-8187-49e309688460",
		"name": "EmoDB_Tests_sor_tableName",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": ":table test cases",
			"item": [
				{
					"name": "{key}",
					"item": [
						{
							"name": "Get current version of piece of data in sor GET /sor/1/{table}/{key}",
							"item": [
								{
									"name": "TC: Request without api-key",
									"item": [
										{
											"name": "Retrieves the current version of a piece of content from the data store",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"reason\":\"not authorized\"});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key_no_rights}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/some_table/some_key?consistency=STRONG&debug=true",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"some_table",
														"some_key"
													],
													"query": [
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "debug",
															"value": "true"
														}
													]
												},
												"description": "Retrieves the current version of a piece of content from the data store."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?consistency=STRONG&debug=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "debug",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Request to not existing table",
									"item": [
										{
											"name": "Retrieves the current version of a piece of content from the data store",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"message\":\"Unknown table: some_table\",\"table\":\"some_table\",\"suppressed\":[]});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/some_table/:key?consistency=STRONG",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"some_table",
														":key"
													],
													"query": [
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "debug",
															"value": "<string>",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "key",
															"value": "<string>",
															"description": "(Required) "
														}
													]
												},
												"description": "Retrieves the current version of a piece of content from the data store."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?consistency=STRONG&debug=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "debug",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Request by using not allowed table name",
									"item": [
										{
											"name": "Retrieves the current version of a piece of content from the data store",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.to.have.body('Table name must be a lowercase ASCII string between 1 and 255 characters in length. Allowed punctuation characters are -.:@_ and the table name may not start with a single underscore character. An example of a valid table name would be \\'review:testcustomer\\'.'));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/SOME_TABLE@/:key?consistency=STRONG",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"SOME_TABLE@",
														":key"
													],
													"query": [
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "debug",
															"value": "<string>",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "key",
															"value": ""
														}
													]
												},
												"description": "Retrieves the current version of a piece of content from the data store."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?consistency=STRONG&debug=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "debug",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Get current piece of data",
									"item": [
										{
											"name": "Creates table /sor/1/_table/{table}",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('table', 'table_'+uuid.v4());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "placement:'ugc_global:ugc'"
														},
														{
															"key": "audit",
															"value": "comment:'initial+provisioning'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is created"
											},
											"response": []
										},
										{
											"name": "Creates/Updates content in datastore /sor/1/{table}/{key}",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('auditValue', 'comment:\\'auditValue+'",
															" + pm.variables.replaceIn('{{$randomInt}}') + '\\'' );",
															"pm.environment.set('document_id', 'document_id_' + uuid.v4());",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n        \"name\": \"{{table}}\",\n        \"id\": 1,\n        \"template\": {\n            \"test_field\": \"test_value_of_field\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_global:ugc\",\n            \"facade\": false\n        }\n    }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?audit={{auditValue}}&consistency={{write_consistency_weak}}&tag=postman&debug=true",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "{{auditValue}}"
														},
														{
															"key": "changeId",
															"value": "{{changeId}}",
															"disabled": true
														},
														{
															"key": "consistency",
															"value": "{{write_consistency_weak}}"
														},
														{
															"key": "tag",
															"value": "postman"
														},
														{
															"key": "debug",
															"value": "true"
														}
													]
												},
												"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
											},
											"response": []
										},
										{
											"name": "Creates/Updates content in datastore /sor/1/{table}/{key}",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('auditValue', 'comment:\\'auditValue+'",
															" + pm.variables.replaceIn('{{$randomInt}}') + '\\'' );",
															"pm.environment.set('document_id1', 'document_id_' + uuid.v4());",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n        \"name\": \"{{table}}\",\n        \"id\": 1,\n        \"template\": {\n            \"test_field\": \"test_value_of_field\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_global:ugc\",\n            \"facade\": false\n        }\n    }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id1}}?audit={{auditValue}}&consistency={{write_consistency_weak}}&tag=postman&debug=true",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id1}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "{{auditValue}}"
														},
														{
															"key": "changeId",
															"value": "{{changeId}}",
															"disabled": true
														},
														{
															"key": "consistency",
															"value": "{{write_consistency_weak}}"
														},
														{
															"key": "tag",
															"value": "postman"
														},
														{
															"key": "debug",
															"value": "true"
														}
													]
												},
												"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
											},
											"response": []
										},
										{
											"name": "Retrieves the current version of a piece of content from the data store",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"var responsePropertiesMainActual = Object.keys(jsonData);",
															"var responsePropertiesAvailabilityActual = Object.keys(jsonData.availability);",
															"var responsePropertiesTemplateActual = Object.keys(jsonData.template);",
															"",
															"var responsePropertiesMainExpected = [\"availability\",\"id\",\"name\",\"template\",\"test_field\",\"~table\",\"~version\",\"~lastMutateAt\",\"~deleted\",\"~lastUpdateAt\",\"~id\",\"client\",\"~signature\",\"type\",\"~firstUpdateAt\"];",
															"var responsePropertiesAvailabilityExpected = [\"facade\",\"placement\"];",
															"var responsePropertiesTemplateExpected = [\"test_field\"];",
															"",
															"pm.test(\"Response fields\", function () {",
															"    pm.expect(responsePropertiesMainActual).to.have.deep.members(responsePropertiesMainExpected);",
															"    pm.expect(responsePropertiesAvailabilityExpected).to.have.deep.members(responsePropertiesAvailabilityExpected);",
															"    pm.expect(responsePropertiesTemplateActual).to.have.deep.members(responsePropertiesTemplateExpected);",
															"});",
															"",
															"delete jsonData[\"~lastMutateAt\"];",
															"delete jsonData[\"~lastUpdateAt\"];",
															"delete jsonData[\"~signature\"];",
															"delete jsonData[\"~firstUpdateAt\"];",
															"",
															"const postman_table_name = pm.environment.get(\"table\");",
															"const postman_document_id = pm.environment.get(\"document_id\");",
															"",
															"var responseValuesExpected = {",
															"    \"availability\":{",
															"        \"facade\":false,",
															"        \"placement\":\"ugc_global:ugc\"},",
															"        \"id\":1,",
															"        \"name\":postman_table_name,",
															"        \"template\":{",
															"            \"test_field\":\"test_value_of_field\"",
															"            },",
															"            \"test_field\":\"postman\",",
															"            \"~table\":postman_table_name,",
															"            \"~version\":1,",
															"            \"~deleted\":false,",
															"            \"~id\":postman_document_id,",
															"            \"client\":\"iuliia_customer\",",
															"            \"type\":\"create_table_test\"",
															"}",
															"",
															"",
															"pm.test(\"Response values \", function () {",
															"    pm.expect(jsonData).to.be.eql(responseValuesExpected);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?consistency=STRONG",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id}}"
													],
													"query": [
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "debug",
															"value": "<string>",
															"disabled": true
														}
													]
												},
												"description": "Retrieves the current version of a piece of content from the data store."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?consistency=STRONG&debug=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "debug",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										},
										{
											"name": "Retrieves the current version of a piece of content from the data store",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"var responsePropertiesMainActual = Object.keys(jsonData);",
															"var responsePropertiesAvailabilityActual = Object.keys(jsonData.availability);",
															"var responsePropertiesTemplateActual = Object.keys(jsonData.template);",
															"",
															"var responsePropertiesMainExpected = [\"availability\",\"id\",\"name\",\"template\",\"test_field\",\"~table\",\"~version\",\"~lastMutateAt\",\"~deleted\",\"~lastUpdateAt\",\"~id\",\"client\",\"~signature\",\"type\",\"~firstUpdateAt\"];",
															"var responsePropertiesAvailabilityExpected = [\"facade\",\"placement\"];",
															"var responsePropertiesTemplateExpected = [\"test_field\"];",
															"",
															"pm.test(\"Response fields\", function () {",
															"    pm.expect(responsePropertiesMainActual).to.have.deep.members(responsePropertiesMainExpected);",
															"    pm.expect(responsePropertiesAvailabilityExpected).to.have.deep.members(responsePropertiesAvailabilityExpected);",
															"    pm.expect(responsePropertiesTemplateActual).to.have.deep.members(responsePropertiesTemplateExpected);",
															"});",
															"",
															"delete jsonData[\"~lastMutateAt\"];",
															"delete jsonData[\"~lastUpdateAt\"];",
															"delete jsonData[\"~signature\"];",
															"delete jsonData[\"~firstUpdateAt\"];",
															"",
															"const postman_table_name = pm.environment.get(\"table\");",
															"const postman_document_id = pm.environment.get(\"document_id1\");",
															"",
															"var responseValuesExpected = {",
															"    \"availability\":{",
															"        \"facade\":false,",
															"        \"placement\":\"ugc_global:ugc\"",
															"    },",
															"    \"id\":1,",
															"    \"name\":postman_table_name,",
															"    \"template\":{",
															"        \"test_field\":\"test_value_of_field\"",
															"    },",
															"    \"test_field\":\"postman\",",
															"    \"~table\":postman_table_name,",
															"    \"~version\":1,",
															"    \"~deleted\":false,",
															"    \"~id\":postman_document_id,",
															"    \"client\":\"iuliia_customer\",",
															"    \"type\":\"create_table_test\"",
															"}",
															"",
															"pm.test(\"Response values \", function () {",
															"    pm.expect(jsonData).to.be.eql(responseValuesExpected);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id1}}?consistency=STRONG",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id1}}"
													],
													"query": [
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "debug",
															"value": "<string>",
															"disabled": true
														}
													]
												},
												"description": "Retrieves the current version of a piece of content from the data store."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?consistency=STRONG&debug=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "debug",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										},
										{
											"name": "Delete content in datastore /sor/1/{table}/{key}",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n        \"name\": \"{{table_name_1}}\",\n        \"options\": {\n            \"placement\": \"ugc_eu:ugc\",\n            \"facades\": []\n        },\n        \"template\": {\n            \"test_field\": \"test_value_of_field\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_eu:ugc\",\n            \"facade\": false\n        }\n    }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id1}}?audit={{auditValue}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id1}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "{{auditValue}}"
														}
													]
												},
												"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
											},
											"response": []
										},
										{
											"name": "Retrieves the current version of a piece of content from the data store",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"var responsePropertiesMainActual = Object.keys(jsonData);",
															"var responsePropertiesAvailabilityActual = Object.keys(jsonData.availability);",
															"var responsePropertiesTemplateActual = Object.keys(jsonData.template);",
															"",
															"var responsePropertiesMainExpected = [\"availability\",\"id\",\"name\",\"template\",\"test_field\",\"~table\",\"~version\",\"~lastMutateAt\",\"~deleted\",\"~lastUpdateAt\",\"~id\",\"client\",\"~signature\",\"type\",\"~firstUpdateAt\"];",
															"var responsePropertiesAvailabilityExpected = [\"facade\",\"placement\"];",
															"var responsePropertiesTemplateExpected = [\"test_field\"];",
															"",
															"pm.test(\"Response fields\", function () {",
															"    pm.expect(responsePropertiesMainActual).to.have.deep.members(responsePropertiesMainExpected);",
															"    pm.expect(responsePropertiesAvailabilityExpected).to.have.deep.members(responsePropertiesAvailabilityExpected);",
															"    pm.expect(responsePropertiesTemplateActual).to.have.deep.members(responsePropertiesTemplateExpected);",
															"});",
															"",
															"delete jsonData[\"~lastMutateAt\"];",
															"delete jsonData[\"~lastUpdateAt\"];",
															"delete jsonData[\"~signature\"];",
															"delete jsonData[\"~firstUpdateAt\"];",
															"",
															"const postman_table_name = pm.environment.get(\"table\");",
															"const postman_document_id = pm.environment.get(\"document_id\");",
															"",
															"var responseValuesExpected = {",
															"    \"availability\":{",
															"        \"facade\":false,",
															"        \"placement\":\"ugc_global:ugc\"",
															"    },",
															"    \"id\":1,",
															"    \"name\":postman_table_name,",
															"    \"template\":{",
															"        \"test_field\":\"test_value_of_field\"",
															"    },",
															"    \"test_field\":\"postman\",",
															"    \"~table\":postman_table_name,",
															"    \"~version\":1,",
															"    \"~deleted\":false,",
															"    \"~id\":postman_document_id,",
															"    \"client\":\"iuliia_customer\",",
															"    \"type\":\"create_table_test\"",
															"    }",
															"",
															"pm.test(\"Response values \", function () {",
															"    pm.expect(jsonData).to.be.eql(responseValuesExpected);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?consistency=STRONG",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id}}"
													],
													"query": [
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "debug",
															"value": "<string>",
															"disabled": true
														}
													]
												},
												"description": "Retrieves the current version of a piece of content from the data store."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?consistency=STRONG&debug=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "debug",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										},
										{
											"name": "Retrieves the current version of a piece of content from the data store",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"var responsePropertiesMainActual = Object.keys(jsonData);",
															"",
															"var responsePropertiesMainExpected = [\"client\",\"test_field\",\"type\",\"~id\",\"~table\",\"~version\",\"~signature\",\"~deleted\",\"~firstUpdateAt\",\"~lastUpdateAt\",\"~lastMutateAt\"];",
															"",
															"",
															"pm.test(\"Response fields\", function () {",
															"    pm.expect(responsePropertiesMainActual).to.have.deep.members(responsePropertiesMainExpected);",
															"});",
															"",
															"delete jsonData[\"~lastMutateAt\"];",
															"delete jsonData[\"~lastUpdateAt\"];",
															"delete jsonData[\"~signature\"];",
															"delete jsonData[\"~firstUpdateAt\"];",
															"",
															"const postman_table_name = pm.environment.get(\"table\");",
															"const postman_document_id = pm.environment.get(\"document_id1\");",
															"",
															"var responseValuesExpected = {",
															"        \"type\":\"create_table_test\",",
															"        \"test_field\":\"postman\",",
															"        \"client\":\"iuliia_customer\",",
															"        \"~id\":postman_document_id,",
															"        \"~table\":postman_table_name,",
															"        \"~version\":2,",
															"        \"~deleted\":true",
															"    };",
															"",
															"pm.test(\"Response values \", function () {",
															"    pm.expect(jsonData).to.be.eql(responseValuesExpected);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id1}}?consistency=STRONG",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id1}}"
													],
													"query": [
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "debug",
															"value": "<string>",
															"disabled": true
														}
													]
												},
												"description": "Retrieves the current version of a piece of content from the data store."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?consistency=STRONG&debug=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "debug",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										},
										{
											"name": "Retrieves the current version of a piece of content from the data store",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"var responsePropertiesMainActual = Object.keys(jsonData);",
															"",
															"var responsePropertiesMainExpected = [\"client\",\"test_field\",\"type\",\"~id\",\"~table\",\"~version\",\"~signature\",\"~deleted\",\"~firstUpdateAt\",\"~lastUpdateAt\",\"~lastMutateAt\"];",
															"",
															"",
															"pm.test(\"Response fields\", function () {",
															"    pm.expect(responsePropertiesMainActual).to.have.deep.members(responsePropertiesMainExpected);",
															"});",
															"",
															"delete jsonData[\"~lastMutateAt\"];",
															"delete jsonData[\"~lastUpdateAt\"];",
															"delete jsonData[\"~signature\"];",
															"delete jsonData[\"~firstUpdateAt\"];",
															"",
															"const postman_table_name = pm.environment.get(\"table\");",
															"const postman_document_id = pm.environment.get(\"document_id1\");",
															"",
															"var responseValuesExpected = {",
															"        \"type\":\"create_table_test\",",
															"        \"test_field\":\"postman\",",
															"        \"client\":\"iuliia_customer\",",
															"        \"~id\":postman_document_id,",
															"        \"~table\":postman_table_name,",
															"        \"~version\":2,",
															"        \"~deleted\":true",
															"    }",
															"",
															"pm.test(\"Response values \", function () {",
															"    pm.expect(jsonData).to.eql(responseValuesExpected);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id1}}?consistency=STRONG&includedDeletes=false",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id1}}"
													],
													"query": [
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "debug",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "includedDeletes",
															"value": "false"
														}
													]
												},
												"description": "Retrieves the current version of a piece of content from the data store."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?consistency=STRONG&debug=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "debug",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										},
										{
											"name": "Drops a table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "comment:'table_removal'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is dropped"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									],
									"description": "Request with api-key which has  sor|read|{table} permission to the table which exists returns: List of items in the table (deleted items are not included in the result)"
								},
								{
									"name": "TC: Get data by not existing document_id",
									"item": [
										{
											"name": "Creates table /sor/1/_table/{table}",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('table', 'table_'+uuid.v4());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "placement:'ugc_global:ugc'"
														},
														{
															"key": "audit",
															"value": "comment:'initial+provisioning'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is created"
											},
											"response": []
										},
										{
											"name": "Creates/Updates content in datastore /sor/1/{table}/{key}",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\",\"debug\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('auditValue', 'comment:\\'auditValue+'",
															" + pm.variables.replaceIn('{{$randomInt}}') + '\\'' );",
															"pm.environment.set('document_id', 'document_id_' + uuid.v4());",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n        \"name\": \"{{table}}\",\n        \"id\": 1,\n        \"template\": {\n            \"test_field\": \"test_value_of_field\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_global:ugc\",\n            \"facade\": false\n        }\n    }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?audit={{auditValue}}&consistency={{write_consistency_weak}}&tag=postman&debug=true",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "{{auditValue}}"
														},
														{
															"key": "changeId",
															"value": "{{changeId}}",
															"disabled": true
														},
														{
															"key": "consistency",
															"value": "{{write_consistency_weak}}"
														},
														{
															"key": "tag",
															"value": "postman"
														},
														{
															"key": "debug",
															"value": "true"
														}
													]
												},
												"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
											},
											"response": []
										},
										{
											"name": "Retrieves the current version of a piece of content from the data store",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"",
															"var responsePropertiesMainExpected = [\"type\",\"test_field\",\"client\",\"~id\",\"~table\",\"~version\",\"~signature\",\"~deleted\"];",
															"",
															"pm.test(\"Response fields\", function () {",
															"    pm.expect(jsonData).to.have.keys(responsePropertiesMainExpected);",
															"});",
															"",
															"var postman_table_name = pm.environment.get(\"table\");",
															"",
															"var responseValuesExpected = {",
															"    \"type\": \"create_table_test\",",
															"    \"test_field\": \"postman\",",
															"    \"client\": \"iuliia_customer\",",
															"    \"~id\": \"not_exisiting_document\",",
															"    \"~table\": postman_table_name,",
															"    \"~version\": 0,",
															"    \"~signature\": \"00000000000000000000000000000000\",",
															"    \"~deleted\": true",
															"};",
															"",
															"pm.test(\"Response values \", function () {",
															"    pm.expect(jsonData).to.eql(responseValuesExpected);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/not_exisiting_document?consistency=STRONG",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"not_exisiting_document"
													],
													"query": [
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "debug",
															"value": "<string>",
															"disabled": true
														}
													]
												},
												"description": "Retrieves the current version of a piece of content from the data store."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?consistency=STRONG&debug=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "debug",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										},
										{
											"name": "Drops a table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "comment:'table_removal'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is dropped"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									],
									"description": "Request with api-key which has  sor|read|{table} permission to the table which exists returns: List of items in the table (deleted items are not included in the result)"
								},
								{
									"name": "Retrieves the current version of a piece of content from the data store.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.json()).to.eql({\"reason\":\"not authorized\"});",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-BV-Api-Key",
												"value": "{{api_key_no_rights}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/not_existing_table/:key?consistency=STRONG&debug=true",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"not_existing_table",
												":key"
											],
											"query": [
												{
													"key": "consistency",
													"value": "STRONG"
												},
												{
													"key": "debug",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "key",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										},
										"description": "Retrieves the current version of a piece of content from the data store."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sor/1/:table/:key?consistency=STRONG&debug=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sor",
														"1",
														":table",
														":key"
													],
													"query": [
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "debug",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "table"
														},
														{
															"key": "key"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										}
									]
								}
							]
						},
						{
							"name": "Create/update/delete a piece of data in sor by applying a delta POST /sor/1/{table}/{key}",
							"item": [
								{
									"name": "TC: Request without api-key",
									"item": [
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"reason\":\"not authorized\"});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-Api-key",
														"value": "{{api_key_no_rights}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\"<string>\""
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/not_existing_table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"not_existing_table",
														":key"
													],
													"query": [
														{
															"key": "changeId",
															"value": "<string>"
														},
														{
															"key": "audit",
															"value": "<string>"
														},
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "tag",
															"value": "<string>"
														},
														{
															"key": "tag",
															"value": "<string>"
														},
														{
															"key": "debug",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "key",
															"value": "<string>",
															"description": "(Required) "
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>"
																},
																{
																	"key": "audit",
																	"value": "<string>"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "debug",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Request to not existing table",
									"item": [
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"message\":\"Unknown table: some_table\",\"table\":\"some_table\",\"suppressed\":[]});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \n}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/some_table/:key?audit=comment:'update+data'&consistency=STRONG&tag=<string>",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"some_table",
														":key"
													],
													"query": [
														{
															"key": "changeId",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "comment:'update+data'"
														},
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "tag",
															"value": "<string>"
														},
														{
															"key": "debug",
															"value": "<string>",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "key",
															"value": "<string>",
															"description": "(Required) "
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>"
																},
																{
																	"key": "audit",
																	"value": "<string>"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "debug",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Request to create, update, delete a piece of data",
									"item": [
										{
											"name": "Creates a table",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('table', 'postman_'+uuid.v4());",
															"",
															"pm.environment.set('document_id', 'document_id_' + uuid.v4());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "placement:'ugc_global:ugc'"
														},
														{
															"key": "audit",
															"value": "comment:'initial+provisioning'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is created"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "options",
																	"value": "<string>"
																},
																{
																	"key": "audit",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Retrieves the current version of a piece of content from the data store Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"var responsePropertiesMainActual = Object.keys(jsonData);",
															"var responsePropertiesMainExpected = [\"test_table\",\"customer\",\"~id\",\"~table\",\"~version\",\"~signature\",\"~deleted\"];",
															"",
															"",
															"pm.test(\"Response fields\", function () {",
															"    pm.expect(responsePropertiesMainActual).to.have.deep.members(responsePropertiesMainExpected);",
															"});",
															"",
															"delete jsonData[\"~signature\"];",
															"",
															"const postman_table_name = pm.environment.get(\"table\");",
															"const postman_document_id = pm.environment.get(\"document_id\");",
															"",
															"var responseValuesExpected = {",
															"        \"test_table\":postman_table_name,",
															"        \"customer\":\"postman\",",
															"        \"~id\":postman_document_id,",
															"        \"~table\":postman_table_name,",
															"        \"~version\":0,",
															"        \"~deleted\":true",
															"    }",
															"",
															"pm.test(\"Response values \", function () {",
															"    pm.expect(jsonData).to.eql(responseValuesExpected);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?consistency=STRONG&includedDeletes=false",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id}}"
													],
													"query": [
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "debug",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "includedDeletes",
															"value": "false"
														}
													]
												},
												"description": "Retrieves the current version of a piece of content from the data store."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?consistency=STRONG&debug=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "debug",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"status\":\"CREATED\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?audit=comment:'update+data'&consistency=STRONG&tag=<string>&tag=<string>&=",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "comment:'update+data'"
														},
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "tag",
															"value": "<string>"
														},
														{
															"key": "tag",
															"value": "<string>"
														},
														{
															"key": "debug",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "",
															"value": ""
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>"
																},
																{
																	"key": "audit",
																	"value": "<string>"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "debug",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Retrieves the current version of a piece of content from the data store",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"var responsePropertiesMainActual = Object.keys(jsonData);",
															"var responsePropertiesMainExpected = [\"status\",\"customer\",\"test_table\",\"~id\",\"~table\",\"~version\",\"~signature\",\"~deleted\",\"~firstUpdateAt\",\"~lastUpdateAt\",\"~lastMutateAt\"];",
															"",
															"pm.test(\"Response fields\", function () {",
															"    pm.expect(responsePropertiesMainActual).to.have.deep.members(responsePropertiesMainExpected);",
															"});",
															"",
															"delete jsonData[\"~signature\"];",
															"delete jsonData[\"~firstUpdateAt\"];",
															"delete jsonData[\"~lastUpdateAt\"];",
															"delete jsonData[\"~lastMutateAt\"];",
															"",
															"const postman_table_name = pm.environment.get(\"table\");",
															"const postman_document_id = pm.environment.get(\"document_id\");",
															"",
															"var responseValuesExpected = {",
															"    \"status\":\"CREATED\",",
															"    \"test_table\":postman_table_name,",
															"    \"customer\":\"postman\",",
															"    \"~id\":postman_document_id,",
															"    \"~table\":postman_table_name,",
															"    \"~version\":1,",
															"    \"~deleted\":false",
															"}",
															"",
															"pm.test(\"Response values \", function () {",
															"    pm.expect(jsonData).to.eql(responseValuesExpected);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?consistency=STRONG&includedDeletes=false",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id}}"
													],
													"query": [
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "debug",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "includedDeletes",
															"value": "false"
														}
													]
												},
												"description": "Retrieves the current version of a piece of content from the data store."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?consistency=STRONG&debug=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "debug",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"status\":\"UPDATED\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?audit=comment:'update+data'&consistency=STRONG&tag=<string>&tag=<string>&=",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "comment:'update+data'"
														},
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "tag",
															"value": "<string>"
														},
														{
															"key": "tag",
															"value": "<string>"
														},
														{
															"key": "debug",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "",
															"value": ""
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>"
																},
																{
																	"key": "audit",
																	"value": "<string>"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "debug",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Retrieves the current version of a piece of content from the data store Copy 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"var responsePropertiesMainActual = Object.keys(jsonData);",
															"var responsePropertiesMainExpected = [\"status\",\"customer\",\"test_table\",\"~id\",\"~table\",\"~version\",\"~signature\",\"~deleted\",\"~firstUpdateAt\",\"~lastUpdateAt\",\"~lastMutateAt\"];",
															"",
															"pm.test(\"Response fields\", function () {",
															"    pm.expect(responsePropertiesMainActual).to.have.deep.members(responsePropertiesMainExpected);",
															"});",
															"",
															"delete jsonData[\"~signature\"];",
															"delete jsonData[\"~firstUpdateAt\"];",
															"delete jsonData[\"~lastUpdateAt\"];",
															"delete jsonData[\"~lastMutateAt\"];",
															"",
															"const postman_table_name = pm.environment.get(\"table\");",
															"const postman_document_id = pm.environment.get(\"document_id\");",
															"",
															"var responseValuesExpected = {",
															"    \"status\":\"UPDATED\",",
															"    \"test_table\":postman_table_name,",
															"    \"customer\":\"postman\",",
															"    \"~id\":postman_document_id,",
															"    \"~table\":postman_table_name,",
															"    \"~version\":2,",
															"    \"~deleted\":false",
															"}",
															"",
															"pm.test(\"Response values \", function () {",
															"    pm.expect(jsonData).to.eql(responseValuesExpected);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?consistency=STRONG&includedDeletes=false",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id}}"
													],
													"query": [
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "debug",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "includedDeletes",
															"value": "false"
														}
													]
												},
												"description": "Retrieves the current version of a piece of content from the data store."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?consistency=STRONG&debug=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "debug",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "~"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?audit=comment:'update+data'&consistency=STRONG&tag=<string>&tag=<string>&=",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "comment:'update+data'"
														},
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "tag",
															"value": "<string>"
														},
														{
															"key": "tag",
															"value": "<string>"
														},
														{
															"key": "debug",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "",
															"value": ""
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>"
																},
																{
																	"key": "audit",
																	"value": "<string>"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "debug",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Retrieves the current version of a piece of content from the data store",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"var responsePropertiesMainActual = Object.keys(jsonData);",
															"",
															"var responsePropertiesMainExpected = [\"customer\",\"test_table\",\"~id\",\"~table\",\"~version\",\"~signature\",\"~deleted\",\"~firstUpdateAt\",\"~lastUpdateAt\",\"~lastMutateAt\"];",
															"",
															"pm.test(\"Response fields\", function () {",
															"    pm.expect(responsePropertiesMainActual).to.have.deep.members(responsePropertiesMainExpected);",
															"});",
															"",
															"delete jsonData[\"~lastMutateAt\"];",
															"delete jsonData[\"~lastUpdateAt\"];",
															"delete jsonData[\"~signature\"];",
															"delete jsonData[\"~firstUpdateAt\"];",
															"",
															"const postman_table_name = pm.environment.get(\"table\");",
															"const postman_document_id = pm.environment.get(\"document_id\");",
															"",
															"var responseValuesExpected = {",
															"    \"test_table\":postman_table_name,",
															"    \"customer\":\"postman\",",
															"    \"~id\":postman_document_id,",
															"    \"~table\":postman_table_name,",
															"    \"~version\":3,",
															"    \"~deleted\":true",
															"}",
															"",
															"pm.test(\"Response values \", function () {",
															"    pm.expect(jsonData).to.eql(responseValuesExpected);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?consistency=STRONG&includedDeletes=false",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id}}"
													],
													"query": [
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "debug",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "includedDeletes",
															"value": "false"
														}
													]
												},
												"description": "Retrieves the current version of a piece of content from the data store."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?consistency=STRONG&debug=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "debug",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										},
										{
											"name": "Drops a table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "comment:'table_removal'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is dropped"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Request with empty request body",
									"item": [
										{
											"name": "Creates a table",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('table', 'postman_'+uuid.v4());",
															"",
															"pm.environment.set('document_id', 'document_id_' + uuid.v4());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "placement:'ugc_global:ugc'"
														},
														{
															"key": "audit",
															"value": "comment:'initial+provisioning'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is created"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "options",
																	"value": "<string>"
																},
																{
																	"key": "audit",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.text()).to.eql('Missing required JSON delta request entity.');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/some_document?audit=comment:'update+data'&consistency=STRONG&tag=<string>&debug=true",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"some_document"
													],
													"query": [
														{
															"key": "changeId",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "comment:'update+data'"
														},
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "tag",
															"value": "<string>"
														},
														{
															"key": "debug",
															"value": "true"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>"
																},
																{
																	"key": "audit",
																	"value": "<string>"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "debug",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Drops a table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "comment:'table_removal'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is dropped"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Request with debug set to true, consistency to Global",
									"item": [
										{
											"name": "Creates a table",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('table', 'postman_'+uuid.v4());",
															"",
															"pm.environment.set('document_id', 'document_id_' + uuid.v4());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "placement:'ugc_global:ugc'"
														},
														{
															"key": "audit",
															"value": "comment:'initial+provisioning'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is created"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "options",
																	"value": "<string>"
																},
																{
																	"key": "audit",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?audit=comment:'update+data'&consistency=GLOBAL&tag=test_tag&debug=true",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "comment:'update+data'"
														},
														{
															"key": "consistency",
															"value": "GLOBAL"
														},
														{
															"key": "tag",
															"value": "test_tag"
														},
														{
															"key": "debug",
															"value": "true"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>"
																},
																{
																	"key": "audit",
																	"value": "<string>"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "debug",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Retrieves the current version of a piece of content from the data store",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"var responsePropertiesMainExpected = [\"test_delta\",\"test_table\",\"customer\",\"~id\",\"~table\",\"~version\",\"~signature\",\"~deleted\",\"~firstUpdateAt\",\"~lastUpdateAt\",\"~lastMutateAt\"];",
															"",
															"pm.test(\"Response fields\", function () {",
															"    pm.expect(jsonData).to.have.keys(responsePropertiesMainExpected);",
															"});",
															"",
															"var postman_table_name = pm.environment.get(\"table\");",
															"var postman_document_id = pm.environment.get(\"document_id\");",
															"",
															"var responseValuesExpected = {",
															"    \"~table\": postman_table_name,",
															"    \"~version\": 1,",
															"    \"test_delta\": \"set\",",
															"    \"~deleted\": false,",
															"    \"~id\": postman_document_id,",
															"    \"test_table\": postman_table_name,",
															"    \"customer\": \"postman\"",
															"};",
															"",
															"delete jsonData[\"~lastMutateAt\"];",
															"delete jsonData[\"~lastUpdateAt\"];",
															"delete jsonData[\"~firstUpdateAt\"];",
															"delete jsonData[\"~signature\"];",
															"",
															"pm.test(\"Response values \", function () {",
															"    pm.expect(jsonData.test_delta).to.eql(\"set\");",
															"    pm.expect(jsonData[\"~table\"]).to.eql(postman_table_name);",
															"    pm.expect(jsonData[\"~version\"]).to.eql(1);",
															"    pm.expect(jsonData[\"~deleted\"]).to.eql(false);",
															"    pm.expect(jsonData[\"~id\"]).to.eql(postman_document_id);",
															"    pm.expect(jsonData.test_table).to.eql(postman_table_name);",
															"    pm.expect(jsonData.customer).to.eql(\"postman\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?consistency=STRONG&includedDeletes=false",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id}}"
													],
													"query": [
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "debug",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "includedDeletes",
															"value": "false"
														}
													]
												},
												"description": "Retrieves the current version of a piece of content from the data store."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?consistency=STRONG&debug=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "debug",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										},
										{
											"name": "Drops a table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "comment:'table_removal'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is dropped"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Request with debug set to false, consistency to Non Durable",
									"item": [
										{
											"name": "Creates a table",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('table', 'postman_'+uuid.v4());",
															"",
															"pm.environment.set('document_id', 'document_id_' + uuid.v4());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "placement:'ugc_global:ugc'"
														},
														{
															"key": "audit",
															"value": "comment:'initial+provisioning'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is created"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "options",
																	"value": "<string>"
																},
																{
																	"key": "audit",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{..,\"test_delta\":\"set\"}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/some_document?audit=comment:'update+data'&consistency=NON_DURABLE&tag=postman&debug=false",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"some_document"
													],
													"query": [
														{
															"key": "changeId",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "comment:'update+data'"
														},
														{
															"key": "consistency",
															"value": "NON_DURABLE"
														},
														{
															"key": "tag",
															"value": "postman"
														},
														{
															"key": "debug",
															"value": "false"
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>"
																},
																{
																	"key": "audit",
																	"value": "<string>"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "debug",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Retrieves the current version of a piece of content from the data store",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"var responsePropertiesMainExpected = [\"test_table\",\"customer\",\"~id\",\"~table\",\"~version\",\"~signature\",\"~deleted\"];",
															"",
															"",
															"pm.test(\"Response fields\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(responsePropertiesMainExpected);",
															"});",
															"",
															"var postman_table_name = pm.environment.get(\"table\");",
															"var postman_document_id = pm.environment.get(\"document_id\");",
															"var responseValuesExpected = {",
															"    \"test_table\": postman_table_name,",
															"    \"customer\": \"postman\",",
															"    \"~id\": postman_document_id,",
															"    \"~table\": postman_table_name,",
															"    \"~version\": 0,",
															"    \"~signature\": \"00000000000000000000000000000000\",",
															"    \"~deleted\": true",
															"}",
															"",
															"pm.test(\"Response values \", function () {",
															"    pm.expect(jsonData).to.eql(responseValuesExpected);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?consistency=STRONG&includedDeletes=false",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id}}"
													],
													"query": [
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "debug",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "includedDeletes",
															"value": "false"
														}
													]
												},
												"description": "Retrieves the current version of a piece of content from the data store."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?consistency=STRONG&debug=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "debug",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										},
										{
											"name": "Drops a table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "comment:'table_removal'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is dropped"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.json()).to.eql({\"reason\":\"not authorized\"});",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x.json-delta"
											},
											{
												"key": "X-BV-Api-Key",
												"value": "{{api_key_no_rights}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\"<string>\""
										},
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/not_existing_table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"not_existing_table",
												":key"
											],
											"query": [
												{
													"key": "changeId",
													"value": "<string>"
												},
												{
													"key": "audit",
													"value": "<string>"
												},
												{
													"key": "consistency",
													"value": "STRONG"
												},
												{
													"key": "tag",
													"value": "<string>"
												},
												{
													"key": "tag",
													"value": "<string>"
												},
												{
													"key": "debug",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "key",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										},
										"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sor/1/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sor",
														"1",
														":table",
														":key"
													],
													"query": [
														{
															"key": "changeId",
															"value": "<string>"
														},
														{
															"key": "audit",
															"value": "<string>"
														},
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "tag",
															"value": "<string>"
														},
														{
															"key": "tag",
															"value": "<string>"
														},
														{
															"key": "debug",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "table"
														},
														{
															"key": "key"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"success\": false,\n \"debug\": {}\n}"
										}
									]
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Create/replace a piece of data in the data store PUT /sor/1/{table}/{key}",
							"item": [
								{
									"name": "TC: Request without api-key",
									"item": [
										{
											"name": "Creates or replaces a piece of content in the data store",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('uuid', uuid.v4());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"reason\":\"not authorized\"});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key_no_rights}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/not_existing_table/not_existing_key?consistency=STRONG",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"not_existing_table",
														"not_existing_key"
													],
													"query": [
														{
															"key": "changeId",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "tag",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "debug",
															"value": "<string>",
															"disabled": true
														}
													]
												},
												"description": "Creates or replaces a piece of content in the data store.  Overwrites the old\n version of the content, if it exists.  Expects a literal JSON representation\n of the object."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>"
																},
																{
																	"key": "audit",
																	"value": "<string>"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "debug",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Request to not existing table",
									"item": [
										{
											"name": "Creates or replaces a piece of content in the data store.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"message\":\"Unknown table: some_table\",\"table\":\"some_table\",\"suppressed\":[]});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/some_table/some_key?audit=comment:'create+/+replace+piece+of+data'&consistency=STRONG&tag=<string>&debug=true",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"some_table",
														"some_key"
													],
													"query": [
														{
															"key": "changeId",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "comment:'create+/+replace+piece+of+data'"
														},
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "tag",
															"value": "<string>"
														},
														{
															"key": "debug",
															"value": "true"
														}
													]
												},
												"description": "Creates or replaces a piece of content in the data store.  Overwrites the old\n version of the content, if it exists.  Expects a literal JSON representation\n of the object."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>"
																},
																{
																	"key": "audit",
																	"value": "<string>"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "debug",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Request without audit param",
									"item": [
										{
											"name": "Creates or replaces a piece of content in the data store.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.text()).to.eql('Missing required query parameter: audit');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/some_table/some_key?consistency=STRONG&tag=<string>&debug=true",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"some_table",
														"some_key"
													],
													"query": [
														{
															"key": "changeId",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "tag",
															"value": "<string>"
														},
														{
															"key": "debug",
															"value": "true"
														}
													]
												},
												"description": "Creates or replaces a piece of content in the data store.  Overwrites the old\n version of the content, if it exists.  Expects a literal JSON representation\n of the object."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>"
																},
																{
																	"key": "audit",
																	"value": "<string>"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "debug",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Request to create/replace piece of data",
									"item": [
										{
											"name": "Creates a table",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('table', 'postman_'+uuid.v4());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "placement:'ugc_global:ugc'"
														},
														{
															"key": "audit",
															"value": "comment:'initial+provisioning'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is created"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "options",
																	"value": "<string>"
																},
																{
																	"key": "audit",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates or replaces a piece of content in the data store.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('key', uuid.v4());",
															"pm.environment.set('document_id', 'document_id_' + uuid.v4());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?audit=comment:'create+piece+of+data'&consistency=STRONG",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "comment:'create+piece+of+data'"
														},
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "tag",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "debug",
															"value": "<string>",
															"disabled": true
														}
													]
												},
												"description": "Creates or replaces a piece of content in the data store.  Overwrites the old\n version of the content, if it exists.  Expects a literal JSON representation\n of the object."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>"
																},
																{
																	"key": "audit",
																	"value": "<string>"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "debug",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Retrieves the current version of a piece of content from the data store",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"var responsePropertiesMainExpected = [\"author\",\"rating\",\"title\",\"~table\",\"~version\",\"~lastMutateAt\",\"~deleted\",\"~lastUpdateAt\",\"~id\",\"~signature\",\"test_table\",\"customer\",\"~firstUpdateAt\"];",
															"",
															"pm.test(\"Response fields\", function () {",
															"    pm.expect(jsonData).to.have.keys(responsePropertiesMainExpected);",
															"});",
															"",
															"var postman_table_name = pm.environment.get(\"table\");",
															"var postman_document_id = pm.environment.get(\"document_id\");",
															"",
															"pm.test(\"Response values \", function () {",
															"    pm.expect(jsonData.author).to.eql(\"Bob\");",
															"    pm.expect(jsonData.rating).to.eql(5);",
															"    pm.expect(jsonData.title).to.eql(\"Best Ever!\");",
															"    pm.expect(jsonData[\"~deleted\"]).to.eql(false);",
															"    pm.expect(jsonData[\"~id\"]).to.eql(postman_document_id);",
															"    pm.expect(jsonData[\"~table\"]).to.eql(postman_table_name);",
															"    pm.expect(jsonData[\"~version\"]).to.eql(1);",
															"    pm.expect(jsonData.test_table).to.eql(postman_table_name);",
															"    pm.expect(jsonData.customer).to.eql(\"postman\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?consistency=STRONG&includedDeletes=false",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id}}"
													],
													"query": [
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "debug",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "includedDeletes",
															"value": "false"
														}
													]
												},
												"description": "Retrieves the current version of a piece of content from the data store."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?consistency=STRONG&debug=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "debug",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										},
										{
											"name": "Drops a table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "comment:'table_removal'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is dropped"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "Creates or replaces a piece of content in the data store.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var uuid = require('uuid');",
													"pm.environment.set('uuid', uuid.v4());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.json()).to.eql({\"reason\":\"not authorized\"});",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-BV-API-Key",
												"value": "{{api_key_no_rights}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
										},
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/not_existing_table/:key?consistency=STRONG",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"not_existing_table",
												":key"
											],
											"query": [
												{
													"key": "changeId",
													"value": "<string>",
													"disabled": true
												},
												{
													"key": "audit",
													"value": "<string>",
													"disabled": true
												},
												{
													"key": "consistency",
													"value": "STRONG"
												},
												{
													"key": "tag",
													"value": "<string>",
													"disabled": true
												},
												{
													"key": "debug",
													"value": "<string>",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "key",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										},
										"description": "Creates or replaces a piece of content in the data store.  Overwrites the old\n version of the content, if it exists.  Expects a literal JSON representation\n of the object."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sor/1/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sor",
														"1",
														":table",
														":key"
													],
													"query": [
														{
															"key": "changeId",
															"value": "<string>"
														},
														{
															"key": "audit",
															"value": "<string>"
														},
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "tag",
															"value": "<string>"
														},
														{
															"key": "tag",
															"value": "<string>"
														},
														{
															"key": "debug",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "table"
														},
														{
															"key": "key"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"success\": false,\n \"debug\": {}\n}"
										}
									]
								}
							]
						},
						{
							"name": "Delete a piece of content from sor DELETE /sor/1/{table}/{key}",
							"item": [
								{
									"name": "TC: Request without api-key",
									"item": [
										{
											"name": "Deletes a piece of content from the data store.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"reason\":\"not authorized\"});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key_no_rights}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"<string>\",\n    \"authenticationId\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/not_existing_table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&debug=<string>",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"not_existing_table",
														":key"
													],
													"query": [
														{
															"key": "changeId",
															"value": "<string>"
														},
														{
															"key": "audit",
															"value": "<string>"
														},
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "tag",
															"value": "<string>"
														},
														{
															"key": "debug",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "key",
															"value": "<string>",
															"description": "(Required) "
														}
													]
												},
												"description": "Deletes a piece of content from the data store."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>"
																},
																{
																	"key": "audit",
																	"value": "<string>"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "debug",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Request without api-key",
									"item": [
										{
											"name": "Deletes a piece of content from the data store. Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.text()).to.eql('Missing required query parameter: audit');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-Api-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"some_id\",\n    \"authenticationId\": \"some_auth_id\"\n}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/:table/:key?consistency=STRONG&tag=<string>",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														":table",
														":key"
													],
													"query": [
														{
															"key": "changeId",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "tag",
															"value": "<string>"
														},
														{
															"key": "debug",
															"value": "<string>",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "table",
															"value": "<string>",
															"description": "(Required) "
														},
														{
															"key": "key",
															"value": "<string>",
															"description": "(Required) "
														}
													]
												},
												"description": "Deletes a piece of content from the data store."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>"
																},
																{
																	"key": "audit",
																	"value": "<string>"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "debug",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Request to not existing table",
									"item": [
										{
											"name": "Creates a table",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('table', 'postman_'+uuid.v4());",
															"",
															"pm.environment.set('document_id', 'document_id_' + uuid.v4());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "placement:'ugc_global:ugc'"
														},
														{
															"key": "audit",
															"value": "comment:'initial+provisioning'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is created"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "options",
																	"value": "<string>"
																},
																{
																	"key": "audit",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates or replaces a piece of content in the data store.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('key', uuid.v4());",
															"pm.environment.set('document_id', 'document_id_' + uuid.v4());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?audit=comment:'create+piece+of+data'&consistency=STRONG",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "comment:'create+piece+of+data'"
														},
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "tag",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "debug",
															"value": "<string>",
															"disabled": true
														}
													]
												},
												"description": "Creates or replaces a piece of content in the data store.  Overwrites the old\n version of the content, if it exists.  Expects a literal JSON representation\n of the object."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>"
																},
																{
																	"key": "audit",
																	"value": "<string>"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "debug",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Deletes a piece of content from the data store.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"message\":\"Unknown table: some_table\",\"table\":\"some_table\",\"suppressed\":[]});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-Api-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\n}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/some_table/{{document_id}}?audit=comment:'remove+document'&consistency=STRONG&tag=deletion",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"some_table",
														"{{document_id}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "comment:'remove+document'"
														},
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "tag",
															"value": "deletion"
														},
														{
															"key": "debug",
															"value": "<string>",
															"disabled": true
														}
													]
												},
												"description": "Deletes a piece of content from the data store."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>"
																},
																{
																	"key": "audit",
																	"value": "<string>"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "debug",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Request to remove table",
									"item": [
										{
											"name": "Creates a table",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('table', 'postman_'+uuid.v4());",
															"",
															"pm.environment.set('document_id', 'document_id_' + uuid.v4());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "placement:'ugc_global:ugc'"
														},
														{
															"key": "audit",
															"value": "comment:'initial+provisioning'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is created"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "options",
																	"value": "<string>"
																},
																{
																	"key": "audit",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates or replaces a piece of content in the data store.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('key', uuid.v4());",
															"pm.environment.set('document_id', 'document_id_' + uuid.v4());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?audit=comment:'create+piece+of+data'&consistency=STRONG",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "comment:'create+piece+of+data'"
														},
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "tag",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "debug",
															"value": "<string>",
															"disabled": true
														}
													]
												},
												"description": "Creates or replaces a piece of content in the data store.  Overwrites the old\n version of the content, if it exists.  Expects a literal JSON representation\n of the object."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>"
																},
																{
																	"key": "audit",
																	"value": "<string>"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "debug",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Retrieves the current version of a piece of content from the data store",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"var responsePropertiesMainExpected = [\"author\",\"rating\",\"title\",\"~table\",\"~version\",\"~lastMutateAt\",\"~deleted\",\"~lastUpdateAt\",\"~id\",\"~signature\",\"test_table\",\"customer\",\"~firstUpdateAt\"];",
															"",
															"pm.test(\"Response fields\", function () {",
															"    pm.expect(jsonData).to.have.keys(responsePropertiesMainExpected);",
															"});",
															"",
															"var postman_table_name = pm.environment.get(\"table\");",
															"var postman_document_id = pm.environment.get(\"document_id\");",
															"",
															"delete jsonData[\"~lastMutateAt\"];",
															"delete jsonData[\"~lastUpdateAt\"];",
															"delete jsonData[\"~signature\"];",
															"delete jsonData[\"~firstUpdateAt\"];",
															"",
															"",
															"var responseValuesExpected =  {",
															"    \"author\": \"Bob\",",
															"    \"rating\": 5,",
															"    \"title\": \"Best Ever!\",",
															"    \"~table\": postman_table_name,",
															"    \"~version\": 1,",
															"    \"~deleted\": false,",
															"    \"~id\": postman_document_id,",
															"    \"test_table\": postman_table_name,",
															"    \"customer\": \"postman\",",
															"};",
															"",
															"pm.test(\"Response values \", function () {",
															"    pm.expect(jsonData).to.be.eql(responseValuesExpected);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?consistency=STRONG&includedDeletes=false",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id}}"
													],
													"query": [
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "debug",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "includedDeletes",
															"value": "false"
														}
													]
												},
												"description": "Retrieves the current version of a piece of content from the data store."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?consistency=STRONG&debug=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "debug",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										},
										{
											"name": "Deletes a piece of content from the data store. Copy 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({ success: true });",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-Api-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\n}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?audit=comment:'remove+document'&consistency=STRONG&tag=deletion",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "comment:'remove+document'"
														},
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "tag",
															"value": "deletion"
														},
														{
															"key": "debug",
															"value": "<string>",
															"disabled": true
														}
													]
												},
												"description": "Deletes a piece of content from the data store."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>"
																},
																{
																	"key": "audit",
																	"value": "<string>"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "debug",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Retrieves the current version of a piece of content from the data store",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"var responsePropertiesMainExpected = [\"~table\",\"~version\",\"~lastMutateAt\",\"~deleted\",\"~lastUpdateAt\",\"~id\",\"~signature\",\"test_table\",\"customer\",\"~firstUpdateAt\"];",
															"",
															"pm.test(\"Response fields\", function () {",
															"    pm.expect(jsonData).to.have.keys(responsePropertiesMainExpected);",
															"});",
															"",
															"var postman_table_name = pm.environment.get(\"table\");",
															"var postman_document_id = pm.environment.get(\"document_id\");",
															"",
															"delete jsonData[\"~lastMutateAt\"];",
															"delete jsonData[\"~lastUpdateAt\"];",
															"delete jsonData[\"~signature\"];",
															"delete jsonData[\"~firstUpdateAt\"];",
															"",
															"",
															"var responseValuesExpected =  {",
															"    \"~table\": postman_table_name,",
															"    \"~version\": 2,",
															"    \"~deleted\": true,",
															"    \"~id\": postman_document_id,",
															"    \"test_table\": postman_table_name,",
															"    \"customer\": \"postman\",",
															"};",
															"",
															"pm.test(\"Response values \", function () {",
															"    pm.expect(jsonData).to.be.eql(responseValuesExpected);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?consistency=STRONG&includedDeletes=false",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id}}"
													],
													"query": [
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "debug",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "includedDeletes",
															"value": "false"
														}
													]
												},
												"description": "Retrieves the current version of a piece of content from the data store."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?consistency=STRONG&debug=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "debug",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										}
									]
								},
								{
									"name": "Deletes a piece of content from the data store.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.json()).to.eql({\"reason\":\"not authorized\"});",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-BV-API-Key",
												"value": "{{api_key_no_rights}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"<string>\",\n    \"authenticationId\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/not_existing_table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&debug=<string>",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"not_existing_table",
												":key"
											],
											"query": [
												{
													"key": "changeId",
													"value": "<string>"
												},
												{
													"key": "audit",
													"value": "<string>"
												},
												{
													"key": "consistency",
													"value": "STRONG"
												},
												{
													"key": "tag",
													"value": "<string>"
												},
												{
													"key": "debug",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "key",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										},
										"description": "Deletes a piece of content from the data store."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sor/1/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sor",
														"1",
														":table",
														":key"
													],
													"query": [
														{
															"key": "changeId",
															"value": "<string>"
														},
														{
															"key": "audit",
															"value": "<string>"
														},
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "tag",
															"value": "<string>"
														},
														{
															"key": "tag",
															"value": "<string>"
														},
														{
															"key": "debug",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "table"
														},
														{
															"key": "key"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"success\": false,\n \"debug\": {}\n}"
										}
									]
								}
							]
						},
						{
							"name": "Attempts to reduce the size of the specified content in sor POST /sor/1/{table}/{key}/compact",
							"item": [
								{
									"name": "TC: Request without api-key",
									"item": [
										{
											"name": "Attempts to reduce the size of the specified content in the underlying storage.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"reason\":\"not authorized\"});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/:table/:key/compact?ttl=<string>&readConsistency=STRONG&writeConsistency=STRONG",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														":table",
														":key",
														"compact"
													],
													"query": [
														{
															"key": "ttl",
															"value": "<string>"
														},
														{
															"key": "readConsistency",
															"value": "STRONG"
														},
														{
															"key": "writeConsistency",
															"value": "STRONG"
														}
													],
													"variable": [
														{
															"key": "table",
															"value": "<string>",
															"description": "(Required) "
														},
														{
															"key": "key",
															"value": "<string>",
															"description": "(Required) "
														}
													]
												},
												"description": "Attempts to reduce the size of the specified content in the underlying storage.\n Normally compaction occurs automatically as a side effect of performing a\n {@link #get}, but it can be forced to occur using this method."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key/compact?ttl=<string>&readConsistency=STRONG&writeConsistency=STRONG",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key",
																"compact"
															],
															"query": [
																{
																	"key": "ttl",
																	"value": "<string>"
																},
																{
																	"key": "readConsistency",
																	"value": "STRONG"
																},
																{
																	"key": "writeConsistency",
																	"value": "STRONG"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Request compact for not existing table",
									"item": [
										{
											"name": "Attempts to reduce the size of the specified content in the underlying storage.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"message\":\"Unknown table: not_existing_table\",\"table\":\"not_existing_table\",\"suppressed\":[]});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-BV-Api-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/not_existing_table/{{document_id}}/compact?ttl=200&readConsistency=STRONG&writeConsistency=STRONG",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"not_existing_table",
														"{{document_id}}",
														"compact"
													],
													"query": [
														{
															"key": "ttl",
															"value": "200"
														},
														{
															"key": "readConsistency",
															"value": "STRONG"
														},
														{
															"key": "writeConsistency",
															"value": "STRONG"
														}
													]
												},
												"description": "Attempts to reduce the size of the specified content in the underlying storage.\n Normally compaction occurs automatically as a side effect of performing a\n {@link #get}, but it can be forced to occur using this method."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key/compact?ttl=<string>&readConsistency=STRONG&writeConsistency=STRONG",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key",
																"compact"
															],
															"query": [
																{
																	"key": "ttl",
																	"value": "<string>"
																},
																{
																	"key": "readConsistency",
																	"value": "STRONG"
																},
																{
																	"key": "writeConsistency",
																	"value": "STRONG"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Request compact for not existing document",
									"item": [
										{
											"name": "Creates a table",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('table', 'postman_'+uuid.v4());",
															"",
															"pm.environment.set('document_id', 'document_id_' + uuid.v4());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "placement:'ugc_global:ugc'"
														},
														{
															"key": "audit",
															"value": "comment:'initial+provisioning'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is created"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "options",
																	"value": "<string>"
																},
																{
																	"key": "audit",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Attempts to reduce the size of the specified content in the underlying storage.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-BV-Api-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}/compact?ttl=200&readConsistency=STRONG&writeConsistency=STRONG",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id}}",
														"compact"
													],
													"query": [
														{
															"key": "ttl",
															"value": "200"
														},
														{
															"key": "readConsistency",
															"value": "STRONG"
														},
														{
															"key": "writeConsistency",
															"value": "STRONG"
														}
													]
												},
												"description": "Attempts to reduce the size of the specified content in the underlying storage.\n Normally compaction occurs automatically as a side effect of performing a\n {@link #get}, but it can be forced to occur using this method."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key/compact?ttl=<string>&readConsistency=STRONG&writeConsistency=STRONG",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key",
																"compact"
															],
															"query": [
																{
																	"key": "ttl",
																	"value": "<string>"
																},
																{
																	"key": "readConsistency",
																	"value": "STRONG"
																},
																{
																	"key": "writeConsistency",
																	"value": "STRONG"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Drops a table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "comment:'table_removal'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is dropped"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Request data compaction",
									"item": [
										{
											"name": "Creates a table",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('table', 'postman_'+uuid.v4());",
															"",
															"pm.environment.set('document_id', 'document_id_' + uuid.v4());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "placement:'ugc_global:ugc'"
														},
														{
															"key": "audit",
															"value": "comment:'initial+provisioning'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is created"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "options",
																	"value": "<string>"
																},
																{
																	"key": "audit",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates or replaces a piece of content in the data store.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('key', uuid.v4());",
															"pm.environment.set('document_id', 'document_id_' + uuid.v4());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?audit=comment:'create+piece+of+data'&consistency=STRONG&debug=true",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "comment:'create+piece+of+data'"
														},
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "tag",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "debug",
															"value": "true"
														}
													]
												},
												"description": "Creates or replaces a piece of content in the data store.  Overwrites the old\n version of the content, if it exists.  Expects a literal JSON representation\n of the object."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>"
																},
																{
																	"key": "audit",
																	"value": "<string>"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "debug",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Creates or replaces a piece of content in the data store.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('key', uuid.v4());",
															"pm.environment.set('document_id', 'document_id_' + uuid.v4());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"});",
															"",
															"pm.environment.set(\"change_id\", pm.response.json().debug.changeId);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?audit=comment:'create+piece+of+data'&consistency=STRONG&debug=true",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "comment:'create+piece+of+data'"
														},
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "tag",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "debug",
															"value": "true"
														}
													]
												},
												"description": "Creates or replaces a piece of content in the data store.  Overwrites the old\n version of the content, if it exists.  Expects a literal JSON representation\n of the object."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>"
																},
																{
																	"key": "audit",
																	"value": "<string>"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "debug",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Retrieves all recorded history for a piece of content in the data store before compaction",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"const response = pm.response.json();",
															"const change_id = pm.environment.get(\"change_id\");",
															"const postman_table = pm.environment.get(\"table\");",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    var latestUpdate = response.find(e => e.id === change_id);",
															"    ",
															"    pm.expect(latestUpdate).to.have.keys(\"timestamp\",\"id\",\"delta\",\"tags\");",
															"    ",
															"    delete latestUpdate.timestamp;",
															"",
															"    const expectedUpdate = {",
															"        \"id\":change_id,",
															"        \"delta\":'{\"author\":\"Bob\",\"rating\":5,\"title\":\"Best Ever!\"}',",
															"        \"tags\": []",
															"    };",
															"    pm.expect(latestUpdate).to.eql(expectedUpdate);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}/timeline?data=true&reversed=false&limit=10&consistency=STRONG",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id}}",
														"timeline"
													],
													"query": [
														{
															"key": "data",
															"value": "true"
														},
														{
															"key": "audit",
															"value": "true",
															"disabled": true
														},
														{
															"key": "start",
															"value": "",
															"disabled": true
														},
														{
															"key": "end",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "reversed",
															"value": "false"
														},
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "consistency",
															"value": "STRONG"
														}
													]
												},
												"description": "Retrieves all recorded history for a piece of content in the data store."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key/timeline?data=true&audit=false&start=<string>&end=<string>&reversed=true&limit=10&consistency=STRONG",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key",
																"timeline"
															],
															"query": [
																{
																	"key": "data",
																	"value": "true"
																},
																{
																	"key": "audit",
																	"value": "false"
																},
																{
																	"key": "start",
																	"value": "<string>"
																},
																{
																	"key": "end",
																	"value": "<string>"
																},
																{
																	"key": "reversed",
																	"value": "true"
																},
																{
																	"key": "limit",
																	"value": "10"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										},
										{
											"name": "Attempts to reduce the size of the specified content in the underlying storage.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{key}}/compact?ttl=100&readConsistency=STRONG&writeConsistency=STRONG",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{key}}",
														"compact"
													],
													"query": [
														{
															"key": "ttl",
															"value": "100"
														},
														{
															"key": "readConsistency",
															"value": "STRONG"
														},
														{
															"key": "writeConsistency",
															"value": "STRONG"
														}
													]
												},
												"description": "Attempts to reduce the size of the specified content in the underlying storage.\n Normally compaction occurs automatically as a side effect of performing a\n {@link #get}, but it can be forced to occur using this method."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key/compact?ttl=<string>&readConsistency=STRONG&writeConsistency=STRONG",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key",
																"compact"
															],
															"query": [
																{
																	"key": "ttl",
																	"value": "<string>"
																},
																{
																	"key": "readConsistency",
																	"value": "STRONG"
																},
																{
																	"key": "writeConsistency",
																	"value": "STRONG"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Retrieves all recorded history for a piece of content in the data store after compaction",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"const response = pm.response.json();",
															"const change_id = pm.environment.get(\"change_id\");",
															"const postman_table = pm.environment.get(\"table\");",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    var latestUpdate = response.find(e => e.id === change_id);",
															"    ",
															"    pm.expect(latestUpdate).to.have.keys(\"timestamp\",\"id\",\"delta\",\"tags\");",
															"    ",
															"    delete latestUpdate.timestamp;",
															"",
															"    const expectedUpdate = {",
															"        \"id\":change_id,",
															"        \"delta\":'{\"author\":\"Bob\",\"rating\":5,\"title\":\"Best Ever!\"}',",
															"        \"tags\": []",
															"    };",
															"    pm.expect(latestUpdate).to.eql(expectedUpdate);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}/timeline?data=true&reversed=false&limit=10&consistency=STRONG",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id}}",
														"timeline"
													],
													"query": [
														{
															"key": "data",
															"value": "true"
														},
														{
															"key": "audit",
															"value": "true",
															"disabled": true
														},
														{
															"key": "start",
															"value": "",
															"disabled": true
														},
														{
															"key": "end",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "reversed",
															"value": "false"
														},
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "consistency",
															"value": "STRONG"
														}
													]
												},
												"description": "Retrieves all recorded history for a piece of content in the data store."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key/timeline?data=true&audit=false&start=<string>&end=<string>&reversed=true&limit=10&consistency=STRONG",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key",
																"timeline"
															],
															"query": [
																{
																	"key": "data",
																	"value": "true"
																},
																{
																	"key": "audit",
																	"value": "false"
																},
																{
																	"key": "start",
																	"value": "<string>"
																},
																{
																	"key": "end",
																	"value": "<string>"
																},
																{
																	"key": "reversed",
																	"value": "true"
																},
																{
																	"key": "limit",
																	"value": "10"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										},
										{
											"name": "Drops a table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "comment:'table_removal'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is dropped"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "Attempts to reduce the size of the specified content in the underlying storage.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.json()).to.eql({\"reason\":\"not authorized\"});",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/:table/:key/compact?ttl=<string>&readConsistency=STRONG&writeConsistency=STRONG",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												":table",
												":key",
												"compact"
											],
											"query": [
												{
													"key": "ttl",
													"value": "<string>"
												},
												{
													"key": "readConsistency",
													"value": "STRONG"
												},
												{
													"key": "writeConsistency",
													"value": "STRONG"
												}
											],
											"variable": [
												{
													"key": "table",
													"value": "<string>",
													"description": "(Required) "
												},
												{
													"key": "key",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										},
										"description": "Attempts to reduce the size of the specified content in the underlying storage.\n Normally compaction occurs automatically as a side effect of performing a\n {@link #get}, but it can be forced to occur using this method."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sor/1/:table/:key/compact?ttl=<string>&readConsistency=STRONG&writeConsistency=STRONG",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sor",
														"1",
														":table",
														":key",
														"compact"
													],
													"query": [
														{
															"key": "ttl",
															"value": "<string>"
														},
														{
															"key": "readConsistency",
															"value": "STRONG"
														},
														{
															"key": "writeConsistency",
															"value": "STRONG"
														}
													],
													"variable": [
														{
															"key": "table"
														},
														{
															"key": "key"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"success\": false,\n \"debug\": {}\n}"
										}
									]
								}
							]
						},
						{
							"name": "Retrieves all recorded history for a piece of content in sor GET /sor/1/{table}/{key}/timeline",
							"item": [
								{
									"name": "TC: Request without api-key",
									"item": [
										{
											"name": "Creates table /sor/1/_table/{table}",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('table', 'table_'+uuid.v4());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "placement:'ugc_global:ugc'"
														},
														{
															"key": "audit",
															"value": "comment:'initial+provisioning'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is created"
											},
											"response": []
										},
										{
											"name": "Retrieves all recorded history for a piece of content in the data store.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.text()).to.be.oneOf(['{\"reason\":\"not authorized\"}','[]']);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key_no_rights}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}/timeline",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id}}",
														"timeline"
													],
													"query": [
														{
															"key": "data",
															"value": "true",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "false",
															"disabled": true
														},
														{
															"key": "start",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "end",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "reversed",
															"value": "true",
															"disabled": true
														},
														{
															"key": "limit",
															"value": "10",
															"disabled": true
														},
														{
															"key": "consistency",
															"value": "STRONG",
															"disabled": true
														}
													]
												},
												"description": "Retrieves all recorded history for a piece of content in the data store."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key/timeline?data=true&audit=false&start=<string>&end=<string>&reversed=true&limit=10&consistency=STRONG",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key",
																"timeline"
															],
															"query": [
																{
																	"key": "data",
																	"value": "true"
																},
																{
																	"key": "audit",
																	"value": "false"
																},
																{
																	"key": "start",
																	"value": "<string>"
																},
																{
																	"key": "end",
																	"value": "<string>"
																},
																{
																	"key": "reversed",
																	"value": "true"
																},
																{
																	"key": "limit",
																	"value": "10"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										},
										{
											"name": "Drops a table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "comment:'table_removal'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is dropped"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Request historical data of record",
									"item": [
										{
											"name": "Creates table /sor/1/_table/{table}",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('table', 'table_'+uuid.v4());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "placement:'ugc_global:ugc'"
														},
														{
															"key": "audit",
															"value": "comment:'initial+provisioning'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is created"
											},
											"response": []
										},
										{
											"name": "Creates/Updates content in datastore /sor/1/{table}/{key}",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches\", function () {",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"});",
															"",
															"pm.environment.set(\"change_id\", pm.response.json().debug.changeId);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('auditValue', 'comment:\\'auditValue+'",
															" + pm.variables.replaceIn('{{$randomInt}}') + '\\'' );",
															"pm.environment.set('document_id', 'document_id_' + uuid.v4());",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n        \"name\": \"{{table}}\",\n        \"id\": 1,\n        \"template\": {\n            \"test_field\": \"test_value_of_field\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_global:ugc\",\n            \"facade\": false\n        }\n    }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?audit={{auditValue}}&consistency={{write_consistency_weak}}&tag=postman&debug=true",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "{{auditValue}}"
														},
														{
															"key": "changeId",
															"value": "{{changeId}}",
															"disabled": true
														},
														{
															"key": "consistency",
															"value": "{{write_consistency_weak}}"
														},
														{
															"key": "tag",
															"value": "postman"
														},
														{
															"key": "debug",
															"value": "true"
														}
													]
												},
												"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
											},
											"response": []
										},
										{
											"name": "Retrieves all recorded history for a piece of content in the data store.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Number of timeline events\", function () {",
															"    pm.expect(pm.response.json().length).to.eql(1);",
															"});",
															" ",
															"const postman_table = pm.environment.get(\"table\");",
															"const postman_changeId = pm.environment.get(\"change_id\");",
															" ",
															"pm.test(\"Body matches expectation\", function () {",
															"    const actualBody = pm.response.json();",
															"",
															"    delete actualBody[0].timestamp;",
															"",
															"    const expectedBody = [{",
															"        \"id\": `${postman_changeId}`,",
															"        \"delta\": `{\"availability\":{\"facade\":false,\"placement\":\"ugc_global:ugc\"},\"id\":1,\"name\":\"${postman_table}\",\"template\":{\"test_field\":\"test_value_of_field\"}}`,",
															"        \"tags\": [",
															"            \"postman\"",
															"        ]",
															"    }];",
															"",
															"    pm.expect(actualBody).to.eql(expectedBody);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}/timeline?data=true&audit=false&reversed=true&limit=10&consistency=STRONG",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id}}",
														"timeline"
													],
													"query": [
														{
															"key": "data",
															"value": "true"
														},
														{
															"key": "audit",
															"value": "false"
														},
														{
															"key": "start",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "end",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "reversed",
															"value": "true"
														},
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "consistency",
															"value": "STRONG"
														}
													]
												},
												"description": "Retrieves all recorded history for a piece of content in the data store."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key/timeline?data=true&audit=false&start=<string>&end=<string>&reversed=true&limit=10&consistency=STRONG",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key",
																"timeline"
															],
															"query": [
																{
																	"key": "data",
																	"value": "true"
																},
																{
																	"key": "audit",
																	"value": "false"
																},
																{
																	"key": "start",
																	"value": "<string>"
																},
																{
																	"key": "end",
																	"value": "<string>"
																},
																{
																	"key": "reversed",
																	"value": "true"
																},
																{
																	"key": "limit",
																	"value": "10"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										},
										{
											"name": "Creates/Updates content in datastore /sor/1/{table}/{key}",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches\", function () {",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"});",
															"",
															"pm.environment.set(\"change_id\", pm.response.json().debug.changeId);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n        \"name\": \"{{table}}\",\n        \"id\": 2,\n        \"extra_field\": \"some_value\",\n        \"template\": {\n            \"test_field\": \"test_value_of_field\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_global:ugc\",\n            \"facade\": false\n        }\n    }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?audit={{auditValue}}&consistency={{write_consistency_weak}}&tag=postman&debug=true",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "{{auditValue}}"
														},
														{
															"key": "changeId",
															"value": "{{changeId}}",
															"disabled": true
														},
														{
															"key": "consistency",
															"value": "{{write_consistency_weak}}"
														},
														{
															"key": "tag",
															"value": "postman"
														},
														{
															"key": "debug",
															"value": "true"
														}
													]
												},
												"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
											},
											"response": []
										},
										{
											"name": "Retrieves all recorded history for a piece of content in the data store.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const postman_table = pm.environment.get(\"table\");",
															"const postman_document_id = pm.environment.get(\"document_id\");",
															"const postman_change_id = pm.environment.get(\"change_id\");",
															"const actualBody = pm.response.json();",
															"",
															"pm.test(\"Assert latest update\", function () {",
															"    const actualUpdate = actualBody.find (update => update.id === postman_change_id);",
															"",
															"    delete actualUpdate.timestamp;",
															"",
															"    const expectedUpdate = {",
															"        \"id\": `${postman_change_id}`,",
															"        \"delta\": `{\"availability\":{\"facade\":false,\"placement\":\"ugc_global:ugc\"},\"extra_field\":\"some_value\",\"id\":2,\"name\":\"${postman_table}\",\"template\":{\"test_field\":\"test_value_of_field\"}}`,",
															"        \"tags\": [",
															"            \"postman\"",
															"        ]",
															"    };",
															"    pm.expect(actualUpdate).to.eql(expectedUpdate);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}/timeline?data=true&audit=false&reversed=true&limit=10&consistency=STRONG",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id}}",
														"timeline"
													],
													"query": [
														{
															"key": "data",
															"value": "true"
														},
														{
															"key": "audit",
															"value": "false"
														},
														{
															"key": "start",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "end",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "reversed",
															"value": "true"
														},
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "consistency",
															"value": "STRONG"
														}
													]
												},
												"description": "Retrieves all recorded history for a piece of content in the data store."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key/timeline?data=true&audit=false&start=<string>&end=<string>&reversed=true&limit=10&consistency=STRONG",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key",
																"timeline"
															],
															"query": [
																{
																	"key": "data",
																	"value": "true"
																},
																{
																	"key": "audit",
																	"value": "false"
																},
																{
																	"key": "start",
																	"value": "<string>"
																},
																{
																	"key": "end",
																	"value": "<string>"
																},
																{
																	"key": "reversed",
																	"value": "true"
																},
																{
																	"key": "limit",
																	"value": "10"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										},
										{
											"name": "Creates/Updates content in datastore /sor/1/{table}/{key}",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches\", function () {",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"});",
															"",
															"pm.environment.set(\"change_id\", pm.response.json().debug.changeId);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n        \"name\": \"{{table}}\",\n        \"template\": {\n            \"test_field\": \"test_value_of_field\",\n            \"new_field\": \"inside_template\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_global:ugc\",\n            \"facade\": false\n        }\n    }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?audit={{auditValue}}&consistency={{write_consistency_weak}}&tag=postman&debug=true",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "{{auditValue}}"
														},
														{
															"key": "changeId",
															"value": "{{changeId}}",
															"disabled": true
														},
														{
															"key": "consistency",
															"value": "{{write_consistency_weak}}"
														},
														{
															"key": "tag",
															"value": "postman"
														},
														{
															"key": "debug",
															"value": "true"
														}
													]
												},
												"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
											},
											"response": []
										},
										{
											"name": "Retrieves all recorded history for a piece of content in the data store. Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var actualBody = pm.response.json();",
															"const postman_table = pm.environment.get(\"table\");",
															"const postman_document_id = pm.environment.get(\"document_id\");",
															"const postman_change_id = pm.environment.get(\"change_id\");",
															"",
															"pm.test(\"Assert latest update\", function () {",
															"    const actualUpdate = actualBody.find (update => update.id === postman_change_id);",
															"",
															"    delete actualUpdate.timestamp;",
															"",
															"    const expectedUpdate = {",
															"         \"id\": `${postman_change_id}`,",
															"        \"delta\": `{\"availability\":{\"facade\":false,\"placement\":\"ugc_global:ugc\"},\"name\":\"${postman_table}\",\"template\":{\"new_field\":\"inside_template\",\"test_field\":\"test_value_of_field\"}}`,",
															"        \"tags\": [\"postman\"]",
															"    }",
															"    pm.expect(actualUpdate).to.eql(expectedUpdate);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}/timeline?data=true&audit=false&reversed=true&limit=10&consistency=STRONG",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id}}",
														"timeline"
													],
													"query": [
														{
															"key": "data",
															"value": "true"
														},
														{
															"key": "audit",
															"value": "false"
														},
														{
															"key": "start",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "end",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "reversed",
															"value": "true"
														},
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "consistency",
															"value": "STRONG"
														}
													]
												},
												"description": "Retrieves all recorded history for a piece of content in the data store."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key/timeline?data=true&audit=false&start=<string>&end=<string>&reversed=true&limit=10&consistency=STRONG",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key",
																"timeline"
															],
															"query": [
																{
																	"key": "data",
																	"value": "true"
																},
																{
																	"key": "audit",
																	"value": "false"
																},
																{
																	"key": "start",
																	"value": "<string>"
																},
																{
																	"key": "end",
																	"value": "<string>"
																},
																{
																	"key": "reversed",
																	"value": "true"
																},
																{
																	"key": "limit",
																	"value": "10"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										},
										{
											"name": "Delete content in datastore /sor/1/{table}/{key}",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches\", function () {",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n        \"name\": \"{{table}}\",\n        \"options\": {\n            \"placement\": \"ugc_eu:ugc\",\n            \"facades\": []\n        },\n        \"template\": {\n            \"test_field\": \"test_value_of_field\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_eu:ugc\",\n            \"facade\": false\n        }\n    }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?audit={{auditValue}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "{{auditValue}}"
														}
													]
												},
												"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
											},
											"response": []
										},
										{
											"name": "Retrieves all recorded history for a piece of content in the data store.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var actualBody = pm.response.json();",
															"const postman_table = pm.environment.get(\"table\");",
															"const postman_document_id = pm.environment.get(\"document_id\");",
															"const postman_change_id = pm.environment.get(\"change_id\");",
															"",
															"pm.test(\"Assert deleted update\", function () {",
															"    const deletedUpdate = actualBody.filter(obj => {",
															"        return obj.delta === \"~\";",
															"    }); ",
															"    ",
															"    pm.expect(deletedUpdate[0]).to.have.keys(\"timestamp\",\"id\",\"delta\",\"tags\");",
															"    pm.expect(deletedUpdate[0].delta).to.eql(\"~\");",
															"    pm.expect(deletedUpdate[0].tags).to.eql([]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}/timeline?data=true&audit=false&reversed=true&limit=10&consistency=STRONG",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id}}",
														"timeline"
													],
													"query": [
														{
															"key": "data",
															"value": "true"
														},
														{
															"key": "audit",
															"value": "false"
														},
														{
															"key": "start",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "end",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "reversed",
															"value": "true"
														},
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "consistency",
															"value": "STRONG"
														}
													]
												},
												"description": "Retrieves all recorded history for a piece of content in the data store."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key/timeline?data=true&audit=false&start=<string>&end=<string>&reversed=true&limit=10&consistency=STRONG",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key",
																"timeline"
															],
															"query": [
																{
																	"key": "data",
																	"value": "true"
																},
																{
																	"key": "audit",
																	"value": "false"
																},
																{
																	"key": "start",
																	"value": "<string>"
																},
																{
																	"key": "end",
																	"value": "<string>"
																},
																{
																	"key": "reversed",
																	"value": "true"
																},
																{
																	"key": "limit",
																	"value": "10"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										},
										{
											"name": "Drops a table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "comment:'table_removal'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is dropped"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Request historical data of record with audit records",
									"item": [
										{
											"name": "Creates table /sor/1/_table/{table}",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('table', 'table_'+uuid.v4());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "placement:'ugc_global:ugc'"
														},
														{
															"key": "audit",
															"value": "comment:'initial+provisioning'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is created"
											},
											"response": []
										},
										{
											"name": "Creates/Updates content in datastore /sor/1/{table}/{key}",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches\", function () {",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"});",
															"",
															"pm.environment.set(\"change_id\", pm.response.json().debug.changeId);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('auditValue', 'comment:\\'auditValue+'",
															" + pm.variables.replaceIn('{{$randomInt}}') + '\\'' );",
															"pm.environment.set('document_id', 'document_id_' + uuid.v4());",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n        \"name\": \"{{table}}\",\n        \"id\": 1,\n        \"template\": {\n            \"test_field\": \"test_value_of_field\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_global:ugc\",\n            \"facade\": false\n        }\n    }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?audit={{auditValue}}&consistency={{write_consistency_weak}}&tag=postman&debug=true",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "{{auditValue}}"
														},
														{
															"key": "changeId",
															"value": "{{changeId}}",
															"disabled": true
														},
														{
															"key": "consistency",
															"value": "{{write_consistency_weak}}"
														},
														{
															"key": "tag",
															"value": "postman"
														},
														{
															"key": "debug",
															"value": "true"
														}
													]
												},
												"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
											},
											"response": []
										},
										{
											"name": "Retrieves all recorded history for a piece of content in the data store with data true and audit true",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"message\": \"Audit data is no longer accessable via EmoDB app servers.\",\"suppressed\": []});",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}/timeline?data=true&audit=true&reversed=false&limit=10&consistency=STRONG",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id}}",
														"timeline"
													],
													"query": [
														{
															"key": "data",
															"value": "true"
														},
														{
															"key": "audit",
															"value": "true"
														},
														{
															"key": "start",
															"value": "",
															"disabled": true
														},
														{
															"key": "end",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "reversed",
															"value": "false"
														},
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "consistency",
															"value": "STRONG"
														}
													]
												},
												"description": "Retrieves all recorded history for a piece of content in the data store."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key/timeline?data=true&audit=false&start=<string>&end=<string>&reversed=true&limit=10&consistency=STRONG",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key",
																"timeline"
															],
															"query": [
																{
																	"key": "data",
																	"value": "true"
																},
																{
																	"key": "audit",
																	"value": "false"
																},
																{
																	"key": "start",
																	"value": "<string>"
																},
																{
																	"key": "end",
																	"value": "<string>"
																},
																{
																	"key": "reversed",
																	"value": "true"
																},
																{
																	"key": "limit",
																	"value": "10"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										},
										{
											"name": "Retrieves all recorded history for a piece of content with data false and audit false in the data store",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql([]);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}/timeline?data=false&audit=false&reversed=false&limit=10&consistency=STRONG",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id}}",
														"timeline"
													],
													"query": [
														{
															"key": "data",
															"value": "false"
														},
														{
															"key": "audit",
															"value": "false"
														},
														{
															"key": "start",
															"value": "",
															"disabled": true
														},
														{
															"key": "end",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "reversed",
															"value": "false"
														},
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "consistency",
															"value": "STRONG"
														}
													]
												},
												"description": "Retrieves all recorded history for a piece of content in the data store."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key/timeline?data=true&audit=false&start=<string>&end=<string>&reversed=true&limit=10&consistency=STRONG",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key",
																"timeline"
															],
															"query": [
																{
																	"key": "data",
																	"value": "true"
																},
																{
																	"key": "audit",
																	"value": "false"
																},
																{
																	"key": "start",
																	"value": "<string>"
																},
																{
																	"key": "end",
																	"value": "<string>"
																},
																{
																	"key": "reversed",
																	"value": "true"
																},
																{
																	"key": "limit",
																	"value": "10"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										},
										{
											"name": "Drops a table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "comment:'table_removal'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is dropped"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Request historical data of record with reversed false, start and end params",
									"item": [
										{
											"name": "Creates table /sor/1/_table/{table}",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('table', 'table_'+uuid.v4());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "placement:'ugc_global:ugc'"
														},
														{
															"key": "audit",
															"value": "comment:'initial+provisioning'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is created"
											},
											"response": []
										},
										{
											"name": "Creates/Updates content in datastore /sor/1/{table}/{key}",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches\", function () {",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"});",
															"",
															"pm.environment.set(\"change_id\", pm.response.json().debug.changeId);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('auditValue', 'comment:\\'auditValue+'",
															" + pm.variables.replaceIn('{{$randomInt}}') + '\\'' );",
															"pm.environment.set('document_id', 'document_id_' + uuid.v4());",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n        \"name\": \"{{table}}\",\n        \"id\": 1,\n        \"template\": {\n            \"test_field\": \"test_value_of_field\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_global:ugc\",\n            \"facade\": false\n        }\n    }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?audit={{auditValue}}&consistency={{write_consistency_weak}}&tag=postman&debug=true",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "{{auditValue}}"
														},
														{
															"key": "changeId",
															"value": "{{changeId}}",
															"disabled": true
														},
														{
															"key": "consistency",
															"value": "{{write_consistency_weak}}"
														},
														{
															"key": "tag",
															"value": "postman"
														},
														{
															"key": "debug",
															"value": "true"
														}
													]
												},
												"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
											},
											"response": []
										},
										{
											"name": "Retrieves all recorded history for a piece of content in the data store_reversed true and start < end",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.text()).to.eql(\"Start must be >=End for reversed ranges\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('startUUID', new Date(Date.now() - 1000 * 120).toISOString());",
															"pm.environment.set('endUUID', new Date(Date.now() + 1000 * 120).toISOString());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}/timeline?data=true&start={{startUUID}}&end={{endUUID}}&reversed=true&limit=10&consistency=STRONG",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id}}",
														"timeline"
													],
													"query": [
														{
															"key": "data",
															"value": "true"
														},
														{
															"key": "audit",
															"value": "true",
															"disabled": true
														},
														{
															"key": "start",
															"value": "{{startUUID}}"
														},
														{
															"key": "end",
															"value": "{{endUUID}}"
														},
														{
															"key": "reversed",
															"value": "true"
														},
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "consistency",
															"value": "STRONG"
														}
													]
												},
												"description": "Retrieves all recorded history for a piece of content in the data store."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key/timeline?data=true&audit=false&start=<string>&end=<string>&reversed=true&limit=10&consistency=STRONG",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key",
																"timeline"
															],
															"query": [
																{
																	"key": "data",
																	"value": "true"
																},
																{
																	"key": "audit",
																	"value": "false"
																},
																{
																	"key": "start",
																	"value": "<string>"
																},
																{
																	"key": "end",
																	"value": "<string>"
																},
																{
																	"key": "reversed",
																	"value": "true"
																},
																{
																	"key": "limit",
																	"value": "10"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										},
										{
											"name": "Retrieves all recorded history for a piece of content in the data store_reversed true and start >= end",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const response = pm.response.json();",
															"const change_id = pm.environment.get(\"change_id\");",
															"const postman_table = pm.environment.get(\"table\");",
															"",
															"pm.test(\"Number of elements in the response\", function () {",
															"    pm.expect(response.length, 1);",
															"});",
															"    ",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(response[0]).to.have.keys(\"timestamp\",\"id\",\"delta\",\"tags\");",
															"    pm.expect(response[0].id).to.eql(change_id);",
															"    pm.expect(response[0].delta).to.eql(`{\"availability\":{\"facade\":false,\"placement\":\"ugc_global:ugc\"},\"id\":1,\"name\":\"${postman_table}\",\"template\":{\"test_field\":\"test_value_of_field\"}}`);",
															"    pm.expect(response[0].tags).to.eql([\"postman\"]);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('startUUID', new Date(Date.now() - 1000 * 120).toISOString());",
															"pm.environment.set('endUUID', new Date(Date.now() + 1000 * 120).toISOString());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}/timeline?data=true&start={{endUUID}}&end={{startUUID}}&reversed=true&limit=10&consistency=STRONG",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id}}",
														"timeline"
													],
													"query": [
														{
															"key": "data",
															"value": "true"
														},
														{
															"key": "audit",
															"value": "true",
															"disabled": true
														},
														{
															"key": "start",
															"value": "{{endUUID}}"
														},
														{
															"key": "end",
															"value": "{{startUUID}}"
														},
														{
															"key": "reversed",
															"value": "true"
														},
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "consistency",
															"value": "STRONG"
														}
													]
												},
												"description": "Retrieves all recorded history for a piece of content in the data store."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key/timeline?data=true&audit=false&start=<string>&end=<string>&reversed=true&limit=10&consistency=STRONG",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key",
																"timeline"
															],
															"query": [
																{
																	"key": "data",
																	"value": "true"
																},
																{
																	"key": "audit",
																	"value": "false"
																},
																{
																	"key": "start",
																	"value": "<string>"
																},
																{
																	"key": "end",
																	"value": "<string>"
																},
																{
																	"key": "reversed",
																	"value": "true"
																},
																{
																	"key": "limit",
																	"value": "10"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										},
										{
											"name": "Drops a table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "comment:'table_removal'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is dropped"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Request historical data of record with reversed false/true with end params",
									"item": [
										{
											"name": "Creates table /sor/1/_table/{table}",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('table', 'table_'+uuid.v4());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "placement:'ugc_global:ugc'"
														},
														{
															"key": "audit",
															"value": "comment:'initial+provisioning'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is created"
											},
											"response": []
										},
										{
											"name": "Creates/Updates content in datastore /sor/1/{table}/{key}",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches\", function () {",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"});",
															"",
															"pm.environment.set(\"change_id\", pm.response.json().debug.changeId);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('auditValue', 'comment:\\'auditValue+'",
															" + pm.variables.replaceIn('{{$randomInt}}') + '\\'' );",
															"pm.environment.set('document_id', 'document_id_' + uuid.v4());",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n        \"name\": \"{{table}}\",\n        \"id\": 1,\n        \"template\": {\n            \"test_field\": \"test_value_of_field\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_global:ugc\",\n            \"facade\": false\n        }\n    }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?audit={{auditValue}}&consistency={{write_consistency_weak}}&tag=postman&debug=true",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "{{auditValue}}"
														},
														{
															"key": "changeId",
															"value": "{{changeId}}",
															"disabled": true
														},
														{
															"key": "consistency",
															"value": "{{write_consistency_weak}}"
														},
														{
															"key": "tag",
															"value": "postman"
														},
														{
															"key": "debug",
															"value": "true"
														}
													]
												},
												"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
											},
											"response": []
										},
										{
											"name": "Retrieves all recorded history for a piece of content in the data store reversed false",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
															"const retryRequest = eval(retryRequestCall.retryRequest);",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var response = pm.response;",
															"const change_id = pm.environment.get(\"change_id\");",
															"const postman_table = pm.environment.get(\"table\");",
															"",
															"pm.test(\"Number of elements in the response\", asyncTest(async function () {",
															"    if(response.json().length < 1) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();            ",
															"            return response.json().length > 0;",
															"        },\"Retrying to get timeline\");    ",
															"    }",
															"    pm.expect(response.json().length > 0);",
															"}));",
															"    ",
															"pm.test(\"Body matches string\", asyncTest(async function () {",
															"    if(response.json().length < 1) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.json().length > 0;",
															"        },\"Retrying to verify body\");    ",
															"    }",
															"    const jsonData = response.json();",
															"    pm.expect(jsonData[0]).to.have.keys(\"timestamp\",\"id\",\"delta\",\"tags\");",
															"    pm.expect(jsonData[0].id).to.eql(change_id);",
															"    pm.expect(jsonData[0].delta).to.eql(`{\"availability\":{\"facade\":false,\"placement\":\"ugc_global:ugc\"},\"id\":1,\"name\":\"${postman_table}\",\"template\":{\"test_field\":\"test_value_of_field\"}}`);",
															"    pm.expect(jsonData[0].tags).to.eql([\"postman\"]);",
															"}));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set('startUUID', new Date(Date.now()).toISOString());",
															"pm.environment.set(\"includeTags\", \"true\");",
															"",
															"const url = `${pm.environment.get(\"baseurl_dc1\")}/sor/1/${pm.environment.get(\"table\")}/${pm.environment.get(\"document_id\")}/timeline?data=true&start=${pm.environment.get(\"startUUID\")}&reversed=false&limit=${pm.environment.get(\"limit\")}&consistency=STRONG`;",
															"pm.environment.set(\"url\", url);",
															"pm.environment.set(\"method\", \"GET\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}/timeline?data=true&end={{startUUID}}&reversed=false&limit=10&consistency=STRONG",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id}}",
														"timeline"
													],
													"query": [
														{
															"key": "data",
															"value": "true"
														},
														{
															"key": "audit",
															"value": "true",
															"disabled": true
														},
														{
															"key": "start",
															"value": "",
															"disabled": true
														},
														{
															"key": "end",
															"value": "{{startUUID}}"
														},
														{
															"key": "reversed",
															"value": "false"
														},
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "consistency",
															"value": "STRONG"
														}
													]
												},
												"description": "Retrieves all recorded history for a piece of content in the data store."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key/timeline?data=true&audit=false&start=<string>&end=<string>&reversed=true&limit=10&consistency=STRONG",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key",
																"timeline"
															],
															"query": [
																{
																	"key": "data",
																	"value": "true"
																},
																{
																	"key": "audit",
																	"value": "false"
																},
																{
																	"key": "start",
																	"value": "<string>"
																},
																{
																	"key": "end",
																	"value": "<string>"
																},
																{
																	"key": "reversed",
																	"value": "true"
																},
																{
																	"key": "limit",
																	"value": "10"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										},
										{
											"name": "Retrieves all recorded history for a piece of content in the data store reversed true",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const retryRequestCall = JSON.parse(pm.globals.get(\"retryRequestCall\"));",
															"const retryRequest = eval(retryRequestCall.retryRequest);",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var response = pm.response;",
															"const change_id = pm.environment.get(\"change_id\");",
															"const postman_table = pm.environment.get(\"table\");",
															"",
															"pm.test(\"Number of elements in the response\", asyncTest(async function () {",
															"    if(response.json().length < 1) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();            ",
															"            return response.json().length > 0;",
															"        },\"Retrying to verify number of elements\");    ",
															"    }",
															"    pm.expect(response.json().length > 0);",
															"}));",
															"    ",
															"pm.test(\"Body matches string\", asyncTest(async function () {",
															"    if(response.json().length < 1) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();            ",
															"            return response.json().length > 0;",
															"        },\"Retrying to verify body\");    ",
															"    }",
															"    pm.expect(response.json()[0]).to.have.keys(\"timestamp\",\"id\",\"delta\",\"tags\");",
															"    pm.expect(response.json()[0].id).to.eql(change_id);",
															"    pm.expect(response.json()[0].delta).to.eql(`{\"availability\":{\"facade\":false,\"placement\":\"ugc_global:ugc\"},\"id\":1,\"name\":\"${postman_table}\",\"template\":{\"test_field\":\"test_value_of_field\"}}`);",
															"    pm.expect(response.json()[0].tags).to.eql([\"postman\"]);",
															"}));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('startUUID', new Date(Date.now()).toISOString());",
															"",
															"pm.environment.set(\"includeTags\", \"true\");",
															"",
															"const url = `${pm.environment.get(\"baseurl_dc1\")}/sor/1/${pm.environment.get(\"table\")}/${pm.environment.get(\"document_id\")}/timeline?data=true&start=${pm.environment.get(\"startUUID\")}&reversed=true&limit=${pm.environment.get(\"limit\")}&consistency=STRONG`;",
															"pm.environment.set(\"url\", url);",
															"pm.environment.set(\"method\", \"GET\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}/timeline?data=true&start={{startUUID}}&reversed=true&limit=10&consistency=STRONG",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id}}",
														"timeline"
													],
													"query": [
														{
															"key": "data",
															"value": "true"
														},
														{
															"key": "audit",
															"value": "true",
															"disabled": true
														},
														{
															"key": "start",
															"value": "{{startUUID}}"
														},
														{
															"key": "end",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "reversed",
															"value": "true"
														},
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "consistency",
															"value": "STRONG"
														}
													]
												},
												"description": "Retrieves all recorded history for a piece of content in the data store."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key/timeline?data=true&audit=false&start=<string>&end=<string>&reversed=true&limit=10&consistency=STRONG",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key",
																"timeline"
															],
															"query": [
																{
																	"key": "data",
																	"value": "true"
																},
																{
																	"key": "audit",
																	"value": "false"
																},
																{
																	"key": "start",
																	"value": "<string>"
																},
																{
																	"key": "end",
																	"value": "<string>"
																},
																{
																	"key": "reversed",
																	"value": "true"
																},
																{
																	"key": "limit",
																	"value": "10"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										},
										{
											"name": "Drops a table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "comment:'table_removal'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is dropped"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Request historical data of record from newest to oldest",
									"item": [
										{
											"name": "Retrieves all recorded history for not existing table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"message\":\"Unknown table: not_existing_table\",\"table\":\"not_existing_table\",\"suppressed\":[]});",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set('startUUID', new Date(Date.now()).toISOString());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/not_existing_table/not_existing_document/timeline?data=true&reversed=false&limit=10&consistency=STRONG",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"not_existing_table",
														"not_existing_document",
														"timeline"
													],
													"query": [
														{
															"key": "data",
															"value": "true"
														},
														{
															"key": "audit",
															"value": "true",
															"disabled": true
														},
														{
															"key": "start",
															"value": "",
															"disabled": true
														},
														{
															"key": "end",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "reversed",
															"value": "false"
														},
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "consistency",
															"value": "STRONG"
														}
													]
												},
												"description": "Retrieves all recorded history for a piece of content in the data store."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key/timeline?data=true&audit=false&start=<string>&end=<string>&reversed=true&limit=10&consistency=STRONG",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key",
																"timeline"
															],
															"query": [
																{
																	"key": "data",
																	"value": "true"
																},
																{
																	"key": "audit",
																	"value": "false"
																},
																{
																	"key": "start",
																	"value": "<string>"
																},
																{
																	"key": "end",
																	"value": "<string>"
																},
																{
																	"key": "reversed",
																	"value": "true"
																},
																{
																	"key": "limit",
																	"value": "10"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										}
									]
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const retryRequest = () => {",
											"    return new Promise((resolve, reject) => {",
											"        pm.sendRequest({",
											"            url: `${pm.environment.get(\"url\")}`,",
											"            method: `${pm.environment.get(\"method\")}`,",
											"            header: {",
											"                \"X-BV-API-Key\": pm.environment.get(\"api_key\"),",
											"            }",
											"        }, (error, response) => {",
											"            if (error) {",
											"                reject(error);",
											"            }",
											"            resolve(response);            ",
											"        });",
											"    });",
											"};",
											"",
											"const retryRequestCall = {",
											"    retryRequest: retryRequest.toString()",
											"};",
											"",
											"pm.globals.set(\"retryRequestCall\", JSON.stringify(retryRequestCall));"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "Retrieves a list of content items in a particular table. GET /sor/1/{table}",
					"item": [
						{
							"name": "TC: Request without api-key",
							"item": [
								{
									"name": "Retrieves a list of content items in a particular table",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.json()).to.eql({\"reason\":\"not authorized\"});",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/some_table_name?from=<string>&limit=10&includeDeletes=false&consistency=STRONG&debug=<string>&APIKey=<string>",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"some_table_name"
											],
											"query": [
												{
													"key": "from",
													"value": "<string>"
												},
												{
													"key": "limit",
													"value": "10"
												},
												{
													"key": "includeDeletes",
													"value": "false"
												},
												{
													"key": "consistency",
													"value": "STRONG"
												},
												{
													"key": "debug",
													"value": "<string>"
												},
												{
													"key": "APIKey",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										},
										"description": "Retrieves a list of content items in a particular table.  To retrieve <em>all</em> items in a table set the\n limit param to a very large value (eg. Long.MAX_VALUE), but for large tables be sure your client can stream the\n results without exhausting all available memory."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sor/1/:table?from=<string>&limit=10&includeDeletes=false&consistency=STRONG&debug=<string>&APIKey=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sor",
														"1",
														":table"
													],
													"query": [
														{
															"key": "from",
															"value": "<string>"
														},
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "includeDeletes",
															"value": "false"
														},
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "debug",
															"value": "<string>"
														},
														{
															"key": "APIKey",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "table"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										}
									]
								}
							]
						},
						{
							"name": "TC: Request to not existing table",
							"item": [
								{
									"name": "Retrieves a list of content items in a particular table",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.json()).to.eql({\"message\":\"Unknown table: some_table_name\",\"table\":\"some_table_name\",\"suppressed\":[]});",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/some_table_name?APIKey={{api_key}}",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"some_table_name"
											],
											"query": [
												{
													"key": "from",
													"value": "<string>",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "10",
													"disabled": true
												},
												{
													"key": "includeDeletes",
													"value": "false",
													"disabled": true
												},
												{
													"key": "consistency",
													"value": "STRONG",
													"disabled": true
												},
												{
													"key": "debug",
													"value": "<string>",
													"disabled": true
												},
												{
													"key": "APIKey",
													"value": "{{api_key}}",
													"description": "(Required) "
												}
											]
										},
										"description": "Retrieves a list of content items in a particular table.  To retrieve <em>all</em> items in a table set the\n limit param to a very large value (eg. Long.MAX_VALUE), but for large tables be sure your client can stream the\n results without exhausting all available memory."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sor/1/:table?from=<string>&limit=10&includeDeletes=false&consistency=STRONG&debug=<string>&APIKey=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sor",
														"1",
														":table"
													],
													"query": [
														{
															"key": "from",
															"value": "<string>"
														},
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "includeDeletes",
															"value": "false"
														},
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "debug",
															"value": "<string>"
														},
														{
															"key": "APIKey",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "table"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										}
									]
								}
							]
						},
						{
							"name": "TC: List of items from table including/excluding deleted items",
							"item": [
								{
									"name": "Creates table /sor/1/_table/{table}",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var uuid = require('uuid');",
													"pm.environment.set('table', 'table_'+uuid.v4());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-BV-API-Key",
												"type": "text",
												"value": "{{api_key}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"_table",
												"{{table}}"
											],
											"query": [
												{
													"key": "options",
													"value": "placement:'ugc_global:ugc'"
												},
												{
													"key": "audit",
													"value": "comment:'initial+provisioning'"
												}
											]
										},
										"description": "Returns a SuccessResponse if table is created"
									},
									"response": []
								},
								{
									"name": "Creates/Updates content in datastore /sor/1/{table}/{key}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.json()).to.have.keys(\"success\",\"debug\");",
													"    pm.expect(pm.response.json().success).to.eql(true);",
													"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var uuid = require('uuid');",
													"pm.environment.set('auditValue', 'comment:\\'auditValue+'",
													" + pm.variables.replaceIn('{{$randomInt}}') + '\\'' );",
													"pm.environment.set('document_id', 'document_id_' + uuid.v4());",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-BV-API-Key",
												"type": "text",
												"value": "{{api_key}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n        \"name\": \"{{table}}\",\n        \"id\": 1,\n        \"template\": {\n            \"test_field\": \"test_value_of_field\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_global:ugc\",\n            \"facade\": false\n        }\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?audit={{auditValue}}&consistency={{write_consistency_weak}}&tag=postman&debug=true",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"{{table}}",
												"{{document_id}}"
											],
											"query": [
												{
													"key": "audit",
													"value": "{{auditValue}}"
												},
												{
													"key": "changeId",
													"value": "{{changeId}}",
													"disabled": true
												},
												{
													"key": "consistency",
													"value": "{{write_consistency_weak}}"
												},
												{
													"key": "tag",
													"value": "postman"
												},
												{
													"key": "debug",
													"value": "true"
												}
											]
										},
										"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
									},
									"response": []
								},
								{
									"name": "Creates/Updates content in datastore /sor/1/{table}/{key}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.json()).to.have.keys(\"success\",\"debug\");",
													"    pm.expect(pm.response.json().success).to.eql(true);",
													"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var uuid = require('uuid');",
													"pm.environment.set('auditValue', 'comment:\\'auditValue+'",
													" + pm.variables.replaceIn('{{$randomInt}}') + '\\'' );",
													"pm.environment.set('document_id1', 'document_id_' + uuid.v4());",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-BV-API-Key",
												"type": "text",
												"value": "{{api_key}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n        \"name\": \"{{table}}\",\n        \"id\": 1,\n        \"template\": {\n            \"test_field\": \"test_value_of_field\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_global:ugc\",\n            \"facade\": false\n        }\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id1}}?audit={{auditValue}}&consistency={{write_consistency_weak}}&tag=postman&debug=true",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"{{table}}",
												"{{document_id1}}"
											],
											"query": [
												{
													"key": "audit",
													"value": "{{auditValue}}"
												},
												{
													"key": "changeId",
													"value": "{{changeId}}",
													"disabled": true
												},
												{
													"key": "consistency",
													"value": "{{write_consistency_weak}}"
												},
												{
													"key": "tag",
													"value": "postman"
												},
												{
													"key": "debug",
													"value": "true"
												}
											]
										},
										"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
									},
									"response": []
								},
								{
									"name": "Retrieves a list of content items in a particular table",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"jsonData.forEach(update => {",
													"    var responsePropertiesMainActual = Object.keys(update);",
													"    var responsePropertiesAvailabilityActual = Object.keys(update.availability);",
													"    var responsePropertiesTemplateActual = Object.keys(update.template);",
													"",
													"    var responsePropertiesMainExpected = [\"availability\",\"id\",\"name\",\"template\",\"test_field\",\"~table\",\"~version\",\"~lastMutateAt\",\"~deleted\",\"~lastUpdateAt\",\"~id\",\"client\",\"~signature\",\"type\",\"~firstUpdateAt\"];",
													"    var responsePropertiesAvailabilityExpected = [\"facade\",\"placement\"];",
													"    var responsePropertiesTemplateExpected = [\"test_field\"];",
													"",
													"    pm.test(\"Response fields\", function () {",
													"        pm.expect(responsePropertiesMainActual).to.have.deep.members(responsePropertiesMainExpected);",
													"        pm.expect(responsePropertiesAvailabilityActual).to.have.deep.members(responsePropertiesAvailabilityExpected);",
													"        pm.expect(responsePropertiesTemplateActual).to.have.deep.members(responsePropertiesTemplateExpected);",
													"    });",
													"",
													"    delete update[\"~lastMutateAt\"];",
													"    delete update[\"~lastUpdateAt\"];",
													"    delete update[\"~signature\"];",
													"    delete update[\"~firstUpdateAt\"];",
													"",
													"    const postman_table_name = pm.environment.get(\"table\");",
													"    const postman_document_id = pm.environment.get(\"document_id\");",
													"",
													"    const responseValuesExpected = {",
													"        \"~deleted\":false,",
													"        \"~id\":postman_document_id,",
													"        \"~table\":postman_table_name,",
													"        \"~version\":1,",
													"        \"availability\":{",
													"            \"facade\":false,",
													"            \"placement\":\"ugc_global:ugc\"",
													"        },",
													"        \"client\":\"iuliia_customer\",",
													"        \"id\":1,",
													"        \"name\":postman_table_name,",
													"        \"template\":{",
													"            \"test_field\":\"test_value_of_field\"",
													"        },",
													"        \"test_field\":\"postman\",",
													"        \"type\":\"create_table_test\"",
													"    };",
													"",
													"    const postman_document_id_1 = pm.environment.get(\"document_id1\");",
													"",
													"    const responseValuesExpected1 = {",
													"        ...responseValuesExpected,",
													"        \"~id\": postman_document_id_1",
													"    };",
													"",
													"    pm.test(\"Response values \", function () {",
													"        pm.expect(JSON.stringify(update)).to.be.deep.oneOf([JSON.stringify(responseValuesExpected), JSON.stringify(responseValuesExpected1)]);",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/{{table}}?APIKey={{api_key}}",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"{{table}}"
											],
											"query": [
												{
													"key": "from",
													"value": "<string>",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "10",
													"disabled": true
												},
												{
													"key": "includeDeletes",
													"value": "false",
													"disabled": true
												},
												{
													"key": "consistency",
													"value": "STRONG",
													"disabled": true
												},
												{
													"key": "debug",
													"value": "<string>",
													"disabled": true
												},
												{
													"key": "APIKey",
													"value": "{{api_key}}",
													"description": "(Required) "
												}
											]
										},
										"description": "Retrieves a list of content items in a particular table.  To retrieve <em>all</em> items in a table set the\n limit param to a very large value (eg. Long.MAX_VALUE), but for large tables be sure your client can stream the\n results without exhausting all available memory."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sor/1/:table?from=<string>&limit=10&includeDeletes=false&consistency=STRONG&debug=<string>&APIKey=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sor",
														"1",
														":table"
													],
													"query": [
														{
															"key": "from",
															"value": "<string>"
														},
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "includeDeletes",
															"value": "false"
														},
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "debug",
															"value": "<string>"
														},
														{
															"key": "APIKey",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "table"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										}
									]
								},
								{
									"name": "Delete content in datastore /sor/1/{table}/{key}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-BV-API-Key",
												"type": "text",
												"value": "{{api_key}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n        \"name\": \"{{table_name_1}}\",\n        \"options\": {\n            \"placement\": \"ugc_eu:ugc\",\n            \"facades\": []\n        },\n        \"template\": {\n            \"test_field\": \"test_value_of_field\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_eu:ugc\",\n            \"facade\": false\n        }\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id1}}?audit={{auditValue}}",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"{{table}}",
												"{{document_id1}}"
											],
											"query": [
												{
													"key": "audit",
													"value": "{{auditValue}}"
												}
											]
										},
										"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
									},
									"response": []
								},
								{
									"name": "Retrieves a list of content items with deleted in a particular table",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"jsonData.forEach(update => {",
													"    var responsePropertiesMainActual = Object.keys(update);",
													"    var responsePropertiesAvailabilityActual = Object.keys(update.availability);",
													"    var responsePropertiesTemplateActual = Object.keys(update.template);",
													"",
													"    var responsePropertiesMainExpected = [\"availability\",\"id\",\"name\",\"template\",\"test_field\",\"~table\",\"~version\",\"~lastMutateAt\",\"~deleted\",\"~lastUpdateAt\",\"~id\",\"client\",\"~signature\",\"type\",\"~firstUpdateAt\"];",
													"    var responsePropertiesAvailabilityExpected = [\"facade\",\"placement\"];",
													"    var responsePropertiesTemplateExpected = [\"test_field\"];",
													"",
													"    pm.test(\"Response fields\", function () {",
													"        pm.expect(responsePropertiesMainActual).to.have.deep.members(responsePropertiesMainExpected);",
													"        pm.expect(responsePropertiesAvailabilityActual).to.have.deep.members(responsePropertiesAvailabilityExpected);",
													"        pm.expect(responsePropertiesTemplateActual).to.have.deep.members(responsePropertiesTemplateExpected);",
													"    });",
													"",
													"    delete update[\"~lastMutateAt\"];",
													"    delete update[\"~lastUpdateAt\"];",
													"    delete update[\"~signature\"];",
													"    delete update[\"~firstUpdateAt\"];",
													"",
													"    const postman_table_name = pm.environment.get(\"table\");",
													"    const postman_document_id = pm.environment.get(\"document_id\");",
													"    const postman_document_id_1 = pm.environment.get(\"document_id1\");",
													"   ",
													"    const responseValuesExpected = {",
													"        \"~deleted\":false,",
													"        \"~id\":postman_document_id,",
													"        \"~table\":postman_table_name,",
													"        \"~version\":1,",
													"        \"availability\":{",
													"            \"facade\":false,",
													"            \"placement\":\"ugc_global:ugc\"",
													"        },",
													"        \"client\":\"iuliia_customer\",",
													"        \"id\":1,",
													"        \"name\":postman_table_name,",
													"        \"template\":{",
													"            \"test_field\":\"test_value_of_field\"",
													"        },",
													"        \"test_field\":\"postman\",",
													"        \"type\":\"create_table_test\"",
													"    };",
													"",
													"    const responseValuesExpected1 = {",
													"        ...responseValuesExpected,",
													"        \"~id\": postman_document_id_1",
													"    };",
													"",
													"    pm.test(\"Response values \", function () {",
													"        pm.expect(JSON.stringify(update)).to.be.deep.oneOf([JSON.stringify(responseValuesExpected), JSON.stringify(responseValuesExpected1)]);",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/{{table}}?APIKey={{api_key}}",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"{{table}}"
											],
											"query": [
												{
													"key": "from",
													"value": "<string>",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "10",
													"disabled": true
												},
												{
													"key": "includeDeletes",
													"value": "false",
													"disabled": true
												},
												{
													"key": "consistency",
													"value": "STRONG",
													"disabled": true
												},
												{
													"key": "debug",
													"value": "<string>",
													"disabled": true
												},
												{
													"key": "APIKey",
													"value": "{{api_key}}",
													"description": "(Required) "
												}
											]
										},
										"description": "Retrieves a list of content items in a particular table.  To retrieve <em>all</em> items in a table set the\n limit param to a very large value (eg. Long.MAX_VALUE), but for large tables be sure your client can stream the\n results without exhausting all available memory."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sor/1/:table?from=<string>&limit=10&includeDeletes=false&consistency=STRONG&debug=<string>&APIKey=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sor",
														"1",
														":table"
													],
													"query": [
														{
															"key": "from",
															"value": "<string>"
														},
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "includeDeletes",
															"value": "false"
														},
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "debug",
															"value": "<string>"
														},
														{
															"key": "APIKey",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "table"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										}
									]
								},
								{
									"name": "Retrieves a list of content items without deleted in a particular table",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"There is only one element returned\", function () {",
													"    pm.expect(jsonData.length).eql(1);",
													"});",
													"",
													"jsonData = jsonData[0];",
													"var responsePropertiesMainActual = Object.keys(jsonData);",
													"var responsePropertiesAvailabilityActual = Object.keys(jsonData.availability);",
													"var responsePropertiesTemplateActual = Object.keys(jsonData.template);",
													"",
													"var responsePropertiesMainExpected = [\"availability\",\"id\",\"name\",\"template\",\"test_field\",\"~table\",\"~version\",\"~lastMutateAt\",\"~deleted\",\"~lastUpdateAt\",\"~id\",\"client\",\"~signature\",\"type\",\"~firstUpdateAt\"];",
													"var responsePropertiesAvailabilityExpected = [\"facade\",\"placement\"];",
													"var responsePropertiesTemplateExpected = [\"test_field\"];",
													"",
													"pm.test(\"Response fields\", function () {",
													"    pm.expect(responsePropertiesMainActual).to.have.deep.members(responsePropertiesMainExpected);",
													"    pm.expect(responsePropertiesAvailabilityActual).to.have.deep.members(responsePropertiesAvailabilityExpected);",
													"    pm.expect(responsePropertiesTemplateActual).to.have.deep.members(responsePropertiesTemplateExpected);",
													"});",
													"",
													"delete jsonData[\"~lastMutateAt\"];",
													"delete jsonData[\"~lastUpdateAt\"];",
													"delete jsonData[\"~signature\"];",
													"delete jsonData[\"~firstUpdateAt\"];",
													"",
													"const postman_table_name = pm.environment.get(\"table\");",
													"const postman_document_id = pm.environment.get(\"document_id\");",
													"",
													"var responseValuesExpected = {",
													"    \"~deleted\":false,",
													"    \"~id\":postman_document_id,",
													"    \"~table\":postman_table_name,",
													"    \"~version\":1,",
													"    \"availability\":{",
													"        \"facade\":false,",
													"        \"placement\":\"ugc_global:ugc\"",
													"    },",
													"    \"client\":\"iuliia_customer\",",
													"    \"id\":1,",
													"    \"name\":postman_table_name,",
													"    \"template\":{",
													"        \"test_field\":\"test_value_of_field\"",
													"    },",
													"    \"test_field\":\"postman\",",
													"    \"type\":\"create_table_test\"",
													"}",
													"",
													"pm.test(\"Response values \", function () {",
													"    pm.expect(jsonData).to.eql(responseValuesExpected);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/{{table}}?includeDeletes=false&APIKey={{api_key}}",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"{{table}}"
											],
											"query": [
												{
													"key": "from",
													"value": "<string>",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "10",
													"disabled": true
												},
												{
													"key": "includeDeletes",
													"value": "false"
												},
												{
													"key": "consistency",
													"value": "STRONG",
													"disabled": true
												},
												{
													"key": "debug",
													"value": "<string>",
													"disabled": true
												},
												{
													"key": "APIKey",
													"value": "{{api_key}}",
													"description": "(Required) "
												}
											]
										},
										"description": "Retrieves a list of content items in a particular table.  To retrieve <em>all</em> items in a table set the\n limit param to a very large value (eg. Long.MAX_VALUE), but for large tables be sure your client can stream the\n results without exhausting all available memory."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sor/1/:table?from=<string>&limit=10&includeDeletes=false&consistency=STRONG&debug=<string>&APIKey=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sor",
														"1",
														":table"
													],
													"query": [
														{
															"key": "from",
															"value": "<string>"
														},
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "includeDeletes",
															"value": "false"
														},
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "debug",
															"value": "<string>"
														},
														{
															"key": "APIKey",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "table"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										}
									]
								},
								{
									"name": "Drops a table",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-BV-API-Key",
												"type": "text",
												"value": "{{api_key}}"
											}
										],
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"_table",
												"{{table}}"
											],
											"query": [
												{
													"key": "audit",
													"value": "comment:'table_removal'"
												}
											]
										},
										"description": "Returns a SuccessResponse if table is dropped"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														":table"
													],
													"query": [
														{
															"key": "audit",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "table"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"success\": false,\n \"debug\": {}\n}"
										}
									]
								}
							],
							"description": "Request with api-key which has  sor|read|{table} permission to the table which exists returns: List of items in the table (deleted items are not included in the result)"
						},
						{
							"name": "TC: List of sorted/unsorted items from table, including deleted items",
							"item": [
								{
									"name": "Creates table /sor/1/_table/{table}",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var uuid = require('uuid');",
													"pm.environment.set('table', 'table_'+uuid.v4());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-BV-API-Key",
												"type": "text",
												"value": "{{api_key}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"_table",
												"{{table}}"
											],
											"query": [
												{
													"key": "options",
													"value": "placement:'ugc_global:ugc'"
												},
												{
													"key": "audit",
													"value": "comment:'initial+provisioning'"
												}
											]
										},
										"description": "Returns a SuccessResponse if table is created"
									},
									"response": []
								},
								{
									"name": "Creates/Updates content in datastore /sor/1/{table}/{key}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.json()).to.have.keys(\"success\",\"debug\");",
													"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
													"    pm.expect(pm.response.json().success).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var uuid = require('uuid');",
													"pm.environment.set('auditValue', 'comment:\\'auditValue+'",
													" + pm.variables.replaceIn('{{$randomInt}}') + '\\'' );",
													"pm.environment.set('document_id', 'document_id_' + uuid.v4());",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-BV-API-Key",
												"type": "text",
												"value": "{{api_key}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n        \"name\": \"{{table}}\",\n        \"id\": 4,\n        \"template\": {\n            \"test_field\": \"test_value_of_field_4\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_global:ugc\",\n            \"facade\": false\n        }\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?audit={{auditValue}}&consistency={{write_consistency_weak}}&tag=postman&debug=true",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"{{table}}",
												"{{document_id}}"
											],
											"query": [
												{
													"key": "audit",
													"value": "{{auditValue}}"
												},
												{
													"key": "changeId",
													"value": "{{changeId}}",
													"disabled": true
												},
												{
													"key": "consistency",
													"value": "{{write_consistency_weak}}"
												},
												{
													"key": "tag",
													"value": "postman"
												},
												{
													"key": "debug",
													"value": "true"
												}
											]
										},
										"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
									},
									"response": []
								},
								{
									"name": "Creates/Updates content in datastore /sor/1/{table}/{key}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.json()).to.have.keys(\"success\",\"debug\");",
													"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
													"    pm.expect(pm.response.json().success).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var uuid = require('uuid');",
													"pm.environment.set('auditValue', 'comment:\\'auditValue+'",
													" + pm.variables.replaceIn('{{$randomInt}}') + '\\'' );",
													"pm.environment.set('document_id1', 'document_id_' + uuid.v4());",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-BV-API-Key",
												"type": "text",
												"value": "{{api_key}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n        \"name\": \"{{table}}\",\n        \"id\": 3,\n        \"template\": {\n            \"test_field\": \"test_value_of_field_3\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_global:ugc\",\n            \"facade\": false\n        }\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id1}}?audit={{auditValue}}&consistency={{write_consistency_weak}}&tag=postman&debug=true",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"{{table}}",
												"{{document_id1}}"
											],
											"query": [
												{
													"key": "audit",
													"value": "{{auditValue}}"
												},
												{
													"key": "changeId",
													"value": "{{changeId}}",
													"disabled": true
												},
												{
													"key": "consistency",
													"value": "{{write_consistency_weak}}"
												},
												{
													"key": "tag",
													"value": "postman"
												},
												{
													"key": "debug",
													"value": "true"
												}
											]
										},
										"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
									},
									"response": []
								},
								{
									"name": "Creates/Updates content in datastore /sor/1/{table}/{key}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.json()).to.have.keys(\"success\",\"debug\");",
													"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
													"    pm.expect(pm.response.json().success).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var uuid = require('uuid');",
													"pm.environment.set('auditValue', 'comment:\\'auditValue+'",
													" + pm.variables.replaceIn('{{$randomInt}}') + '\\'' );",
													"pm.environment.set('document_id2', 'document_id_' + uuid.v4());",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-BV-API-Key",
												"type": "text",
												"value": "{{api_key}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n        \"name\": \"{{table}}\",\n        \"id\": 2,\n        \"template\": {\n            \"test_field\": \"test_value_of_field_2\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_global:ugc\",\n            \"facade\": false\n        }\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id2}}?audit={{auditValue}}&consistency={{write_consistency_weak}}&tag=postman&debug=true",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"{{table}}",
												"{{document_id2}}"
											],
											"query": [
												{
													"key": "audit",
													"value": "{{auditValue}}"
												},
												{
													"key": "changeId",
													"value": "{{changeId}}",
													"disabled": true
												},
												{
													"key": "consistency",
													"value": "{{write_consistency_weak}}"
												},
												{
													"key": "tag",
													"value": "postman"
												},
												{
													"key": "debug",
													"value": "true"
												}
											]
										},
										"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
									},
									"response": []
								},
								{
									"name": "Creates/Updates content in datastore /sor/1/{table}/{key}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.json()).to.have.keys(\"success\",\"debug\");",
													"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
													"    pm.expect(pm.response.json().success).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var uuid = require('uuid');",
													"pm.environment.set('auditValue', 'comment:\\'auditValue+'",
													" + pm.variables.replaceIn('{{$randomInt}}') + '\\'' );",
													"pm.environment.set('document_id3', 'document_id_' + uuid.v4());",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-BV-API-Key",
												"type": "text",
												"value": "{{api_key}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n        \"name\": \"{{table}}\",\n        \"id\": 5,\n        \"template\": {\n            \"test_field\": \"test_value_of_field_5\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_global:ugc\",\n            \"facade\": false\n        }\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id3}}?audit={{auditValue}}&consistency={{write_consistency_weak}}&tag=postman&debug=true",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"{{table}}",
												"{{document_id3}}"
											],
											"query": [
												{
													"key": "audit",
													"value": "{{auditValue}}"
												},
												{
													"key": "changeId",
													"value": "{{changeId}}",
													"disabled": true
												},
												{
													"key": "consistency",
													"value": "{{write_consistency_weak}}"
												},
												{
													"key": "tag",
													"value": "postman"
												},
												{
													"key": "debug",
													"value": "true"
												}
											]
										},
										"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
									},
									"response": []
								},
								{
									"name": "Retrieves a list of unsorted content items in a particular table, debug set false, without includede deletes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var documentIds = [pm.environment.get(\"document_id2\"), pm.environment.get(\"document_id\"), pm.environment.get(\"document_id3\"), pm.environment.get(\"document_id1\")];",
													"",
													"pm.test(\"Number of returned Updates\", function () {",
													"    pm.expect(jsonData.length).to.eql(4);",
													"});",
													"",
													"documentIds.forEach((documentId) => {",
													"    var update = jsonData.find(update => update[\"~id\"] === documentId);",
													"    if (!update) {",
													"        pm.expect.fail(`Document '${documentId}' not found`);",
													"        return;",
													"    }",
													"",
													"    var responsePropertiesMainExpected = [\"availability\",\"id\",\"name\",\"template\",\"test_field\",\"~table\",\"~lastMutateAt\",\"~deleted\",\"~lastUpdateAt\",\"~id\",\"client\",\"~signature\",\"type\",\"~firstUpdateAt\"];",
													"    var responsePropertiesAvailabilityExpected = [\"facade\",\"placement\"];",
													"    var responsePropertiesTemplateExpected = [\"test_field\"];",
													"",
													"    pm.test(\"Response fields\", function () {",
													"        pm.expect(update).to.have.keys(responsePropertiesMainExpected);",
													"        pm.expect(update.availability).to.have.keys(responsePropertiesAvailabilityExpected);",
													"        pm.expect(update.template).to.have.keys(responsePropertiesTemplateExpected);",
													"    });",
													"",
													"    delete update[\"~lastMutateAt\"];",
													"    delete update[\"~lastUpdateAt\"];",
													"    delete update[\"~signature\"];",
													"    delete update[\"~firstUpdateAt\"];",
													"    delete update.id;",
													"    delete update.template.test_field;",
													"",
													"    var responseValuesExpected = [];",
													"    var postman_table_name = pm.environment.get(\"table\");",
													"    var responseValuesExpected = {",
													"        \"~deleted\": false,",
													"        \"~id\": documentId,",
													"        \"~table\": postman_table_name,",
													"        \"availability\": {",
													"            \"facade\": false,",
													"            \"placement\": \"ugc_global:ugc\"",
													"        },",
													"        \"client\": \"iuliia_customer\",",
													"        \"name\": postman_table_name,",
													"        \"template\": {},",
													"        \"test_field\": \"postman\",",
													"        \"type\": \"create_table_test\"",
													"    };",
													"",
													"    pm.test(\"Response values \", function () {",
													"        pm.expect(responseValuesExpected).to.eql(update);",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/{{table}}?consistency={{write_consistency_weak}}&debug=false&APIKey={{api_key}}",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"{{table}}"
											],
											"query": [
												{
													"key": "from",
													"value": "<string>",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "10",
													"disabled": true
												},
												{
													"key": "includeDeletes",
													"value": "false",
													"disabled": true
												},
												{
													"key": "consistency",
													"value": "{{write_consistency_weak}}"
												},
												{
													"key": "debug",
													"value": "false"
												},
												{
													"key": "APIKey",
													"value": "{{api_key}}",
													"description": "(Required) "
												}
											]
										},
										"description": "Retrieves a list of content items in a particular table.  To retrieve <em>all</em> items in a table set the\n limit param to a very large value (eg. Long.MAX_VALUE), but for large tables be sure your client can stream the\n results without exhausting all available memory."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sor/1/:table?from=<string>&limit=10&includeDeletes=false&consistency=STRONG&debug=<string>&APIKey=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sor",
														"1",
														":table"
													],
													"query": [
														{
															"key": "from",
															"value": "<string>"
														},
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "includeDeletes",
															"value": "false"
														},
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "debug",
															"value": "<string>"
														},
														{
															"key": "APIKey",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "table"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										}
									]
								},
								{
									"name": "Delete content in datastore /sor/1/{table}/{key}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-BV-API-Key",
												"type": "text",
												"value": "{{api_key}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n        \"name\": \"{{table}}\",\n        \"options\": {\n            \"placement\": \"ugc_eu:ugc\",\n            \"facades\": []\n        },\n        \"template\": {\n            \"test_field\": \"test_value_of_field\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_eu:ugc\",\n            \"facade\": false\n        }\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id1}}?audit={{auditValue}}",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"{{table}}",
												"{{document_id1}}"
											],
											"query": [
												{
													"key": "audit",
													"value": "{{auditValue}}"
												}
											]
										},
										"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
									},
									"response": []
								},
								{
									"name": "Retrieves a list of content items with includeDeletes is false in a particular table",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Number of returned Updates\", function () {",
													"    pm.expect(jsonData.length).to.eql(3);",
													"});",
													"",
													"var postman_table_name = pm.environment.get(\"table\");",
													"var documentIds = [pm.environment.get(\"document_id2\"), pm.environment.get(\"document_id\"), pm.environment.get(\"document_id3\")];",
													"",
													"documentIds.forEach((documentId) => {",
													"    var update = jsonData.find(update => update[\"~id\"] === documentId);",
													"    if (!update) {",
													"        pm.expect.fail(`Document '${documentId}' not found`);",
													"        return;",
													"    }",
													"",
													"    var responsePropertiesMainExpected = [\"availability\",\"id\",\"name\",\"template\",\"test_field\",\"~table\",\"~version\",\"~lastMutateAt\",\"~deleted\",\"~lastUpdateAt\",\"~id\",\"client\",\"~signature\",\"type\",\"~firstUpdateAt\"];",
													"    var responsePropertiesAvailabilityExpected = [\"facade\",\"placement\"];",
													"    var responsePropertiesTemplateExpected = [\"test_field\"];",
													"",
													"    pm.test(\"Response fields\", function () {",
													"        pm.expect(update).to.have.keys(responsePropertiesMainExpected);",
													"        pm.expect(update.availability).to.have.keys(responsePropertiesAvailabilityExpected);",
													"        pm.expect(update.template).to.have.keys(responsePropertiesTemplateExpected);",
													"    });",
													"",
													"    delete update[\"~lastMutateAt\"];",
													"    delete update[\"~lastUpdateAt\"];",
													"    delete update[\"~signature\"];",
													"    delete update[\"~firstUpdateAt\"];",
													"    delete update[\"~version\"];",
													"    delete update.id;",
													"    delete update.template.test_field;",
													"",
													"    var responseValuesExpected = {",
													"            \"~deleted\": false,",
													"            \"~id\": documentId,",
													"            \"~table\": postman_table_name,",
													"            \"availability\": {",
													"                \"facade\": false,",
													"                \"placement\": \"ugc_global:ugc\"",
													"            },",
													"            \"client\": \"iuliia_customer\",",
													"            \"name\": postman_table_name,",
													"            \"template\": {},",
													"            \"test_field\": \"postman\",",
													"            \"type\": \"create_table_test\"",
													"        };",
													"",
													"    pm.test(\"Response values \", function () {",
													"        pm.expect(update).to.eql(responseValuesExpected);",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/{{table}}?includeDeletes=false&APIKey={{api_key}}",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"{{table}}"
											],
											"query": [
												{
													"key": "from",
													"value": "<string>",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "10",
													"disabled": true
												},
												{
													"key": "includeDeletes",
													"value": "false"
												},
												{
													"key": "consistency",
													"value": "STRONG",
													"disabled": true
												},
												{
													"key": "debug",
													"value": "<string>",
													"disabled": true
												},
												{
													"key": "APIKey",
													"value": "{{api_key}}",
													"description": "(Required) "
												}
											]
										},
										"description": "Retrieves a list of content items in a particular table.  To retrieve <em>all</em> items in a table set the\n limit param to a very large value (eg. Long.MAX_VALUE), but for large tables be sure your client can stream the\n results without exhausting all available memory."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sor/1/:table?from=<string>&limit=10&includeDeletes=false&consistency=STRONG&debug=<string>&APIKey=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sor",
														"1",
														":table"
													],
													"query": [
														{
															"key": "from",
															"value": "<string>"
														},
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "includeDeletes",
															"value": "false"
														},
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "debug",
															"value": "<string>"
														},
														{
															"key": "APIKey",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "table"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										}
									]
								},
								{
									"name": "Retrieves a list of content items with includeDeletes is true, debug is false in a particular table",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Number of returned Updates\", function () {",
													"    pm.expect(jsonData.length).to.eql(4);",
													"});",
													"",
													"var postman_table_name = pm.environment.get(\"table\");",
													"var documentIds = [pm.environment.get(\"document_id2\"), pm.environment.get(\"document_id\"), pm.environment.get(\"document_id3\")];",
													"",
													"documentIds.forEach((documentId) => {",
													"    var update = jsonData.find(update => update[\"~id\"] === documentId);",
													"    if (!update) {",
													"        pm.expect.fail(`Document '${documentId}' not found`);",
													"        return;",
													"    }",
													"",
													"    var responsePropertiesMainExpected = [\"availability\",\"id\",\"name\",\"template\",\"test_field\",\"~table\",\"~version\",\"~lastMutateAt\",\"~deleted\",\"~lastUpdateAt\",\"~id\",\"client\",\"~signature\",\"type\",\"~firstUpdateAt\"];",
													"    var responsePropertiesAvailabilityExpected = [\"facade\",\"placement\"];",
													"    var responsePropertiesTemplateExpected = [\"test_field\"];",
													"",
													"    pm.test(\"Response fields\", function () {",
													"        pm.expect(update).to.have.keys(responsePropertiesMainExpected);",
													"        pm.expect(update.availability).to.have.keys(responsePropertiesAvailabilityExpected);",
													"        pm.expect(update.template).to.have.keys(responsePropertiesTemplateExpected);",
													"    });",
													"",
													"    delete update[\"~lastMutateAt\"];",
													"    delete update[\"~lastUpdateAt\"];",
													"    delete update[\"~signature\"];",
													"    delete update[\"~firstUpdateAt\"];",
													"    delete update[\"~version\"];",
													"    delete update.id;",
													"    delete update.template.test_field;",
													"",
													"    var responseValuesExpected = {",
													"            \"~deleted\": false,",
													"            \"~id\": documentId,",
													"            \"~table\": postman_table_name,",
													"            \"availability\": {",
													"                \"facade\": false,",
													"                \"placement\": \"ugc_global:ugc\"",
													"            },",
													"            \"client\": \"iuliia_customer\",",
													"            \"name\": postman_table_name,",
													"            \"template\": {},",
													"            \"test_field\": \"postman\",",
													"            \"type\": \"create_table_test\"",
													"        };",
													"",
													"    pm.test(\"Response values \", function () {",
													"        pm.expect(update).to.eql(responseValuesExpected);",
													"    });",
													"});",
													"",
													"pm.test(\"Deleted update verification\", function () {",
													"    var postman_document_id = pm.environment.get(\"document_id1\");",
													"    var update = jsonData.find(update => update[\"~id\"] === postman_document_id);",
													"    ",
													"    pm.test(\"Response fields\", function () {",
													"        var responsePropertiesExpected = [\"~version\",\"~signature\",\"~firstUpdateAt\",\"~lastUpdateAt\",\"~lastMutateAt\",\"client\",\"test_field\",\"type\",\"~id\",\"~table\",\"~deleted\"];",
													"        pm.expect(update).to.have.keys(responsePropertiesExpected);",
													"    });",
													"",
													"    delete update[\"~version\"];",
													"    delete update[\"~signature\"];",
													"    delete update[\"~firstUpdateAt\"];",
													"    delete update[\"~lastUpdateAt\"];",
													"    delete update[\"~lastMutateAt\"];",
													"    ",
													"    var responseValuesExpected = {",
													"        \"client\": \"iuliia_customer\",",
													"        \"test_field\": \"postman\",",
													"        \"type\": \"create_table_test\",",
													"        \"~id\": postman_document_id,",
													"        \"~table\": postman_table_name,",
													"        \"~deleted\": true,",
													"    };",
													"",
													"    pm.test(\"Response values \", function () {",
													"        pm.expect(update).to.eql(responseValuesExpected);",
													"    });",
													"}); ",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/{{table}}?includeDeletes=true&debug=false&APIKey={{api_key}}",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"{{table}}"
											],
											"query": [
												{
													"key": "from",
													"value": "<string>",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "10",
													"disabled": true
												},
												{
													"key": "includeDeletes",
													"value": "true"
												},
												{
													"key": "consistency",
													"value": "STRONG",
													"disabled": true
												},
												{
													"key": "debug",
													"value": "false"
												},
												{
													"key": "APIKey",
													"value": "{{api_key}}",
													"description": "(Required) "
												}
											]
										},
										"description": "Retrieves a list of content items in a particular table.  To retrieve <em>all</em> items in a table set the\n limit param to a very large value (eg. Long.MAX_VALUE), but for large tables be sure your client can stream the\n results without exhausting all available memory."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sor/1/:table?from=<string>&limit=10&includeDeletes=false&consistency=STRONG&debug=<string>&APIKey=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sor",
														"1",
														":table"
													],
													"query": [
														{
															"key": "from",
															"value": "<string>"
														},
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "includeDeletes",
															"value": "false"
														},
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "debug",
															"value": "<string>"
														},
														{
															"key": "APIKey",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "table"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										}
									]
								},
								{
									"name": "Retrieves a list of sorted content items with includeDeletes is true, debug is true in a particular table",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Number of returned Updates\", function () {",
													"    pm.expect(jsonData.length).to.eql(4);",
													"});",
													"",
													"var postman_table_name = pm.environment.get(\"table\");",
													"var documentIds = [pm.environment.get(\"document_id2\"), pm.environment.get(\"document_id\"), pm.environment.get(\"document_id3\")];",
													"",
													"documentIds.forEach((documentId) => {",
													"    var update = jsonData.find(update => update[\"~id\"] === documentId);",
													"    if (!update) {",
													"        pm.expect.fail(`Document '${documentId}' not found`);",
													"        return;",
													"    }",
													"",
													"    var responsePropertiesMainExpected = [\"availability\",\"id\",\"name\",\"template\",\"test_field\",\"~table\",\"~version\",\"~lastMutateAt\",\"~deleted\",\"~lastUpdateAt\",\"~id\",\"client\",\"~signature\",\"type\",\"~firstUpdateAt\"];",
													"    var responsePropertiesAvailabilityExpected = [\"facade\",\"placement\"];",
													"    var responsePropertiesTemplateExpected = [\"test_field\"];",
													"",
													"    pm.test(\"Response fields\", function () {",
													"        pm.expect(update).to.have.keys(responsePropertiesMainExpected);",
													"        pm.expect(update.availability).to.have.keys(responsePropertiesAvailabilityExpected);",
													"        pm.expect(update.template).to.have.keys(responsePropertiesTemplateExpected);",
													"    });",
													"",
													"    delete update[\"~lastMutateAt\"];",
													"    delete update[\"~lastUpdateAt\"];",
													"    delete update[\"~signature\"];",
													"    delete update[\"~firstUpdateAt\"];",
													"    delete update[\"~version\"];",
													"    delete update.id;",
													"    delete update.template.test_field;",
													"",
													"    var responseValuesExpected = {",
													"            \"~deleted\": false,",
													"            \"~id\": documentId,",
													"            \"~table\": postman_table_name,",
													"            \"availability\": {",
													"                \"facade\": false,",
													"                \"placement\": \"ugc_global:ugc\"",
													"            },",
													"            \"client\": \"iuliia_customer\",",
													"            \"name\": postman_table_name,",
													"            \"template\": {},",
													"            \"test_field\": \"postman\",",
													"            \"type\": \"create_table_test\"",
													"        };",
													"",
													"    pm.test(\"Response values \", function () {",
													"        pm.expect(update).to.eql(responseValuesExpected);",
													"    });",
													"});",
													"",
													"pm.test(\"Deleted update verification\", function () {",
													"    var postman_document_id = pm.environment.get(\"document_id1\");",
													"    var update = jsonData.find(update => update[\"~id\"] === postman_document_id);",
													"    ",
													"    pm.test(\"Response fields\", function () {",
													"        var responsePropertiesExpected = [\"~version\",\"~signature\",\"~firstUpdateAt\",\"~lastUpdateAt\",\"~lastMutateAt\",\"client\",\"test_field\",\"type\",\"~id\",\"~table\",\"~deleted\"];",
													"        pm.expect(update).to.have.keys(responsePropertiesExpected);",
													"    });",
													"",
													"    pm.test(\"Fields sequence verification\", function () {",
													"        var keysWithoutSorting = [\"~deleted\",\"~firstUpdateAt\",\"~id\",\"~lastMutateAt\",\"~lastUpdateAt\",\"~signature\",\"~table\",\"~version\",\"client\",\"test_field\",\"type\"];",
													"        pm.expect(Object.keys(update)).to.eql(keysWithoutSorting);",
													"    });",
													"",
													"    delete update[\"~version\"];",
													"    delete update[\"~signature\"];",
													"    delete update[\"~firstUpdateAt\"];",
													"    delete update[\"~lastUpdateAt\"];",
													"    delete update[\"~lastMutateAt\"];",
													"    ",
													"    var responseValuesExpected = {",
													"        \"client\": \"iuliia_customer\",",
													"        \"test_field\": \"postman\",",
													"        \"type\": \"create_table_test\",",
													"        \"~id\": postman_document_id,",
													"        \"~table\": postman_table_name,",
													"        \"~deleted\": true,",
													"    };",
													"",
													"    pm.test(\"Response values \", function () {",
													"        pm.expect(update).to.eql(responseValuesExpected);",
													"    });",
													"}); ",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/{{table}}?includeDeletes=true&debug=true&APIKey={{api_key}}",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"{{table}}"
											],
											"query": [
												{
													"key": "from",
													"value": "<string>",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "10",
													"disabled": true
												},
												{
													"key": "includeDeletes",
													"value": "true"
												},
												{
													"key": "consistency",
													"value": "STRONG",
													"disabled": true
												},
												{
													"key": "debug",
													"value": "true"
												},
												{
													"key": "APIKey",
													"value": "{{api_key}}",
													"description": "(Required) "
												}
											]
										},
										"description": "Retrieves a list of content items in a particular table.  To retrieve <em>all</em> items in a table set the\n limit param to a very large value (eg. Long.MAX_VALUE), but for large tables be sure your client can stream the\n results without exhausting all available memory."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sor/1/:table?from=<string>&limit=10&includeDeletes=false&consistency=STRONG&debug=<string>&APIKey=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sor",
														"1",
														":table"
													],
													"query": [
														{
															"key": "from",
															"value": "<string>"
														},
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "includeDeletes",
															"value": "false"
														},
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "debug",
															"value": "<string>"
														},
														{
															"key": "APIKey",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "table"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										}
									]
								},
								{
									"name": "Retrieves a list of content items with includeDeletes is true in a particular table",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Number of returned Updates\", function () {",
													"    pm.expect(jsonData.length).to.eql(4);",
													"});",
													"",
													"var postman_table_name = pm.environment.get(\"table\");",
													"var documentIds = [pm.environment.get(\"document_id2\"), pm.environment.get(\"document_id\"), pm.environment.get(\"document_id3\")];",
													"",
													"documentIds.forEach((documentId) => {",
													"    var update = jsonData.find(update => update[\"~id\"] === documentId);",
													"    if (!update) {",
													"        pm.expect.fail(`Document '${documentId}' not found`);",
													"        return;",
													"    }",
													"",
													"    var responsePropertiesMainExpected = [\"availability\",\"id\",\"name\",\"template\",\"test_field\",\"~table\",\"~version\",\"~lastMutateAt\",\"~deleted\",\"~lastUpdateAt\",\"~id\",\"client\",\"~signature\",\"type\",\"~firstUpdateAt\"];",
													"    var responsePropertiesAvailabilityExpected = [\"facade\",\"placement\"];",
													"    var responsePropertiesTemplateExpected = [\"test_field\"];",
													"",
													"    pm.test(\"Response fields\", function () {",
													"        pm.expect(update).to.have.keys(responsePropertiesMainExpected);",
													"        pm.expect(update.availability).to.have.keys(responsePropertiesAvailabilityExpected);",
													"        pm.expect(update.template).to.have.keys(responsePropertiesTemplateExpected);",
													"    });",
													"",
													"    delete update[\"~lastMutateAt\"];",
													"    delete update[\"~lastUpdateAt\"];",
													"    delete update[\"~signature\"];",
													"    delete update[\"~firstUpdateAt\"];",
													"    delete update[\"~version\"];",
													"    delete update.id;",
													"    delete update.template.test_field;",
													"",
													"    var responseValuesExpected = {",
													"            \"~deleted\": false,",
													"            \"~id\": documentId,",
													"            \"~table\": postman_table_name,",
													"            \"availability\": {",
													"                \"facade\": false,",
													"                \"placement\": \"ugc_global:ugc\"",
													"            },",
													"            \"client\": \"iuliia_customer\",",
													"            \"name\": postman_table_name,",
													"            \"template\": {},",
													"            \"test_field\": \"postman\",",
													"            \"type\": \"create_table_test\"",
													"        };",
													"",
													"    pm.test(\"Response values \", function () {",
													"        pm.expect(update).to.eql(responseValuesExpected);",
													"    });",
													"});",
													"",
													"pm.test(\"Deleted update verification\", function () {",
													"    var postman_document_id = pm.environment.get(\"document_id1\");",
													"    var update = jsonData.find(update => update[\"~id\"] === postman_document_id);",
													"    ",
													"    pm.test(\"Response fields\", function () {",
													"        var responsePropertiesExpected = [\"~version\",\"~signature\",\"~firstUpdateAt\",\"~lastUpdateAt\",\"~lastMutateAt\",\"client\",\"test_field\",\"type\",\"~id\",\"~table\",\"~deleted\"];",
													"        pm.expect(update).to.have.keys(responsePropertiesExpected);",
													"    });",
													"",
													"    delete update[\"~version\"];",
													"    delete update[\"~signature\"];",
													"    delete update[\"~firstUpdateAt\"];",
													"    delete update[\"~lastUpdateAt\"];",
													"    delete update[\"~lastMutateAt\"];",
													"    ",
													"    var responseValuesExpected = {",
													"        \"client\": \"iuliia_customer\",",
													"        \"test_field\": \"postman\",",
													"        \"type\": \"create_table_test\",",
													"        \"~id\": postman_document_id,",
													"        \"~table\": postman_table_name,",
													"        \"~deleted\": true,",
													"    };",
													"",
													"    pm.test(\"Response values \", function () {",
													"        pm.expect(update).to.eql(responseValuesExpected);",
													"    });",
													"}); ",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/{{table}}?includeDeletes=true&APIKey={{api_key}}",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"{{table}}"
											],
											"query": [
												{
													"key": "from",
													"value": "<string>",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "10",
													"disabled": true
												},
												{
													"key": "includeDeletes",
													"value": "true"
												},
												{
													"key": "consistency",
													"value": "STRONG",
													"disabled": true
												},
												{
													"key": "debug",
													"value": "<string>",
													"disabled": true
												},
												{
													"key": "APIKey",
													"value": "{{api_key}}",
													"description": "(Required) "
												}
											]
										},
										"description": "Retrieves a list of content items in a particular table.  To retrieve <em>all</em> items in a table set the\n limit param to a very large value (eg. Long.MAX_VALUE), but for large tables be sure your client can stream the\n results without exhausting all available memory."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sor/1/:table?from=<string>&limit=10&includeDeletes=false&consistency=STRONG&debug=<string>&APIKey=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sor",
														"1",
														":table"
													],
													"query": [
														{
															"key": "from",
															"value": "<string>"
														},
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "includeDeletes",
															"value": "false"
														},
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "debug",
															"value": "<string>"
														},
														{
															"key": "APIKey",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "table"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										}
									]
								},
								{
									"name": "Drops a table",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-BV-API-Key",
												"type": "text",
												"value": "{{api_key}}"
											}
										],
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"_table",
												"{{table}}"
											],
											"query": [
												{
													"key": "audit",
													"value": "comment:'table_removal'"
												}
											]
										},
										"description": "Returns a SuccessResponse if table is dropped"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														":table"
													],
													"query": [
														{
															"key": "audit",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "table"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"success\": false,\n \"debug\": {}\n}"
										}
									]
								}
							],
							"description": "Request with api-key which has  sor|read|{table} permission to the table which exists returns: List of items in the table (deleted items are not included in the result)"
						},
						{
							"name": "TC: List of items from table, limited by limit param",
							"item": [
								{
									"name": "Creates table /sor/1/_table/{table}",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var uuid = require('uuid');",
													"pm.environment.set('table', 'table_'+uuid.v4());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-BV-API-Key",
												"type": "text",
												"value": "{{api_key}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"_table",
												"{{table}}"
											],
											"query": [
												{
													"key": "options",
													"value": "placement:'ugc_global:ugc'"
												},
												{
													"key": "audit",
													"value": "comment:'initial+provisioning'"
												}
											]
										},
										"description": "Returns a SuccessResponse if table is created"
									},
									"response": []
								},
								{
									"name": "Creates/Updates content in datastore /sor/1/{table}/{key}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
													"    pm.expect(pm.response.json().success).to.eql(true);",
													"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var uuid = require('uuid');",
													"pm.environment.set('auditValue', 'comment:\\'auditValue+'",
													" + pm.variables.replaceIn('{{$randomInt}}') + '\\'' );",
													"pm.environment.set('document_id', 'document_id_' + uuid.v4());",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-BV-API-Key",
												"type": "text",
												"value": "{{api_key}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n        \"name\": \"{{table}}\",\n        \"id\": 4,\n        \"template\": {\n            \"test_field\": \"test_value_of_field_4\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_global:ugc\",\n            \"facade\": false\n        }\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?audit={{auditValue}}&consistency={{write_consistency_weak}}&tag=postman&debug=true",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"{{table}}",
												"{{document_id}}"
											],
											"query": [
												{
													"key": "audit",
													"value": "{{auditValue}}"
												},
												{
													"key": "changeId",
													"value": "{{changeId}}",
													"disabled": true
												},
												{
													"key": "consistency",
													"value": "{{write_consistency_weak}}"
												},
												{
													"key": "tag",
													"value": "postman"
												},
												{
													"key": "debug",
													"value": "true"
												}
											]
										},
										"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
									},
									"response": []
								},
								{
									"name": "Creates/Updates content in datastore /sor/1/{table}/{key}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
													"    pm.expect(pm.response.json().success).to.eql(true);",
													"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var uuid = require('uuid');",
													"pm.environment.set('auditValue', 'comment:\\'auditValue+'",
													" + pm.variables.replaceIn('{{$randomInt}}') + '\\'' );",
													"pm.environment.set('document_id1', 'document_id_' + uuid.v4());",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-BV-API-Key",
												"type": "text",
												"value": "{{api_key}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n        \"name\": \"{{table}}\",\n        \"id\": 3,\n        \"template\": {\n            \"test_field\": \"test_value_of_field_3\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_global:ugc\",\n            \"facade\": false\n        }\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id1}}?audit={{auditValue}}&consistency={{write_consistency_weak}}&tag=postman&debug=true",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"{{table}}",
												"{{document_id1}}"
											],
											"query": [
												{
													"key": "audit",
													"value": "{{auditValue}}"
												},
												{
													"key": "changeId",
													"value": "{{changeId}}",
													"disabled": true
												},
												{
													"key": "consistency",
													"value": "{{write_consistency_weak}}"
												},
												{
													"key": "tag",
													"value": "postman"
												},
												{
													"key": "debug",
													"value": "true"
												}
											]
										},
										"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
									},
									"response": []
								},
								{
									"name": "Creates/Updates content in datastore /sor/1/{table}/{key}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
													"    pm.expect(pm.response.json().success).to.eql(true);",
													"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var uuid = require('uuid');",
													"pm.environment.set('auditValue', 'comment:\\'auditValue+'",
													" + pm.variables.replaceIn('{{$randomInt}}') + '\\'' );",
													"pm.environment.set('document_id2', 'document_id_' + uuid.v4());",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-BV-API-Key",
												"type": "text",
												"value": "{{api_key}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n        \"name\": \"{{table}}\",\n        \"id\": 2,\n        \"template\": {\n            \"test_field\": \"test_value_of_field_2\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_global:ugc\",\n            \"facade\": false\n        }\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id2}}?audit={{auditValue}}&consistency={{write_consistency_weak}}&tag=postman&debug=true",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"{{table}}",
												"{{document_id2}}"
											],
											"query": [
												{
													"key": "audit",
													"value": "{{auditValue}}"
												},
												{
													"key": "changeId",
													"value": "{{changeId}}",
													"disabled": true
												},
												{
													"key": "consistency",
													"value": "{{write_consistency_weak}}"
												},
												{
													"key": "tag",
													"value": "postman"
												},
												{
													"key": "debug",
													"value": "true"
												}
											]
										},
										"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
									},
									"response": []
								},
								{
									"name": "Creates/Updates content in datastore /sor/1/{table}/{key}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
													"    pm.expect(pm.response.json().success).to.eql(true);",
													"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var uuid = require('uuid');",
													"pm.environment.set('auditValue', 'comment:\\'auditValue+'",
													" + pm.variables.replaceIn('{{$randomInt}}') + '\\'' );",
													"pm.environment.set('document_id3', 'document_id_' + uuid.v4());",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-BV-API-Key",
												"type": "text",
												"value": "{{api_key}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n        \"name\": \"{{table}}\",\n        \"id\": 5,\n        \"template\": {\n            \"test_field\": \"test_value_of_field_5\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_global:ugc\",\n            \"facade\": false\n        }\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id3}}?audit={{auditValue}}&consistency={{write_consistency_weak}}&tag=postman&debug=true",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"{{table}}",
												"{{document_id3}}"
											],
											"query": [
												{
													"key": "audit",
													"value": "{{auditValue}}"
												},
												{
													"key": "changeId",
													"value": "{{changeId}}",
													"disabled": true
												},
												{
													"key": "consistency",
													"value": "{{write_consistency_weak}}"
												},
												{
													"key": "tag",
													"value": "postman"
												},
												{
													"key": "debug",
													"value": "true"
												}
											]
										},
										"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
									},
									"response": []
								},
								{
									"name": "Retrieves a unsorted list of content items in a particular table",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													" pm.test(\"Number of returned updates\", function () {",
													"     pm.expect(jsonData.length).to.eql(3);",
													" });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/{{table}}?limit=3&includeDeletes=true&consistency={{write_consistency_weak}}&debug=false&APIKey={{api_key}}",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"{{table}}"
											],
											"query": [
												{
													"key": "from",
													"value": "<string>",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "3"
												},
												{
													"key": "includeDeletes",
													"value": "true"
												},
												{
													"key": "consistency",
													"value": "{{write_consistency_weak}}"
												},
												{
													"key": "debug",
													"value": "false"
												},
												{
													"key": "APIKey",
													"value": "{{api_key}}",
													"description": "(Required) "
												}
											]
										},
										"description": "Retrieves a list of content items in a particular table.  To retrieve <em>all</em> items in a table set the\n limit param to a very large value (eg. Long.MAX_VALUE), but for large tables be sure your client can stream the\n results without exhausting all available memory."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sor/1/:table?from=<string>&limit=10&includeDeletes=false&consistency=STRONG&debug=<string>&APIKey=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sor",
														"1",
														":table"
													],
													"query": [
														{
															"key": "from",
															"value": "<string>"
														},
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "includeDeletes",
															"value": "false"
														},
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "debug",
															"value": "<string>"
														},
														{
															"key": "APIKey",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "table"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										}
									]
								},
								{
									"name": "Drops a table",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-BV-API-Key",
												"type": "text",
												"value": "{{api_key}}"
											}
										],
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"_table",
												"{{table}}"
											],
											"query": [
												{
													"key": "audit",
													"value": "comment:'table_removal'"
												}
											]
										},
										"description": "Returns a SuccessResponse if table is dropped"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														":table"
													],
													"query": [
														{
															"key": "audit",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "table"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"success\": false,\n \"debug\": {}\n}"
										}
									]
								}
							],
							"description": "Request with api-key which has  sor|read|{table} permission to the table which exists returns: List of items in the table (deleted items are not included in the result)"
						},
						{
							"name": "TC: List of items from table, using from param",
							"item": [
								{
									"name": "Creates table /sor/1/_table/{table}",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var uuid = require('uuid');",
													"pm.environment.set('table', 'table_'+uuid.v4());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-BV-API-Key",
												"type": "text",
												"value": "{{api_key}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"_table",
												"{{table}}"
											],
											"query": [
												{
													"key": "options",
													"value": "placement:'ugc_global:ugc'"
												},
												{
													"key": "audit",
													"value": "comment:'initial+provisioning'"
												}
											]
										},
										"description": "Returns a SuccessResponse if table is created"
									},
									"response": []
								},
								{
									"name": "Creates/Updates content in datastore /sor/1/{table}/{key}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body verification\", function () {",
													"    pm.expect(pm.response.json()).to.have.keys(\"success\",\"debug\")",
													"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
													"    pm.expect(pm.response.json().success).to.eql(true);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var uuid = require('uuid');",
													"pm.environment.set('auditValue', 'comment:\\'auditValue+'",
													" + pm.variables.replaceIn('{{$randomInt}}') + '\\'' );",
													"pm.environment.set('document_id', 'document_id_' + uuid.v4());",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-BV-API-Key",
												"type": "text",
												"value": "{{api_key}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n        \"name\": \"{{table}}\",\n        \"id\": 4,\n        \"template\": {\n            \"test_field\": \"test_value_of_field_4\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_global:ugc\",\n            \"facade\": false\n        }\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?audit={{auditValue}}&consistency={{write_consistency_weak}}&tag=postman&debug=true",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"{{table}}",
												"{{document_id}}"
											],
											"query": [
												{
													"key": "audit",
													"value": "{{auditValue}}"
												},
												{
													"key": "changeId",
													"value": "{{changeId}}",
													"disabled": true
												},
												{
													"key": "consistency",
													"value": "{{write_consistency_weak}}"
												},
												{
													"key": "tag",
													"value": "postman"
												},
												{
													"key": "debug",
													"value": "true"
												}
											]
										},
										"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
									},
									"response": []
								},
								{
									"name": "Creates/Updates content in datastore /sor/1/{table}/{key}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body verification\", function () {",
													"    pm.expect(pm.response.json()).to.have.keys(\"success\",\"debug\")",
													"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
													"    pm.expect(pm.response.json().success).to.eql(true);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var uuid = require('uuid');",
													"pm.environment.set('auditValue', 'comment:\\'auditValue+'",
													" + pm.variables.replaceIn('{{$randomInt}}') + '\\'' );",
													"pm.environment.set('document_id1', 'document_id_' + uuid.v4());",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-BV-API-Key",
												"type": "text",
												"value": "{{api_key}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n        \"name\": \"{{table}}\",\n        \"id\": 3,\n        \"template\": {\n            \"test_field\": \"test_value_of_field_3\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_global:ugc\",\n            \"facade\": false\n        }\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id1}}?audit={{auditValue}}&consistency={{write_consistency_weak}}&tag=postman&debug=true",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"{{table}}",
												"{{document_id1}}"
											],
											"query": [
												{
													"key": "audit",
													"value": "{{auditValue}}"
												},
												{
													"key": "changeId",
													"value": "{{changeId}}",
													"disabled": true
												},
												{
													"key": "consistency",
													"value": "{{write_consistency_weak}}"
												},
												{
													"key": "tag",
													"value": "postman"
												},
												{
													"key": "debug",
													"value": "true"
												}
											]
										},
										"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
									},
									"response": []
								},
								{
									"name": "Creates/Updates content in datastore /sor/1/{table}/{key}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body verification\", function () {",
													"    pm.expect(pm.response.json()).to.have.keys(\"success\",\"debug\")",
													"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
													"    pm.expect(pm.response.json().success).to.eql(true);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var uuid = require('uuid');",
													"pm.environment.set('auditValue', 'comment:\\'auditValue+'",
													" + pm.variables.replaceIn('{{$randomInt}}') + '\\'' );",
													"pm.environment.set('document_id2', 'document_id_' + uuid.v4());",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-BV-API-Key",
												"type": "text",
												"value": "{{api_key}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n        \"name\": \"{{table}}\",\n        \"id\": 2,\n        \"template\": {\n            \"test_field\": \"test_value_of_field_2\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_global:ugc\",\n            \"facade\": false\n        }\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id2}}?audit={{auditValue}}&consistency={{write_consistency_weak}}&tag=postman&debug=true",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"{{table}}",
												"{{document_id2}}"
											],
											"query": [
												{
													"key": "audit",
													"value": "{{auditValue}}"
												},
												{
													"key": "changeId",
													"value": "{{changeId}}",
													"disabled": true
												},
												{
													"key": "consistency",
													"value": "{{write_consistency_weak}}"
												},
												{
													"key": "tag",
													"value": "postman"
												},
												{
													"key": "debug",
													"value": "true"
												}
											]
										},
										"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
									},
									"response": []
								},
								{
									"name": "Creates/Updates content in datastore /sor/1/{table}/{key}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body verification\", function () {",
													"    pm.expect(pm.response.json()).to.have.keys(\"success\",\"debug\")",
													"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
													"    pm.expect(pm.response.json().success).to.eql(true);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var uuid = require('uuid');",
													"pm.environment.set('auditValue', 'comment:\\'auditValue+'",
													" + pm.variables.replaceIn('{{$randomInt}}') + '\\'' );",
													"pm.environment.set('document_id3', 'document_id_' + uuid.v4());",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-BV-API-Key",
												"type": "text",
												"value": "{{api_key}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n        \"name\": \"{{table}}\",\n        \"id\": 5,\n        \"template\": {\n            \"test_field\": \"test_value_of_field_5\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_global:ugc\",\n            \"facade\": false\n        }\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id3}}?audit={{auditValue}}&consistency={{write_consistency_weak}}&tag=postman&debug=true",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"{{table}}",
												"{{document_id3}}"
											],
											"query": [
												{
													"key": "audit",
													"value": "{{auditValue}}"
												},
												{
													"key": "changeId",
													"value": "{{changeId}}",
													"disabled": true
												},
												{
													"key": "consistency",
													"value": "{{write_consistency_weak}}"
												},
												{
													"key": "tag",
													"value": "postman"
												},
												{
													"key": "debug",
													"value": "true"
												}
											]
										},
										"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
									},
									"response": []
								},
								{
									"name": "Retrieves a unsorted list of content items in a particular table",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var postman_table_name = pm.environment.get(\"table\");",
													"",
													"jsonData.forEach(update => {",
													"    var responsePropertiesMainExpected = [\"availability\",\"id\",\"name\",\"template\",\"test_field\",\"~table\",\"~lastMutateAt\",\"~deleted\",\"~lastUpdateAt\",\"~id\",\"client\",\"~signature\",\"type\",\"~firstUpdateAt\"];",
													"    var responsePropertiesAvailabilityExpected = [\"facade\",\"placement\"];",
													"    var responsePropertiesTemplateExpected = [\"test_field\"];",
													"",
													"    pm.test(\"Response fields\", function () {",
													"        pm.expect(update).to.have.keys(responsePropertiesMainExpected);",
													"        pm.expect(update.availability).to.have.keys(responsePropertiesAvailabilityExpected);",
													"        pm.expect(update.template).to.have.keys(responsePropertiesTemplateExpected);",
													"    });",
													"",
													"    delete update[\"~lastMutateAt\"];",
													"    delete update[\"~lastUpdateAt\"];",
													"    delete update[\"~signature\"];",
													"    delete update[\"~firstUpdateAt\"];",
													"    delete update.id;",
													"    delete update.template.test_field;",
													"    delete update[\"~id\"];",
													"",
													"    var responseValuesExpected = {",
													"        \"~deleted\": false,",
													"        \"~table\": postman_table_name,",
													"        \"availability\": {",
													"            \"facade\": false,",
													"            \"placement\": \"ugc_global:ugc\"",
													"        },",
													"        \"client\": \"iuliia_customer\",",
													"        \"name\": postman_table_name,",
													"        \"template\": {},",
													"        \"test_field\": \"postman\",",
													"        \"type\": \"create_table_test\"",
													"    };",
													"",
													"    pm.test(\"Response values \", function () {",
													"        pm.expect(update).to.eql(responseValuesExpected);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/{{table}}?from=document_id_&limit=5&includeDeletes=true&consistency={{write_consistency_weak}}&debug=true&APIKey={{api_key}}",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"{{table}}"
											],
											"query": [
												{
													"key": "from",
													"value": "document_id_"
												},
												{
													"key": "limit",
													"value": "5"
												},
												{
													"key": "includeDeletes",
													"value": "true"
												},
												{
													"key": "consistency",
													"value": "{{write_consistency_weak}}"
												},
												{
													"key": "debug",
													"value": "true"
												},
												{
													"key": "APIKey",
													"value": "{{api_key}}"
												}
											]
										},
										"description": "Retrieves a list of content items in a particular table.  To retrieve <em>all</em> items in a table set the\n limit param to a very large value (eg. Long.MAX_VALUE), but for large tables be sure your client can stream the\n results without exhausting all available memory."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sor/1/:table?from=<string>&limit=10&includeDeletes=false&consistency=STRONG&debug=<string>&APIKey=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sor",
														"1",
														":table"
													],
													"query": [
														{
															"key": "from",
															"value": "<string>"
														},
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "includeDeletes",
															"value": "false"
														},
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "debug",
															"value": "<string>"
														},
														{
															"key": "APIKey",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "table"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										}
									]
								},
								{
									"name": "Retrieves a unsorted list of content items in a particular table",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var postman_table_name = pm.environment.get(\"table\");",
													"    ",
													"    if (jsonData.length > 0) {",
													"        jsonData.forEach((update) => {",
													"        var responsePropertiesMainExpected = [\"availability\",\"id\",\"name\",\"template\",\"test_field\",\"~table\",\"~lastMutateAt\",\"~deleted\",\"~lastUpdateAt\",\"~id\",\"client\",\"~signature\",\"type\",\"~firstUpdateAt\"];",
													"        var responsePropertiesAvailabilityExpected = [\"facade\",\"placement\"];",
													"        var responsePropertiesTemplateExpected = [\"test_field\"];",
													"",
													"        pm.test(\"Response fields\", function () {",
													"            pm.expect(update).to.have.keys(responsePropertiesMainExpected);",
													"            pm.expect(update.availability).to.have.keys(responsePropertiesAvailabilityExpected);",
													"            pm.expect(update.template).to.have.keys(responsePropertiesTemplateExpected);",
													"        });",
													"",
													"        delete update[\"~lastMutateAt\"];",
													"        delete update[\"~lastUpdateAt\"];",
													"        delete update[\"~signature\"];",
													"        delete update[\"~firstUpdateAt\"];",
													"        delete update.id;",
													"        delete update[\"~id\"];",
													"        delete update.template.test_field;",
													"",
													"        var responseValuesExpected = {",
													"            \"~deleted\": false,",
													"            \"~table\": postman_table_name,",
													"            \"availability\": {",
													"                \"facade\": false,",
													"                \"placement\": \"ugc_global:ugc\"",
													"            },",
													"            \"client\": \"iuliia_customer\",",
													"            \"name\": postman_table_name,",
													"            \"template\": {},",
													"            \"test_field\": \"postman\",",
													"            \"type\": \"create_table_test\"",
													"        };",
													"",
													"        pm.test(\"Response values \", function () {",
													"            pm.expect(update).to.eql(responseValuesExpected);",
													"        });",
													"    });",
													"}",
													"",
													"",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/{{table}}?from={{document_id1}}&limit=5&includeDeletes=true&consistency={{write_consistency_weak}}&debug=false&APIKey={{api_key}}",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"{{table}}"
											],
											"query": [
												{
													"key": "from",
													"value": "{{document_id1}}"
												},
												{
													"key": "limit",
													"value": "5"
												},
												{
													"key": "includeDeletes",
													"value": "true"
												},
												{
													"key": "consistency",
													"value": "{{write_consistency_weak}}"
												},
												{
													"key": "debug",
													"value": "false"
												},
												{
													"key": "APIKey",
													"value": "{{api_key}}",
													"description": "(Required) "
												}
											]
										},
										"description": "Retrieves a list of content items in a particular table.  To retrieve <em>all</em> items in a table set the\n limit param to a very large value (eg. Long.MAX_VALUE), but for large tables be sure your client can stream the\n results without exhausting all available memory."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sor/1/:table?from=<string>&limit=10&includeDeletes=false&consistency=STRONG&debug=<string>&APIKey=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sor",
														"1",
														":table"
													],
													"query": [
														{
															"key": "from",
															"value": "<string>"
														},
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "includeDeletes",
															"value": "false"
														},
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "debug",
															"value": "<string>"
														},
														{
															"key": "APIKey",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "table"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										}
									]
								},
								{
									"name": "Drops a table",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-BV-API-Key",
												"type": "text",
												"value": "{{api_key}}"
											}
										],
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"_table",
												"{{table}}"
											],
											"query": [
												{
													"key": "audit",
													"value": "comment:'table_removal'"
												}
											]
										},
										"description": "Returns a SuccessResponse if table is dropped"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														":table"
													],
													"query": [
														{
															"key": "audit",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "table"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"success\": false,\n \"debug\": {}\n}"
										}
									]
								}
							],
							"description": "Request with api-key which has  sor|read|{table} permission to the table which exists returns: List of items in the table (deleted items are not included in the result)"
						},
						{
							"name": "Retrieves a list of content items in a particular table.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.json()).to.eql({\"reason\":\"not authorized\"});",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-BV-Api-Key",
										"value": "{{api_key_no_rights}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseurl_dc1}}/sor/1/{{table}}?from=<string>&limit=10&includeDeletes=false&consistency=STRONG&debug=<string>&APIKey=<string>",
									"host": [
										"{{baseurl_dc1}}"
									],
									"path": [
										"sor",
										"1",
										"{{table}}"
									],
									"query": [
										{
											"key": "from",
											"value": "<string>"
										},
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "includeDeletes",
											"value": "false"
										},
										{
											"key": "consistency",
											"value": "STRONG"
										},
										{
											"key": "debug",
											"value": "<string>"
										},
										{
											"key": "APIKey",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								},
								"description": "Retrieves a list of content items in a particular table.  To retrieve <em>all</em> items in a table set the\n limit param to a very large value (eg. Long.MAX_VALUE), but for large tables be sure your client can stream the\n results without exhausting all available memory."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sor/1/:table?from=<string>&limit=10&includeDeletes=false&consistency=STRONG&debug=<string>&APIKey=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sor",
												"1",
												":table"
											],
											"query": [
												{
													"key": "from",
													"value": "<string>"
												},
												{
													"key": "limit",
													"value": "10"
												},
												{
													"key": "includeDeletes",
													"value": "false"
												},
												{
													"key": "consistency",
													"value": "STRONG"
												},
												{
													"key": "debug",
													"value": "<string>"
												},
												{
													"key": "APIKey",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "table"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{}"
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const retryRequest = () => {",
									"    return new Promise((resolve, reject) => {",
									"        pm.sendRequest({",
									"            url: `${pm.environment.get(\"url\")}`,",
									"            method: `${pm.environment.get(\"method\")}`,",
									"            header: {",
									"                \"X-BV-API-Key\": pm.environment.get(\"api_key\"),",
									"            }",
									"        }, (error, response) => {",
									"            if (error) {",
									"                reject(error);",
									"            }",
									"            resolve(response);            ",
									"        });",
									"    });",
									"};",
									"",
									"const retryRequestCall = {",
									"    retryRequest: retryRequest.toString()",
									"};",
									"",
									"pm.globals.set(\"retryRequestCall\", JSON.stringify(retryRequestCall));"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Imports an arbitrary size stream of deltas and/or JSON objects POST /sor/1/{table}",
					"item": [
						{
							"name": "TC: Request import an arbitrary size of stream of JSON",
							"item": [
								{
									"name": "Creates table /sor/1/_table/{table}",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var uuid = require('uuid');",
													"pm.environment.set('table', 'table_'+uuid.v4());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-BV-API-Key",
												"type": "text",
												"value": "{{api_key}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"_table",
												"{{table}}"
											],
											"query": [
												{
													"key": "options",
													"value": "placement:'ugc_global:ugc'"
												},
												{
													"key": "audit",
													"value": "comment:'initial+provisioning'"
												}
											]
										},
										"description": "Returns a SuccessResponse if table is created"
									},
									"response": []
								},
								{
									"name": "Imports an arbitrary size stream of deltas and/or JSON objects.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const uuid = require('uuid');",
													"pm.environment.set('id1', uuid.v4());",
													"pm.environment.set('id2', uuid.v4());",
													"pm.environment.set('id3', uuid.v4());",
													"pm.environment.set('id4', uuid.v4());",
													"pm.environment.set('id5', uuid.v4());",
													"pm.environment.set('id6', uuid.v4());",
													"pm.environment.set('id7', uuid.v4());",
													"pm.environment.set('id8', uuid.v4());",
													"pm.environment.set('id9', uuid.v4());",
													"pm.environment.set('id10', uuid.v4());",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-BV-Api-Key",
												"value": "{{api_key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n         {\n            \"table\": \"{{table}}\",\n            \"~id\": \"{{id1}}\",\n            \"key\": \"demo1\",\n            \"delta\": \"{\\\"field1\\\":\\\"value1\\\",\\\"field2\\\":\\\"value2\\\",\\\"field3\\\":\\\"value3\\\"}\",\n            \"consistency\": \"STRONG\",\n            \"audit\": {\n              \"comment\": \"Adding demo1 document\"\n            }\n          },\n          {\n        \"table\": \"{{table}}\",\n        \"~id\": \"{{id2}}\",\n        \"key\": \"demo2\",\n        \"delta\": \"{\\\"field1\\\":\\\"value1.1\\\",\\\"field5\\\":\\\"value5\\\",\\\"field32\\\":\\\"value33\\\"}\",\n        \"consistency\": \"STRONG\",\n        \"audit\": {\n          \"comment\": \"Update and Add\"\n        }\n      },\n      {\n        \"table\": \"{{table}}\",\n        \"~id\": \"{{id3}}\",\n        \"key\": \"demo3\",\n        \"delta\": \"{\\\"owner\\\":\\\"test@mail.com\\\",\\\"description\\\":\\\"Data Team QA\\\",\\\"issued\\\":\\\"2015-04-20T18:18:18.425+0000\\\",\\\"roles\\\":[\\\"data-team-qa\\\"]}\",\n        \"consistency\": \"NO_DURABLE\",\n        \"audit\": {\n          \"comment\": \"re-import\"\n        }\n      },\n            {\n        \"table\": \"{{table}}\",\n        \"~id\": \"{{id4}}\",\n        \"key\": \"demo4\",\n        \"delta\": \"{\\\"owner\\\":\\\"test@mail.com\\\",\\\"description\\\":\\\"Data Team QA\\\",\\\"issued\\\":\\\"2015-04-20T18:18:18.425+0000\\\",\\\"roles\\\":[\\\"data-team-qa\\\"]}\",\n        \"consistency\": \"STRONG\",\n        \"audit\": {\n          \"comment\": \"re-import\"\n        }\n      },\n            {\n        \"table\": \"{{table}}\",\n        \"~id\": \"{{id5}}\",\n        \"key\": \"demo5\",\n        \"delta\": \"{\\\"owner\\\":\\\"test@mail.com\\\",\\\"description\\\":\\\"Data Team QA\\\",\\\"issued\\\":\\\"2015-04-20T18:18:18.425+0000\\\",\\\"roles\\\":[\\\"data-team-qa\\\"]}\",\n        \"consistency\": \"STRONG\",\n        \"audit\": {\n          \"comment\": \"re-import\"\n        }\n      },\n        {\n        \"table\": \"{{table}}\",\n        \"~id\": \"{{id6}}\",\n        \"key\": \"demo6\",\n        \"delta\": \"{\\\"owner\\\":\\\"test@mail.com\\\",\\\"description\\\":\\\"Data Team QA\\\",\\\"issued\\\":\\\"2015-04-20T18:18:18.425+0000\\\",\\\"roles\\\":[\\\"data-team-qa\\\"]}\",\n        \"consistency\": \"WEAK\",\n        \"audit\": {\n          \"comment\": \"re-import\"\n        }\n      },\n        {\n        \"table\": \"{{table}}\",\n        \"~id\": \"{{id7}}\",\n        \"key\": \"demo7\",\n        \"delta\": \"{\\\"owner\\\":\\\"test@mail.com\\\",\\\"description\\\":\\\"Data Team QA\\\",\\\"issued\\\":\\\"2015-04-20T18:18:18.425+0000\\\",\\\"roles\\\":[\\\"data-team-qa\\\"]}\",\n        \"consistency\": \"WEAK\",\n        \"audit\": {\n          \"comment\": \"re-import\"\n        }\n      },\n        {\n        \"table\": \"{{table}}\",\n        \"~id\": \"{{id8}}\",\n        \"key\": \"demo8\",\n        \"delta\": \"{\\\"owner\\\":\\\"test@mail.com\\\",\\\"description\\\":\\\"Data Team QA\\\",\\\"issued\\\":\\\"2015-04-20T18:18:18.425+0000\\\",\\\"roles\\\":[\\\"data-team-qa\\\"]}\",\n        \"consistency\": \"WEAK\",\n        \"audit\": {\n          \"comment\": \"re-import\"\n        }\n      },\n        {\n        \"table\": \"{{table}}\",\n        \"~id\": \"{{id9}}\",\n        \"key\": \"demo9\",\n        \"delta\": \"{\\\"owner\\\":\\\"test@mail.com\\\",\\\"description\\\":\\\"Data Team QA\\\",\\\"issued\\\":\\\"2015-04-20T18:18:18.425+0000\\\",\\\"roles\\\":[\\\"data-team-qa\\\"]}\",\n        \"consistency\": \"WEAK\",\n        \"audit\": {\n          \"comment\": \"re-import\"\n        }\n      },\n        {\n        \"table\": \"{{table}}\",\n        \"~id\": \"{{id10}}\",\n        \"key\": \"demo10\",\n        \"delta\": \"{\\\"owner\\\":\\\"test@mail.com\\\",\\\"description\\\":\\\"Data Team QA\\\",\\\"issued\\\":\\\"2015-04-20T18:18:18.425+0000\\\",\\\"roles\\\":[\\\"data-team-qa\\\"]}\",\n        \"consistency\": \"WEAK\",\n        \"audit\": {\n          \"comment\": \"re-import\"\n        }\n      }\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/{{table}}?audit=comment:'imports+an+arbitrary+size'&consistency=STRONG&facade=false",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"{{table}}"
											],
											"query": [
												{
													"key": "changeId",
													"value": "993091dd-7751-11eb-b70c-496d0c9f0df0",
													"disabled": true
												},
												{
													"key": "audit",
													"value": "comment:'imports+an+arbitrary+size'"
												},
												{
													"key": "consistency",
													"value": "STRONG"
												},
												{
													"key": "facade",
													"value": "false"
												},
												{
													"key": "tag",
													"value": "<string>",
													"disabled": true
												}
											]
										},
										"description": " Imports an arbitrary size stream of deltas and/or JSON objects.  Two formats are supported: array syntax\n ('[' object ',' object ',' ... ']') and whitespace-separated objects (object whitespace object whitespace ...)\n Each piece of content must have a top-level \"~id\" attribute that determines the object key in the SoR."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sor/1/:table?changeId=<string>&audit=<string>&consistency=STRONG&facade=<string>&tag=<string>&tag=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sor",
														"1",
														":table"
													],
													"query": [
														{
															"key": "changeId",
															"value": "<string>"
														},
														{
															"key": "audit",
															"value": "<string>"
														},
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "facade",
															"value": "<string>"
														},
														{
															"key": "tag",
															"value": "<string>"
														},
														{
															"key": "tag",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "table"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"success\": false,\n \"debug\": {}\n}"
										}
									]
								},
								{
									"name": "Retrieves a list of content items in a particular table.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonBody = pm.response.json();",
													"",
													"if(jsonBody.length > 0) {",
													"    const postman_table_name = pm.environment.get(\"table\");",
													"",
													"    pm.test(\"Assert response body\", function () {",
													"        jsonBody.forEach(update => {",
													"            pm.expect(update).to.have.keys(\"~deleted\",\"~firstUpdateAt\",\"~id\",\"~lastMutateAt\",\"~lastUpdateAt\",\"~signature\",\"~table\",\"~version\",\"audit\",\"client\",\"consistency\",\"delta\",\"key\",\"table\",\"test_field\",\"type\");",
													"            pm.expect(update.audit).to.have.keys(\"comment\");",
													"            pm.expect(update[\"~table\"]).to.eql(postman_table_name);",
													"        });",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-BV-Api-Key",
												"value": "{{api_key}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/{{table}}?from=<string>&limit=10&includeDeletes=false&consistency=STRONG&debug=true&APIKey={{api_key}}",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"{{table}}"
											],
											"query": [
												{
													"key": "from",
													"value": "<string>"
												},
												{
													"key": "limit",
													"value": "10"
												},
												{
													"key": "includeDeletes",
													"value": "false"
												},
												{
													"key": "consistency",
													"value": "STRONG"
												},
												{
													"key": "debug",
													"value": "true"
												},
												{
													"key": "APIKey",
													"value": "{{api_key}}",
													"description": "(Required) "
												}
											]
										},
										"description": "Retrieves a list of content items in a particular table.  To retrieve <em>all</em> items in a table set the\n limit param to a very large value (eg. Long.MAX_VALUE), but for large tables be sure your client can stream the\n results without exhausting all available memory."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sor/1/:table?from=<string>&limit=10&includeDeletes=false&consistency=STRONG&debug=<string>&APIKey=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sor",
														"1",
														":table"
													],
													"query": [
														{
															"key": "from",
															"value": "<string>"
														},
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "includeDeletes",
															"value": "false"
														},
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "debug",
															"value": "<string>"
														},
														{
															"key": "APIKey",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "table"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										}
									]
								},
								{
									"name": "Drops a table",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-BV-API-Key",
												"type": "text",
												"value": "{{api_key}}"
											}
										],
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"_table",
												"{{table}}"
											],
											"query": [
												{
													"key": "audit",
													"value": "comment:'table_removal'"
												}
											]
										},
										"description": "Returns a SuccessResponse if table is dropped"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														":table"
													],
													"query": [
														{
															"key": "audit",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "table"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"success\": false,\n \"debug\": {}\n}"
										}
									]
								}
							]
						},
						{
							"name": "TC: Request for not existing table",
							"item": [
								{
									"name": "Imports an arbitrary size stream of deltas and/or JSON objects.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const uuid = require('uuid');",
													"pm.environment.set('id1', uuid.v4());",
													"pm.environment.set('id2', uuid.v4());",
													"pm.environment.set('id3', uuid.v4());",
													"pm.environment.set('id4', uuid.v4());",
													"pm.environment.set('id5', uuid.v4());",
													"pm.environment.set('id6', uuid.v4());",
													"pm.environment.set('id7', uuid.v4());",
													"pm.environment.set('id8', uuid.v4());",
													"pm.environment.set('id9', uuid.v4());",
													"pm.environment.set('id10', uuid.v4());",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.json()).to.eql({\"message\":\"Unknown table: not_existing_table\",\"table\":\"not_existing_table\",\"suppressed\":[]});",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-BV-Api-Key",
												"value": "{{api_key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n         {\n            \"table\": \"{{table}}\",\n            \"~id\": \"{{id1}}\",\n            \"key\": \"demo1\",\n            \"delta\": \"{\\\"field1\\\":\\\"value1\\\",\\\"field2\\\":\\\"value2\\\",\\\"field3\\\":\\\"value3\\\"}\",\n            \"consistency\": \"STRONG\",\n            \"audit\": {\n              \"comment\": \"Adding demo1 document\"\n            }\n          },\n          {\n        \"table\": \"{{table}}\",\n        \"~id\": \"{{id2}}\",\n        \"key\": \"demo2\",\n        \"delta\": \"{\\\"field1\\\":\\\"value1.1\\\",\\\"field5\\\":\\\"value5\\\",\\\"field32\\\":\\\"value33\\\"}\",\n        \"consistency\": \"STRONG\",\n        \"audit\": {\n          \"comment\": \"Update and Add\"\n        }\n      },\n      {\n        \"table\": \"{{table}}\",\n        \"~id\": \"{{id3}}\",\n        \"key\": \"demo3\",\n        \"delta\": \"{\\\"owner\\\":\\\"test@mail.com\\\",\\\"description\\\":\\\"Data Team QA\\\",\\\"issued\\\":\\\"2015-04-20T18:18:18.425+0000\\\",\\\"roles\\\":[\\\"data-team-qa\\\"]}\",\n        \"consistency\": \"NO_DURABLE\",\n        \"audit\": {\n          \"comment\": \"re-import\"\n        }\n      },\n            {\n        \"table\": \"{{table}}\",\n        \"~id\": \"{{id4}}\",\n        \"key\": \"demo4\",\n        \"delta\": \"{\\\"owner\\\":\\\"test@mail.com\\\",\\\"description\\\":\\\"Data Team QA\\\",\\\"issued\\\":\\\"2015-04-20T18:18:18.425+0000\\\",\\\"roles\\\":[\\\"data-team-qa\\\"]}\",\n        \"consistency\": \"STRONG\",\n        \"audit\": {\n          \"comment\": \"re-import\"\n        }\n      },\n            {\n        \"table\": \"{{table}}\",\n        \"~id\": \"{{id5}}\",\n        \"key\": \"demo5\",\n        \"delta\": \"{\\\"owner\\\":\\\"test@mail.com\\\",\\\"description\\\":\\\"Data Team QA\\\",\\\"issued\\\":\\\"2015-04-20T18:18:18.425+0000\\\",\\\"roles\\\":[\\\"data-team-qa\\\"]}\",\n        \"consistency\": \"STRONG\",\n        \"audit\": {\n          \"comment\": \"re-import\"\n        }\n      },\n        {\n        \"table\": \"{{table}}\",\n        \"~id\": \"{{id6}}\",\n        \"key\": \"demo6\",\n        \"delta\": \"{\\\"owner\\\":\\\"test@mail.com\\\",\\\"description\\\":\\\"Data Team QA\\\",\\\"issued\\\":\\\"2015-04-20T18:18:18.425+0000\\\",\\\"roles\\\":[\\\"data-team-qa\\\"]}\",\n        \"consistency\": \"WEAK\",\n        \"audit\": {\n          \"comment\": \"re-import\"\n        }\n      },\n        {\n        \"table\": \"{{table}}\",\n        \"~id\": \"{{id7}}\",\n        \"key\": \"demo7\",\n        \"delta\": \"{\\\"owner\\\":\\\"test@mail.com\\\",\\\"description\\\":\\\"Data Team QA\\\",\\\"issued\\\":\\\"2015-04-20T18:18:18.425+0000\\\",\\\"roles\\\":[\\\"data-team-qa\\\"]}\",\n        \"consistency\": \"WEAK\",\n        \"audit\": {\n          \"comment\": \"re-import\"\n        }\n      },\n        {\n        \"table\": \"{{table}}\",\n        \"~id\": \"{{id8}}\",\n        \"key\": \"demo8\",\n        \"delta\": \"{\\\"owner\\\":\\\"test@mail.com\\\",\\\"description\\\":\\\"Data Team QA\\\",\\\"issued\\\":\\\"2015-04-20T18:18:18.425+0000\\\",\\\"roles\\\":[\\\"data-team-qa\\\"]}\",\n        \"consistency\": \"WEAK\",\n        \"audit\": {\n          \"comment\": \"re-import\"\n        }\n      },\n        {\n        \"table\": \"{{table}}\",\n        \"~id\": \"{{id9}}\",\n        \"key\": \"demo9\",\n        \"delta\": \"{\\\"owner\\\":\\\"test@mail.com\\\",\\\"description\\\":\\\"Data Team QA\\\",\\\"issued\\\":\\\"2015-04-20T18:18:18.425+0000\\\",\\\"roles\\\":[\\\"data-team-qa\\\"]}\",\n        \"consistency\": \"WEAK\",\n        \"audit\": {\n          \"comment\": \"re-import\"\n        }\n      },\n        {\n        \"table\": \"{{table}}\",\n        \"~id\": \"{{id10}}\",\n        \"key\": \"demo10\",\n        \"delta\": \"{\\\"owner\\\":\\\"test@mail.com\\\",\\\"description\\\":\\\"Data Team QA\\\",\\\"issued\\\":\\\"2015-04-20T18:18:18.425+0000\\\",\\\"roles\\\":[\\\"data-team-qa\\\"]}\",\n        \"consistency\": \"WEAK\",\n        \"audit\": {\n          \"comment\": \"re-import\"\n        }\n      }\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/not_existing_table?audit=comment:'imports+an+arbitrary+size'&consistency=STRONG&facade=false",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"not_existing_table"
											],
											"query": [
												{
													"key": "changeId",
													"value": "993091dd-7751-11eb-b70c-496d0c9f0df0",
													"disabled": true
												},
												{
													"key": "audit",
													"value": "comment:'imports+an+arbitrary+size'"
												},
												{
													"key": "consistency",
													"value": "STRONG"
												},
												{
													"key": "facade",
													"value": "false"
												},
												{
													"key": "tag",
													"value": "<string>",
													"disabled": true
												}
											]
										},
										"description": " Imports an arbitrary size stream of deltas and/or JSON objects.  Two formats are supported: array syntax\n ('[' object ',' object ',' ... ']') and whitespace-separated objects (object whitespace object whitespace ...)\n Each piece of content must have a top-level \"~id\" attribute that determines the object key in the SoR."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sor/1/:table?changeId=<string>&audit=<string>&consistency=STRONG&facade=<string>&tag=<string>&tag=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sor",
														"1",
														":table"
													],
													"query": [
														{
															"key": "changeId",
															"value": "<string>"
														},
														{
															"key": "audit",
															"value": "<string>"
														},
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "facade",
															"value": "<string>"
														},
														{
															"key": "tag",
															"value": "<string>"
														},
														{
															"key": "tag",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "table"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"success\": false,\n \"debug\": {}\n}"
										}
									]
								}
							]
						},
						{
							"name": "TC: Request with empty body",
							"item": [
								{
									"name": "Creates table /sor/1/_table/{table} Copy",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var uuid = require('uuid');",
													"pm.environment.set('table', 'table_'+uuid.v4());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-BV-API-Key",
												"type": "text",
												"value": "{{api_key}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"_table",
												"{{table}}"
											],
											"query": [
												{
													"key": "options",
													"value": "placement:'ugc_global:ugc'"
												},
												{
													"key": "audit",
													"value": "comment:'initial+provisioning'"
												}
											]
										},
										"description": "Returns a SuccessResponse if table is created"
									},
									"response": []
								},
								{
									"name": "Imports an arbitrary size stream of deltas and/or JSON objects",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const uuid = require('uuid');",
													"pm.environment.set('id1', uuid.v4());",
													"pm.environment.set('id2', uuid.v4());",
													"pm.environment.set('id3', uuid.v4());",
													"pm.environment.set('id4', uuid.v4());",
													"pm.environment.set('id5', uuid.v4());",
													"pm.environment.set('id6', uuid.v4());",
													"pm.environment.set('id7', uuid.v4());",
													"pm.environment.set('id8', uuid.v4());",
													"pm.environment.set('id9', uuid.v4());",
													"pm.environment.set('id10', uuid.v4());",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-BV-Api-Key",
												"value": "{{api_key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/{{table}}?audit=comment:'imports+an+arbitrary+size'&consistency=STRONG&facade=false",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"{{table}}"
											],
											"query": [
												{
													"key": "changeId",
													"value": "993091dd-7751-11eb-b70c-496d0c9f0df0",
													"disabled": true
												},
												{
													"key": "audit",
													"value": "comment:'imports+an+arbitrary+size'"
												},
												{
													"key": "consistency",
													"value": "STRONG"
												},
												{
													"key": "facade",
													"value": "false"
												},
												{
													"key": "tag",
													"value": "<string>",
													"disabled": true
												}
											]
										},
										"description": " Imports an arbitrary size stream of deltas and/or JSON objects.  Two formats are supported: array syntax\n ('[' object ',' object ',' ... ']') and whitespace-separated objects (object whitespace object whitespace ...)\n Each piece of content must have a top-level \"~id\" attribute that determines the object key in the SoR."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sor/1/:table?changeId=<string>&audit=<string>&consistency=STRONG&facade=<string>&tag=<string>&tag=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sor",
														"1",
														":table"
													],
													"query": [
														{
															"key": "changeId",
															"value": "<string>"
														},
														{
															"key": "audit",
															"value": "<string>"
														},
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "facade",
															"value": "<string>"
														},
														{
															"key": "tag",
															"value": "<string>"
														},
														{
															"key": "tag",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "table"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"success\": false,\n \"debug\": {}\n}"
										}
									]
								},
								{
									"name": "Retrieves a list of content items in a particular table.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.json()).to.eql([]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-BV-Api-Key",
												"value": "{{api_key}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/{{table}}?from=<string>&limit=10&includeDeletes=false&consistency=STRONG&debug=true&APIKey={{api_key}}",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"{{table}}"
											],
											"query": [
												{
													"key": "from",
													"value": "<string>"
												},
												{
													"key": "limit",
													"value": "10"
												},
												{
													"key": "includeDeletes",
													"value": "false"
												},
												{
													"key": "consistency",
													"value": "STRONG"
												},
												{
													"key": "debug",
													"value": "true"
												},
												{
													"key": "APIKey",
													"value": "{{api_key}}",
													"description": "(Required) "
												}
											]
										},
										"description": "Retrieves a list of content items in a particular table.  To retrieve <em>all</em> items in a table set the\n limit param to a very large value (eg. Long.MAX_VALUE), but for large tables be sure your client can stream the\n results without exhausting all available memory."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sor/1/:table?from=<string>&limit=10&includeDeletes=false&consistency=STRONG&debug=<string>&APIKey=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sor",
														"1",
														":table"
													],
													"query": [
														{
															"key": "from",
															"value": "<string>"
														},
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "includeDeletes",
															"value": "false"
														},
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "debug",
															"value": "<string>"
														},
														{
															"key": "APIKey",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "table"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										}
									]
								},
								{
									"name": "Drops a table",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-BV-API-Key",
												"type": "text",
												"value": "{{api_key}}"
											}
										],
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"_table",
												"{{table}}"
											],
											"query": [
												{
													"key": "audit",
													"value": "comment:'table_removal'"
												}
											]
										},
										"description": "Returns a SuccessResponse if table is dropped"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														":table"
													],
													"query": [
														{
															"key": "audit",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "table"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"success\": false,\n \"debug\": {}\n}"
										}
									]
								}
							]
						},
						{
							"name": "TC: Request without api-key and audit param",
							"item": [
								{
									"name": "Imports an arbitrary size stream of deltas and/or JSON objects. Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.eql('Missing required query parameter: audit');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-BV-API-Key",
												"value": "{{api_key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/not_exisiting_table?consistency=STRONG&facade=false&tag=<string>",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"not_exisiting_table"
											],
											"query": [
												{
													"key": "changeId",
													"value": "<string>",
													"disabled": true
												},
												{
													"key": "audit",
													"value": "<string>",
													"disabled": true
												},
												{
													"key": "consistency",
													"value": "STRONG"
												},
												{
													"key": "facade",
													"value": "false"
												},
												{
													"key": "tag",
													"value": "<string>"
												}
											]
										},
										"description": " Imports an arbitrary size stream of deltas and/or JSON objects.  Two formats are supported: array syntax\n ('[' object ',' object ',' ... ']') and whitespace-separated objects (object whitespace object whitespace ...)\n Each piece of content must have a top-level \"~id\" attribute that determines the object key in the SoR."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sor/1/:table?changeId=<string>&audit=<string>&consistency=STRONG&facade=<string>&tag=<string>&tag=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sor",
														"1",
														":table"
													],
													"query": [
														{
															"key": "changeId",
															"value": "<string>"
														},
														{
															"key": "audit",
															"value": "<string>"
														},
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "facade",
															"value": "<string>"
														},
														{
															"key": "tag",
															"value": "<string>"
														},
														{
															"key": "tag",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "table"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"success\": false,\n \"debug\": {}\n}"
										}
									]
								}
							]
						},
						{
							"name": "TC: Request without api-key",
							"item": [
								{
									"name": "Imports an arbitrary size stream of deltas and/or JSON objects.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.json().reason).to.be.oneOf([`not authorized to update table ${pm.environment.get('table')}`, 'not authorized']);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-BV-API-Key",
												"value": "{{api_key_no_rights}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n         {\n            \"table\": \"{{table}}\",\n            \"~id\": \"{{id1}}\",\n            \"key\": \"demo1\",\n            \"delta\": \"{\\\"field1\\\":\\\"value1\\\",\\\"field2\\\":\\\"value2\\\",\\\"field3\\\":\\\"value3\\\"}\",\n            \"consistency\": \"STRONG\",\n            \"audit\": {\n              \"comment\": \"Adding demo1 document\"\n            }\n          },\n          {\n        \"table\": \"{{table}}\",\n        \"~id\": \"{{id2}}\",\n        \"key\": \"demo2\",\n        \"delta\": \"{\\\"field1\\\":\\\"value1.1\\\",\\\"field5\\\":\\\"value5\\\",\\\"field32\\\":\\\"value33\\\"}\",\n        \"consistency\": \"STRONG\",\n        \"audit\": {\n          \"comment\": \"Update and Add\"\n        }\n      }\n]"
										},
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/{{table}}?audit=comment:'table_import'&consistency=STRONG",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"{{table}}"
											],
											"query": [
												{
													"key": "changeId",
													"value": "<string>",
													"disabled": true
												},
												{
													"key": "audit",
													"value": "comment:'table_import'"
												},
												{
													"key": "facade",
													"value": "<string>",
													"disabled": true
												},
												{
													"key": "tag",
													"value": "<string>",
													"disabled": true
												},
												{
													"key": "consistency",
													"value": "STRONG"
												}
											]
										},
										"description": " Imports an arbitrary size stream of deltas and/or JSON objects.  Two formats are supported: array syntax\n ('[' object ',' object ',' ... ']') and whitespace-separated objects (object whitespace object whitespace ...)\n Each piece of content must have a top-level \"~id\" attribute that determines the object key in the SoR."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sor/1/:table?changeId=<string>&audit=<string>&consistency=STRONG&facade=<string>&tag=<string>&tag=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sor",
														"1",
														":table"
													],
													"query": [
														{
															"key": "changeId",
															"value": "<string>"
														},
														{
															"key": "audit",
															"value": "<string>"
														},
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "facade",
															"value": "<string>"
														},
														{
															"key": "tag",
															"value": "<string>"
														},
														{
															"key": "tag",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "table"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"success\": false,\n \"debug\": {}\n}"
										}
									]
								}
							]
						},
						{
							"name": "Imports an arbitrary size stream of deltas and/or JSON objects.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseurl_dc1}}/sor/1/some_table?audit=comment:'imports+an+arbitrary+size'&consistency=STRONG&facade=false&tag=postman",
									"host": [
										"{{baseurl_dc1}}"
									],
									"path": [
										"sor",
										"1",
										"some_table"
									],
									"query": [
										{
											"key": "changeId",
											"value": "<string>",
											"disabled": true
										},
										{
											"key": "audit",
											"value": "comment:'imports+an+arbitrary+size'"
										},
										{
											"key": "consistency",
											"value": "STRONG"
										},
										{
											"key": "facade",
											"value": "false"
										},
										{
											"key": "tag",
											"value": "postman"
										}
									]
								},
								"description": " Imports an arbitrary size stream of deltas and/or JSON objects.  Two formats are supported: array syntax\n ('[' object ',' object ',' ... ']') and whitespace-separated objects (object whitespace object whitespace ...)\n Each piece of content must have a top-level \"~id\" attribute that determines the object key in the SoR."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sor/1/:table?changeId=<string>&audit=<string>&consistency=STRONG&facade=<string>&tag=<string>&tag=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sor",
												"1",
												":table"
											],
											"query": [
												{
													"key": "changeId",
													"value": "<string>"
												},
												{
													"key": "audit",
													"value": "<string>"
												},
												{
													"key": "consistency",
													"value": "STRONG"
												},
												{
													"key": "facade",
													"value": "<string>"
												},
												{
													"key": "tag",
													"value": "<string>"
												},
												{
													"key": "tag",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "table"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"success\": false,\n \"debug\": {}\n}"
								}
							]
						}
					]
				}
			]
		}
	]
}