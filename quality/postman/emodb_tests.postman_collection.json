{
	"info": {
		"_postman_id": "317883f9-4853-454e-8805-c9460e640990",
		"name": "EmoDB_Tests",
		"description": "Postman tests that are meant to cover most of positive and negative scenarios",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "sor/1 test cases",
			"item": [
				{
					"name": " _table test cases",
					"item": [
						{
							"name": "{table}",
							"item": [
								{
									"name": "Returns a table template GET /sor/1/_table/:table",
									"item": [
										{
											"name": "TC: Request without api-key",
											"item": [
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table1', 'postman_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "apikey"
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"type\":\"create_test_table\",\n    \"client\":\"postman_customer\",\n    \"test_field\":\"postman\"\n}"
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table1}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table1}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Returns a table template",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {",
																	"    pm.response.to.have.status(403);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"reason\":\"not authorized\"});",
																	"});",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key_no_rights}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table1}}",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table1}}"
															],
															"query": [
																{
																	"key": "debug",
																	"value": "<string>",
																	"disabled": true
																}
															]
														},
														"description": "Returns a Map"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?debug=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table1}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table1}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											],
											"description": "Returns 10 tables (default value) where limit parameter is not defined",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "TC: Get table with undefined template",
											"item": [
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table2', 'postman_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body is correct\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "apikey"
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{}"
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table2}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table2}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Returns a table template",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body(\"{}\"));",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table2}}",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table2}}"
															],
															"query": [
																{
																	"key": "debug",
																	"value": "<string>",
																	"disabled": true
																}
															]
														},
														"description": "Returns a Map"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?debug=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														}
													]
												},
												{
													"name": "Purges a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.text()).to.include('{\"id\":');",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table2}}/purge?audit=comment:'table purge'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table2}}",
																"purge"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table purge'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is purged"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table/purge?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table",
																		"purge"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table2}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table2}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											],
											"description": "Request with correct api-key which has sor|read|{table} permission to get table template where template is not defined returns: empty body {}",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "TC: Get table template when it is defined, debug is not set",
											"item": [
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table3', 'postman_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "apikey"
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"type\":\"create_test_table\",\n    \"client\":\"postman_customer\",\n    \"test_field\":\"postman\",\n    \"test\":\"get_table_template\"\n}"
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table3}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table3}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Returns a table template",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"test_field\":\"postman\",\"client\":\"postman_customer\",\"test\":\"get_table_template\",\"type\":\"create_test_table\"}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table3}}",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table3}}"
															]
														},
														"description": "Returns a Map"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?debug=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														}
													]
												},
												{
													"name": "Purges a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.text()).to.include('{\"id\":');",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table3}}/purge?audit=comment:'table purge'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table3}}",
																"purge"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table purge'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is purged"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table/purge?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table",
																		"purge"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table3}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table3}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											],
											"description": "Request with correct api-key which has sor|read|{table} permission and debug param is not set to get table template where template is defined returns: unsorted table template",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "TC: Get table template when it is defined, debug: true",
											"item": [
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table4', 'postman_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "apikey"
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"type\":\"create_test_table\",\n    \"client\":\"postman_customer\",\n    \"test_field\":\"postman\",\n    \"test\":\"get_table_template\"\n}"
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table4}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table4}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Returns a table template",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"client\":\"postman_customer\",\"test\":\"get_table_template\",\"test_field\":\"postman\",\"type\":\"create_test_table\"}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table4}}?debug=true",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table4}}"
															],
															"query": [
																{
																	"key": "debug",
																	"value": "true"
																}
															]
														},
														"description": "Returns a Map"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?debug=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														}
													]
												},
												{
													"name": "Purges a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.text()).to.include('{\"id\":');",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table4}}/purge?audit=comment:'table purge'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table4}}",
																"purge"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table purge'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is purged"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table/purge?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table",
																		"purge"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table4}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table4}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											],
											"description": "Request with correct api-key which has sor|read|{table} permission and debug param is set to true to get table template where template is defined returns: sorted table template",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "TC: Get table template when it is defined, debug: false",
											"item": [
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table5', 'postman_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "apikey"
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"type\":\"create_test_table\",\n    \"client\":\"postman_customer\",\n    \"test_field\":\"postman\",\n    \"test\":\"get_table_template\",\n    \"unsorted\":\"table_template\"\n}"
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table5}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table5}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Returns a table template",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"unsorted\":\"table_template\",\"test_field\":\"postman\",\"client\":\"postman_customer\",\"test\":\"get_table_template\",\"type\":\"create_test_table\"}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table5}}?debug=false",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table5}}"
															],
															"query": [
																{
																	"key": "debug",
																	"value": "false"
																}
															]
														},
														"description": "Returns a Map"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?debug=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														}
													]
												},
												{
													"name": "Purges a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.text()).to.include('{\"id\":');",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table5}}/purge?audit=comment:'table purge'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table5}}",
																"purge"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table purge'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is purged"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table/purge?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table",
																		"purge"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table5}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table5}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											],
											"description": "Request with correct api-key which has sor|read|{table} permission and debug param is set to false to get table template where template is defined returns: unsorted table template",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "TC: Get table template for not existing table",
											"item": [
												{
													"name": "Returns a table template",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(404);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"message\":\"Unknown table: doesnt_exist\",\"table\":\"doesnt_exist\",\"suppressed\":[]}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/doesnt_exist?debug=true",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"doesnt_exist"
															],
															"query": [
																{
																	"key": "debug",
																	"value": "true"
																}
															]
														},
														"description": "Returns a Map"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?debug=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														}
													]
												}
											],
											"description": "\"Request with correct api-key which has sor|read|{table} permission and debug param is set true to get table template for the table that doesn't exists returns: \"\"message\"\": \"\"Unknown table: %table name%\"\",\n    \"\"table\"\": \"\"%table name%\"\",\n    \"\"suppressed\"\": []\"",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "Returns a table template",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"reason\":\"not authorized\"});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-BV-Api-Key",
														"value": "{{api_key_no_rights}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/:table?debug=<string>",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														":table"
													],
													"query": [
														{
															"key": "debug",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "table",
															"value": "<string>",
															"description": "(Required) "
														}
													]
												},
												"description": "Returns a Map"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table?debug=<string>",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "debug",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Creates a table PUT /sor/1/_table/:table",
									"item": [
										{
											"name": "TC: Request without parameters",
											"item": [
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table6', 'postman_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('Missing required query parameter: options'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{}"
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "<string>",
																	"disabled": true
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											],
											"description": "Request with no parameters and body set as {} returns  \"Missing required query parameter: options\"",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "TC: Request with body type set to text instead of json",
											"item": [
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table7', 'postman_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"message\":\"Unrecognized token \\'test\\': was expecting \\'null\\', \\'true\\', \\'false\\' or NaN\"}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "test",
															"options": {
																"raw": {
																	"language": "text"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table7}}?options=placement:'ugc_global:ugc'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table7}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "<string>",
																	"disabled": true
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											],
											"description": "Request with body which is not json (e.g. text) returns: code 400 Bad Request",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "TC: Request with json body type, correct options without audit parameter ",
											"item": [
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table8', 'postman_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('Missing required query parameter: audit'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table8}}?options=placement:'ugc_global:ugc'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table8}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											],
											"description": "Request body of json type, options with correct o-rison value, with no audit parameter returns: \"Missing required query parameter: audit\"",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "TC: Request without api-key",
											"item": [
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table9', 'postman_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {",
																	"    pm.response.to.have.status(403);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"reason\":\"not authorized\"});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key_no_rights}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table9}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table9}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											],
											"description": "Request body of json type, options with correct o-rison value, with correct audit parameter and without authentication key returns: \"\"reason\": \"not authorized\"\"",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "TC: Create new table ",
											"item": [
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table10', 'postman_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table10}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table10}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table10}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Purges a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.text()).to.include('{\"id\":');",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table10}}/purge?audit=comment:'table purge'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table10}}",
																"purge"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table purge'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is purged"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table/purge?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table",
																		"purge"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table10}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table10}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											],
											"description": "Request body of json type, options with correct o-rison value, with correct audit parameter and authentication key which has sor | create_table permission returns: \"\"success\": true\"",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "TC: Create new table with existing table name",
											"item": [
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table11', 'postman_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table11}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table11}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table11}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Creates a table with existing table name",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 409\", function () {",
																	"    pm.response.to.have.status(409);",
																	"});",
																	"",
																	"const postman_table_name = pm.environment.get(\"table11\");",
																	"",
																	"const expectedResponseBody = {",
																	"    \"message\":`Cannot create table that already exists: ${postman_table_name}`,",
																	"    \"table\":postman_table_name,",
																	"    \"suppressed\":[]}",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql(expectedResponseBody);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"customer\": \"postman\",\n     \"new_attribute\": \"some_value\",\n    \"test_table\":\"{{table11}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table11}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table11}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table11}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table11}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											],
											"description": "Request body of json type, options with correct o-rison value, with correct audit parameter and authentication key which has sor | create_table permission creates table with name that is already used returns: TableExistsException thrown and no table with the same name has been created",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "TC: Create new table with template",
											"item": [
												{
													"name": "Returns a table template for table before its created",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 404\", function () {",
																	"    pm.response.to.have.status(404);",
																	"});",
																	"",
																	"const postman_test_table = pm.environment.get(\"table12\");",
																	"",
																	"const expectedResponseBody = {",
																	"    \"message\":`Unknown table: ${postman_test_table}`,",
																	"    \"table\":postman_test_table,",
																	"    \"suppressed\":[]};",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql(expectedResponseBody);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table12', 'postman_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table12}}?debug=true",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table12}}"
															],
															"query": [
																{
																	"key": "debug",
																	"value": "true"
																}
															]
														},
														"description": "Returns a Map"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?debug=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														}
													]
												},
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n        \"name\": \"{{table12}}\",\n        \"options\": {\n            \"placement\": \"ugc_global:ugc\",\n            \"facades\": []\n        },\n        \"template\": {},\n        \"availability\": {\n            \"placement\": \"ugc_global:ugc\",\n            \"facade\": false\n        }\n}\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table12}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table12}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Returns a table template after table is created",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"const postman_test_table = pm.environment.get(\"table12\");",
																	"const expectedResponceBody = {",
																	"    \"availability\":{",
																	"        \"facade\":false,",
																	"        \"placement\":\"ugc_global:ugc\"",
																	"    },",
																	"    \"name\":postman_test_table,",
																	"    \"options\":{",
																	"        \"facades\":[],",
																	"        \"placement\":\"ugc_global:ugc\"},",
																	"        \"template\":{}",
																	"    }",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql(expectedResponceBody);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table12}}?debug=true",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table12}}"
															],
															"query": [
																{
																	"key": "debug",
																	"value": "true"
																}
															]
														},
														"description": "Returns a Map"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?debug=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														}
													]
												},
												{
													"name": "Purges a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.have.keys(\"id\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table12}}/purge?audit=comment:'table purge'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table12}}",
																"purge"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table purge'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is purged"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table/purge?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table",
																		"purge"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table12}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table12}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											],
											"description": "Request body of json type, options with correct o-rison value, with correct audit parameter and authentication key which has sor | create_table permission creates table: e.g. \n[\n    {\n        \"name\": \"postman_test_table\",\n        \"options\": {\n            \"placement\": \"ugc_global:ugc\",\n            \"facades\": []\n        },\n        \"template\": {},\n        \"availability\": {\n            \"placement\": \"ugc_global:ugc\",\n            \"facade\": false\n        }\n    }\n] ",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "Creates a table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.to.have.body('Missing required query parameter: audit'));",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table8}}?options=placement:'ugc_global:ugc'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table8}}"
													],
													"query": [
														{
															"key": "options",
															"value": "placement:'ugc_global:ugc'"
														},
														{
															"key": "audit",
															"value": "",
															"disabled": true
														}
													]
												},
												"description": "Returns a SuccessResponse if table is created"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "options",
																	"value": "<string>"
																},
																{
																	"key": "audit",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "Drops a table DELETE /sor/1/_table/:table",
									"item": [
										{
											"name": "TC: Request without api-key",
											"item": [
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {",
																	"    pm.response.to.have.status(403);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"reason\":\"not authorized\"});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key_no_rights}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/some_table_name?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"some_table_name"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											],
											"description": "Request without api-key returns: \"\"reason\": \"not authorized\"\""
										},
										{
											"name": "TC: Request without audit param when api-key is correct",
											"item": [
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('Missing required query parameter: audit'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/some_table_name",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"some_table_name"
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											],
											"description": "Request without audit parameter, with correct api-key which has sor|drop_table|{table} permission returns: \"Missing required query parameter: audit\"",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "TC: Request remove table",
											"item": [
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table20', 'postman_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table20}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table20}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table20}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table20}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table20}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"const postman_table_name = pm.environment.get(\"table20\");",
																	"const expectedResponseBody = `This table name is currently undergoing maintenance and therefore cannot be modified: ${postman_table_name}`;",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.text()).to.eql(expectedResponseBody);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table20}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table20}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Returns Table metadata",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 404\", function () {",
																	"    pm.response.to.have.status(404);",
																	"});",
																	"",
																	"const postman_table_name = pm.environment.get(\"table20\");",
																	"",
																	"const expectedResponseBody = {",
																	"        \"message\":`Unknown table: ${postman_table_name}`,",
																	"        \"table\":postman_table_name,",
																	"        \"suppressed\":[]",
																	"    }",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql(expectedResponseBody);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table20}}/metadata",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table20}}",
																"metadata"
															]
														},
														"description": "Returns a Table object"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table/metadata",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table",
																		"metadata"
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"options\": {\n  \"placement\": \"cupidatat dolor Excepteur\",\n  \"facades\": [\n   {\n    \"placement\": \"laboris magna s\"\n   },\n   {\n    \"placement\": \"minim deserunt\"\n   }\n  ]\n },\n \"template\": {},\n \"name\": \"eiusmod\",\n \"availability\": {\n  \"placement\": \"quis\",\n  \"facade\": false\n }\n}"
														}
													]
												}
											],
											"description": "Request with audit parameter, with correct api-key returns: \"\"success\": true\" and table removed",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "TC: Request UnknownTableException",
											"item": [
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table13', 'postman_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n        \"name\": \"{{table13}}\",\n        \"options\": {\n            \"placement\": \"ugc_global:ugc\",\n            \"facades\": []\n        },\n        \"template\": {},\n        \"availability\": {\n            \"placement\": \"ugc_global:ugc\",\n            \"facade\": false\n        }\n}\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table13}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table13}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Returns Table metadata",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"const postman_table_name = pm.environment.get(\"table13\");",
																	"",
																	"const expectedResponseBody = {",
																	"        \"name\":postman_table_name,",
																	"        \"options\":{",
																	"            \"placement\":\"ugc_global:ugc\",",
																	"            \"facades\":[]",
																	"        },",
																	"        \"template\":{",
																	"            \"template\":{},",
																	"            \"name\":postman_table_name,",
																	"            \"options\":{",
																	"                \"facades\":[],",
																	"                \"placement\":\"ugc_global:ugc\"",
																	"            },",
																	"            \"availability\":{",
																	"                \"facade\":false,",
																	"                \"placement\":\"ugc_global:ugc\"",
																	"            }",
																	"        },",
																	"        \"availability\":{",
																	"            \"placement\":\"ugc_global:ugc\",",
																	"            \"facade\":false",
																	"        }",
																	"}",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql(expectedResponseBody);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table13}}/metadata",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table13}}",
																"metadata"
															]
														},
														"description": "Returns a Table object"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table/metadata",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table",
																		"metadata"
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"options\": {\n  \"placement\": \"cupidatat dolor Excepteur\",\n  \"facades\": [\n   {\n    \"placement\": \"laboris magna s\"\n   },\n   {\n    \"placement\": \"minim deserunt\"\n   }\n  ]\n },\n \"template\": {},\n \"name\": \"eiusmod\",\n \"availability\": {\n  \"placement\": \"quis\",\n  \"facade\": false\n }\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table13}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table13}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Returns Table metadata",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"    pm.test(\"Status code is 404\", function () {",
																	"    pm.response.to.have.status(404);",
																	"});",
																	"",
																	"const postman_table_name = pm.environment.get(\"table13\");",
																	"",
																	"const expectedResponseBody = {",
																	"        \"message\":`Unknown table: ${postman_table_name}`,",
																	"        \"table\":postman_table_name,",
																	"        \"suppressed\":[]",
																	"}",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql(expectedResponseBody);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table13}}/metadata",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table13}}",
																"metadata"
															]
														},
														"description": "Returns a Table object"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table/metadata",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table",
																		"metadata"
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"options\": {\n  \"placement\": \"cupidatat dolor Excepteur\",\n  \"facades\": [\n   {\n    \"placement\": \"laboris magna s\"\n   },\n   {\n    \"placement\": \"minim deserunt\"\n   }\n  ]\n },\n \"template\": {},\n \"name\": \"eiusmod\",\n \"availability\": {\n  \"placement\": \"quis\",\n  \"facade\": false\n }\n}"
														}
													]
												}
											],
											"description": "Request with audit parameter, with correct api-key for the table that doesn't exist returns: UnknownTableException",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "Drops a table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"reason\":\"not authorized\"});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														":table"
													],
													"query": [
														{
															"key": "audit",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "table",
															"value": "<string>",
															"description": "(Required) "
														}
													]
												},
												"description": "Returns a SuccessResponse if table is dropped"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "Returns Table metadata GET /sor/1/_table/:table/metadata",
									"item": [
										{
											"name": "TC: Request without api-key",
											"item": [
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table14', 'postman_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table14}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table14}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table14}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Returns Table metadata",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {",
																	"    pm.response.to.have.status(403);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"reason\":\"not authorized\"});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key_no_rights}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table14}}/metadata",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table14}}",
																"metadata"
															]
														}
													},
													"response": []
												},
												{
													"name": "Purges a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.text()).to.include('{\"id\":');",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table14}}/purge?audit=comment:'table purge'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table14}}",
																"purge"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table purge'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is purged"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table/purge?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table",
																		"purge"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table14}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table14}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											],
											"description": "Request without api-key returns: \"\"reason\": \"not authorized\"\"",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "TC: Request get table metadata",
											"item": [
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table15', 'postman_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table15}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table15}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table15}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Returns Table metadata",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"const postman_table_name = pm.environment.get(\"table15\");",
																	"const expectedResponseBody = {",
																	"    \"name\":postman_table_name,",
																	"    \"options\":{",
																	"        \"placement\":\"ugc_global:ugc\",",
																	"        \"facades\":[]",
																	"    },",
																	"    \"template\":{",
																	"        \"test_table\":postman_table_name,",
																	"        \"customer\":\"postman\"",
																	"    },",
																	"    \"availability\":{",
																	"        \"placement\":\"ugc_global:ugc\",",
																	"        \"facade\":false",
																	"    }",
																	"}",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body(expectedResponseBody));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table15}}/metadata",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table15}}",
																"metadata"
															]
														},
														"description": "Returns a Table object"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table/metadata",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table",
																		"metadata"
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"options\": {\n  \"placement\": \"cupidatat dolor Excepteur\",\n  \"facades\": [\n   {\n    \"placement\": \"laboris magna s\"\n   },\n   {\n    \"placement\": \"minim deserunt\"\n   }\n  ]\n },\n \"template\": {},\n \"name\": \"eiusmod\",\n \"availability\": {\n  \"placement\": \"quis\",\n  \"facade\": false\n }\n}"
														}
													]
												},
												{
													"name": "Purges a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.have.keys(\"id\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table15}}/purge?audit=comment:'table purge'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table15}}",
																"purge"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table purge'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is purged"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table/purge?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table",
																		"purge"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table15}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table15}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											],
											"description": "Request with api-key with sor|read|{table} permission returns table metadata",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "TC: Request get table metada for not existing table",
											"item": [
												{
													"name": "Returns Table metadata",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 404\", function () {",
																	"    pm.response.to.have.status(404);",
																	"});",
																	" ",
																	"const expectedResponseBody = '{\"message\":\"Unknown table: not_existing_table\",\"table\":\"not_existing_table\",\"suppressed\":[]}';",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body(expectedResponseBody));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/not_existing_table/metadata",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"not_existing_table",
																"metadata"
															]
														},
														"description": "Returns a Table object"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table/metadata",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table",
																		"metadata"
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"options\": {\n  \"placement\": \"cupidatat dolor Excepteur\",\n  \"facades\": [\n   {\n    \"placement\": \"laboris magna s\"\n   },\n   {\n    \"placement\": \"minim deserunt\"\n   }\n  ]\n },\n \"template\": {},\n \"name\": \"eiusmod\",\n \"availability\": {\n  \"placement\": \"quis\",\n  \"facade\": false\n }\n}"
														}
													]
												}
											],
											"description": "Request with api-key with sor|read|{table} permission for the table that doesn't exist returns \"message\": \"Unknown table: %table name%\",\n    \"table\": \"%table name%\",\n    \"suppressed\": []",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "Returns Table metadata",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"reason\":\"not authorized\"});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-BV-Api-Key",
														"value": "{{api_key_no_rights}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/:table/metadata",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														":table",
														"metadata"
													],
													"variable": [
														{
															"key": "table",
															"value": "<string>",
															"description": "(Required) "
														}
													]
												},
												"description": "Returns a Table object"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table/metadata",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table",
																"metadata"
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"options\": {\n  \"placement\": \"cupidatat dolor Excepteur\",\n  \"facades\": [\n   {\n    \"placement\": \"laboris magna s\"\n   },\n   {\n    \"placement\": \"minim deserunt\"\n   }\n  ]\n },\n \"template\": {},\n \"name\": \"eiusmod\",\n \"availability\": {\n  \"placement\": \"quis\",\n  \"facade\": false\n }\n}"
												}
											]
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Returns Table options GET /sor/1/_table/:table/options",
									"item": [
										{
											"name": "TC: Request without api-key returns",
											"item": [
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table40', 'postman_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table40}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table40}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table40}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Returns Table options",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {",
																	"    pm.response.to.have.status(403);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"reason\":\"not authorized\"});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key_no_rights}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table40}}/options",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table40}}",
																"options"
															]
														},
														"description": "Returns a TableOptions object"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table/options",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table",
																		"options"
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"placement\": \"do\",\n \"facades\": [\n  {\n   \"placement\": \"cillum laborum ut\"\n  },\n  {\n   \"placement\": \"dolore dolor\"\n  }\n ]\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table40}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table40}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											],
											"description": "Request without api-key returns: \"reason\": \"not authorized\""
										},
										{
											"name": "TC: Request gets table options",
											"item": [
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table16', 'postman_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table16}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table16}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table16}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Returns Table options",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"const expectedResponseBody = '{\"placement\":\"ugc_global:ugc\",\"facades\":[]}';",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body(expectedResponseBody));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table16}}/options",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table16}}",
																"options"
															]
														},
														"description": "Returns a TableOptions object"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table/options",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table",
																		"options"
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"placement\": \"do\",\n \"facades\": [\n  {\n   \"placement\": \"cillum laborum ut\"\n  },\n  {\n   \"placement\": \"dolore dolor\"\n  }\n ]\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table16}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table16}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											],
											"description": "Request with correct api-key which has sor|read|{table} permissions for the existing table returns: e.g. \"placement\": \"ugc_global:ugc\",\n    \"facades\": []",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "TC: Request gets table options of NotExisting table",
											"item": [
												{
													"name": "Returns Table options",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 404\", function () {",
																	"    pm.response.to.have.status(404);",
																	"});",
																	"",
																	"const expectedResponseBody = '{\"message\":\"Unknown table: not_exiting_table\",\"table\":\"not_exiting_table\",\"suppressed\":[]}';",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body(expectedResponseBody));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/not_exiting_table/options",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"not_exiting_table",
																"options"
															]
														},
														"description": "Returns a TableOptions object"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table/options",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table",
																		"options"
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"placement\": \"do\",\n \"facades\": [\n  {\n   \"placement\": \"cillum laborum ut\"\n  },\n  {\n   \"placement\": \"dolore dolor\"\n  }\n ]\n}"
														}
													]
												}
											],
											"description": "Request with correct api-key which has sor|read|{table} permission for the table which doesn't exists returns: \"message\": \"Unknown table: %table name%\",\n    \"table\": \"%table name%\",\n    \"suppressed\": []",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "Returns Table options",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"reason\":\"not authorized\"});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-BV-Api-Key",
														"value": "{{api_key_no_rights}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/:table/options",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														":table",
														"options"
													],
													"variable": [
														{
															"key": "table",
															"value": "some_notexisiting_table",
															"description": "(Required) "
														}
													]
												},
												"description": "Returns a TableOptions object"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table/options",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table",
																"options"
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"placement\": \"do\",\n \"facades\": [\n  {\n   \"placement\": \"cillum laborum ut\"\n  },\n  {\n   \"placement\": \"dolore dolor\"\n  }\n ]\n}"
												}
											]
										}
									]
								},
								{
									"name": "Purges a table POST /sor/1/_table/:table/purge",
									"item": [
										{
											"name": "TC: Request without api-key",
											"item": [
												{
													"name": "Purges a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {",
																	"    pm.response.to.have.status(403);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"reason\":\"not authorized\"});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key_no_rights}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table/purge?audit=<string>",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table",
																"purge"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table",
																	"value": "<string>",
																	"description": "(Required) "
																}
															]
														},
														"description": "Returns a SuccessResponse if table is purged"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table/purge?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table",
																		"purge"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											],
											"description": "Request without api-key returns: \"reason\": \"not authorized to update table %table%\""
										},
										{
											"name": "TC: Request Missing required query parameter: audit",
											"item": [
												{
													"name": "Purges a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('Missing required query parameter: audit'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table/purge",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table",
																"purge"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "<string>",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "table",
																	"value": "<string>",
																	"description": "(Required) "
																}
															]
														},
														"description": "Returns a SuccessResponse if table is purged"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table/purge?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table",
																		"purge"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											],
											"description": "Request with api-key and correct table, without audit parameter returns: Missing required query parameter: audit",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "TC: Request table purge",
											"item": [
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table17', 'postman_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table17}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table17}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table17}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Returns Table options",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"const expectedResponseBody = '{\"placement\":\"ugc_global:ugc\",\"facades\":[]}';",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body(expectedResponseBody));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table17}}/options",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table17}}",
																"options"
															]
														},
														"description": "Returns a TableOptions object"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table/options",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table",
																		"options"
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"placement\": \"do\",\n \"facades\": [\n  {\n   \"placement\": \"cillum laborum ut\"\n  },\n  {\n   \"placement\": \"dolore dolor\"\n  }\n ]\n}"
														}
													]
												},
												{
													"name": "Creates/Updates content in datastore /sor/1/{table}/{key}",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    var jsonData = pm.response.json();      ",
																	"    pm.expect(jsonData.debug).to.have.keys(\"changeId\");",
																	"    pm.expect(jsonData.success).eql(true);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('uuid', uuid.v4());",
																	"postman.setEnvironmentVariable('document_id2', 'document_id2_' + uuid.v4());",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n        \"name\": \"{{table17}}\",\n        \"id\": 1,\n        \"template\": {\n            \"test_field\": \"test_value_of_field\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_global:ugc\",\n            \"facade\": false\n        }\n    }",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table17}}/{{document_id2}}?audit=comment:'adding+document'&consistency={{write_consistency_weak}}&tag=postman&debug=true",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table17}}",
																"{{document_id2}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'adding+document'"
																},
																{
																	"key": "consistency",
																	"value": "{{write_consistency_weak}}"
																},
																{
																	"key": "tag",
																	"value": "postman"
																},
																{
																	"key": "debug",
																	"value": "true"
																}
															]
														},
														"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
													},
													"response": []
												},
												{
													"name": "Creates/Updates content in datastore /sor/1/{table}/{key}",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    var jsonData = pm.response.json();      ",
																	"    pm.expect(jsonData.debug).to.have.keys(\"changeId\");",
																	"    pm.expect(jsonData.success).eql(true);   ",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('uuid', uuid.v4());",
																	"postman.setEnvironmentVariable('document_id2', 'document_id2_' + uuid.v4());",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n        \"name\": \"{{table17}}\",\n        \"id\": 1,\n        \"template\": {\n            \"test_field\": \"test_value_of_field\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_global:ugc\",\n            \"facade\": false\n        }\n    }",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table17}}/{{document_id2}}?audit=comment:'adding+document'&consistency={{write_consistency_weak}}&tag=postman&debug=true",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table17}}",
																"{{document_id2}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'adding+document'"
																},
																{
																	"key": "consistency",
																	"value": "{{write_consistency_weak}}"
																},
																{
																	"key": "tag",
																	"value": "postman"
																},
																{
																	"key": "debug",
																	"value": "true"
																}
															]
														},
														"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
													},
													"response": []
												},
												{
													"name": "Creates/Updates content in datastore /sor/1/{table}/{key}",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    var jsonData = pm.response.json();      ",
																	"    pm.expect(jsonData.debug).to.have.keys(\"changeId\");",
																	"    pm.expect(jsonData.success).eql(true);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('uuid', uuid.v4());",
																	"postman.setEnvironmentVariable('document_id2', 'document_id2_' + uuid.v4());",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n        \"name\": \"{{table17}}\",\n        \"id\": 1,\n        \"template\": {\n            \"test_field\": \"test_value_of_field\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_global:ugc\",\n            \"facade\": false\n        }\n    }",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table17}}/{{document_id2}}?audit=comment:'adding+document'&consistency={{write_consistency_weak}}&tag=postman&debug=true",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table17}}",
																"{{document_id2}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'adding+document'"
																},
																{
																	"key": "consistency",
																	"value": "{{write_consistency_weak}}"
																},
																{
																	"key": "tag",
																	"value": "postman"
																},
																{
																	"key": "debug",
																	"value": "true"
																}
															]
														},
														"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
													},
													"response": []
												},
												{
													"name": "Purges a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.text()).to.include('{\"id\":');",
																	"});",
																	"",
																	"const purgeId = JSON.parse(responseBody);",
																	"postman.setEnvironmentVariable('purgeStatus', purgeId.id);",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table17}}/purge?audit=comment:'table purge'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table17}}",
																"purge"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table purge'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is purged"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table/purge?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table",
																		"purge"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Get Purge Status",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.text()).to.be.oneOf(['{\"status\":\"IN_PROGRESS\"}','{\"status\":\"COMPLETE\"}']);",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table17}}/purgestatus?id={{purgeStatus}}",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table17}}",
																"purgestatus"
															],
															"query": [
																{
																	"key": "id",
																	"value": "{{purgeStatus}}"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is purged"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table/purge?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table",
																		"purge"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table17}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table17}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											],
											"description": "Request with api-key and correct table, with audit parameter returns: id: \"%id of purge%\"",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "TC: Purge not existing table",
											"item": [
												{
													"name": "Purges a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.text()).to.include('{\"id\":\"');",
																	"});",
																	"",
																	"const purgeId = JSON.parse(responseBody);",
																	"postman.setEnvironmentVariable('purgeStatus', purgeId.id);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/not_existing_table/purge?audit=comment:'table_purge'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"not_existing_table",
																"purge"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_purge'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is purged"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table/purge?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table",
																		"purge"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Get Purge Status",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const retryRequest = () => {",
																	"    return new Promise((resolve, reject) => {",
																	"        pm.sendRequest({",
																	"            url: `${pm.environment.get(\"baseurl_dc1\")}/sor/1/_table/not_existing_table/purgestatus?id=${pm.environment.get(\"purgeStatus\")}`,",
																	"            method: 'POST',",
																	"            header: {",
																	"                \"X-BV-API-Key\": pm.environment.get(\"api_key\"),",
																	"            }",
																	"        }, (error, response) => {",
																	"            if (error) {",
																	"                reject(error);",
																	"            }",
																	"            resolve(response);",
																	"        });",
																	"    });",
																	"};",
																	"",
																	"var response = pm.response;",
																	"",
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string after some delay\", asyncTest(async function () {",
																	"    if (response.json().status !== \"ERROR\") {",
																	"        await waitUntil(setTimeout, clearTimeout, async () => {",
																	"            response = await retryRequest();",
																	"            return response.json().status === 'ERROR';",
																	"        });",
																	"        pm.expect(response.json().status === 'ERROR');",
																	"    }",
																	"}));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/not_existing_table/purgestatus?id={{purgeStatus}}",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"not_existing_table",
																"purgestatus"
															],
															"query": [
																{
																	"key": "id",
																	"value": "{{purgeStatus}}"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is purged"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table/purge?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table",
																		"purge"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											],
											"description": "Request with api-key which has sor|purge|{table}  and  table that doesn't exist, with audit parameter.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "Purges a table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"reason\":\"not authorized\"});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-BV-Api-Key",
														"value": "{{api_key_no_rights}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/:table/purge?audit=<string>",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														":table",
														"purge"
													],
													"query": [
														{
															"key": "audit",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "table",
															"value": "<string>",
															"description": "(Required) "
														}
													]
												},
												"description": "Returns a SuccessResponse if table is purged"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table/purge?audit=<string>",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table",
																"purge"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "Returns Purge Status POST /sor/1/_table/:table/purgestatus",
									"item": [
										{
											"name": "TC: Request without api-key ",
											"item": [
												{
													"name": "Get Purge Status",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {",
																	"    pm.response.to.have.status(403);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"reason\":\"not authorized\"});",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/not_existing_table/purgestatus",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"not_existing_table",
																"purgestatus"
															]
														},
														"description": "Returns a SuccessResponse if table is purged"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table/purge?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table",
																		"purge"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											],
											"description": "Request without api-key returns: \"reason\": \"not authorized\"",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "TC: Request table purge without purge id",
											"item": [
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table18', 'postman_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table18}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table18}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table18}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Returns Table options",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"const expectedResponseBody = '{\"placement\":\"ugc_global:ugc\",\"facades\":[]}';",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body(expectedResponseBody));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table18}}/options",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table18}}",
																"options"
															]
														},
														"description": "Returns a TableOptions object"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table/options",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table",
																		"options"
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"placement\": \"do\",\n \"facades\": [\n  {\n   \"placement\": \"cillum laborum ut\"\n  },\n  {\n   \"placement\": \"dolore dolor\"\n  }\n ]\n}"
														}
													]
												},
												{
													"name": "Get Purge Status",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 500\", function () {",
																	"    pm.response.to.have.status(500);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.text()).to.include('{\"message\":\"There was an error processing your request. It has been logged (ID ');",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table18}}/purgestatus?id=some_id",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table18}}",
																"purgestatus"
															],
															"query": [
																{
																	"key": "id",
																	"value": "some_id"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is purged"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table/purge?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table",
																		"purge"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Purges a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.text()).to.include('{\"id\":');",
																	"});",
																	"",
																	"const purgeId = JSON.parse(responseBody);",
																	"postman.setEnvironmentVariable('purgeStatus', purgeId.id);",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table18}}/purge?audit=comment:'table purge'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table18}}",
																"purge"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table purge'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is purged"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table/purge?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table",
																		"purge"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table18}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table18}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											],
											"description": "Request with api which has sor|purge|{table} for the table that exists without id query parameter returns: \"message\": \"There was an error processing your request. It has been logged (e.g. %ID 4134846f7b131e01%).\"",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "TC: Request table purge to get Different Statuses",
											"item": [
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table19', 'postman_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table19}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table19}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table19}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Returns Table options",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"const expectedResponseBody = '{\"placement\":\"ugc_global:ugc\",\"facades\":[]}';",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body(expectedResponseBody));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table19}}/options",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table19}}",
																"options"
															]
														},
														"description": "Returns a TableOptions object"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table/options",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table",
																		"options"
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"placement\": \"do\",\n \"facades\": [\n  {\n   \"placement\": \"cillum laborum ut\"\n  },\n  {\n   \"placement\": \"dolore dolor\"\n  }\n ]\n}"
														}
													]
												},
												{
													"name": "Purges a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.text()).to.include('{\"id\":');",
																	"});",
																	"",
																	"const purgeId = JSON.parse(responseBody);",
																	"postman.setEnvironmentVariable('purgeStatus', purgeId.id);",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table19}}/purge?audit=comment:'table purge'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table19}}",
																"purge"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table purge'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is purged"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table/purge?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table",
																		"purge"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Get Purge Status In_Progress => Complete",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const retryRequest = () => {",
																	"    return new Promise((resolve, reject) => {",
																	"        pm.sendRequest({",
																	"            url: `${pm.environment.get(\"baseurl_dc1\")}/sor/1/_table/${pm.environment.get(\"table19\")}/purgestatus?id=${pm.environment.get(\"purgeStatus\")}`,",
																	"            method: 'POST',",
																	"            header: {",
																	"                \"X-BV-API-Key\": pm.environment.get(\"api_key\"),",
																	"            }",
																	"        }, (error, response) => {",
																	"            if (error) {",
																	"                reject(error);",
																	"            }",
																	"            resolve(response);",
																	"        });",
																	"    });",
																	"};",
																	"var response = pm.response;",
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(response.json().status).to.be.oneOf(['IN_PROGRESS','COMPLETE']);",
																	"});",
																	"pm.test(\"Body matches string after some delay\", asyncTest(async function () {",
																	"    if (response.json().status !== \"COMPLETE\") {",
																	"        await waitUntil(setTimeout, clearTimeout, async () => {",
																	"            response = await retryRequest();",
																	"            return response.json().status === 'COMPLETE';",
																	"        });",
																	"        pm.expect(response.json().status === 'COMPLETE');",
																	"    }",
																	"}));"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table19}}/purgestatus?id={{purgeStatus}}",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table19}}",
																"purgestatus"
															],
															"query": [
																{
																	"key": "id",
																	"value": "{{purgeStatus}}"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is purged"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table/purge?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table",
																		"purge"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table19}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table19}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table19', 'postman_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table19}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table19}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table19}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table19}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table19}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Purges a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.text()).to.include('{\"id\":');",
																	"});",
																	"",
																	"const purgeId = JSON.parse(responseBody);",
																	"postman.setEnvironmentVariable('purgeStatus', purgeId.id);",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table19}}/purge?audit=comment:'table purge'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table19}}",
																"purge"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table purge'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is purged"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table/purge?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table",
																		"purge"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Get Purge Status Error",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const retryRequest = () => {",
																	"    return new Promise((resolve, reject) => {",
																	"        pm.sendRequest({",
																	"            url: `${pm.environment.get(\"baseurl_dc1\")}/sor/1/_table/${pm.environment.get(\"table19\")}/purgestatus?id=${pm.environment.get(\"purgeStatus\")}`,",
																	"            method: 'POST',",
																	"            header: {",
																	"                \"X-BV-API-Key\": pm.environment.get(\"api_key\"),",
																	"            }",
																	"        }, (error, response) => {",
																	"            if (error) {",
																	"                reject(error);",
																	"            }",
																	"            resolve(response);",
																	"        });",
																	"    });",
																	"};",
																	"",
																	"var response = pm.response;",
																	"",
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string after some delay\", asyncTest(async function () {",
																	"    if (response.json().status !== \"ERROR\") {",
																	"        await waitUntil(setTimeout, clearTimeout, async () => {",
																	"            response = await retryRequest();",
																	"            return response.json().status === 'ERROR';",
																	"        });",
																	"        pm.expect(response.json().status === 'ERROR');",
																	"    }",
																	"}));"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table19}}/purgestatus?id={{purgeStatus}}",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table19}}",
																"purgestatus"
															],
															"query": [
																{
																	"key": "id",
																	"value": "{{purgeStatus}}"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is purged"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table/purge?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table",
																		"purge"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											],
											"description": "Request with api which has sor|purge|{table} for the table that exists with id query parameter set to correct purge job returns: job status e.g.  \"status\": \"COMPLETE\" (Available job statuses to test: in progress, complete, error)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "get Purge Status",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"reason\":\"not authorized\"});",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-BV-Api-Key",
														"value": "{{api_key_no_rights}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/:table/purgestatus?id=<string>",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														":table",
														"purgestatus"
													],
													"query": [
														{
															"key": "id",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "table",
															"value": "<string>",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table/purgestatus?id=<string>",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table",
																"purgestatus"
															],
															"query": [
																{
																	"key": "id",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Returns Table Size GET /sor/1/_table/:table/size",
									"item": [
										{
											"name": "Request without api-key",
											"item": [
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table21', 'postman_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table21}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table21}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table21}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Returns Table Size",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {",
																	"    pm.response.to.have.status(403);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"reason\":\"not authorized\"});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key_no_rights}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table21}}/size?limit=10",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table21}}",
																"size"
															],
															"query": [
																{
																	"key": "limit",
																	"value": "10"
																}
															]
														},
														"description": "Returns a long"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table/size?limit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table",
																		"size"
																	],
																	"query": [
																		{
																			"key": "limit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "43857864"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table21}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table21}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											],
											"description": "Request without api-key returns: \"reason\": \"not authorized\""
										},
										{
											"name": "Request table size",
											"item": [
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table22', 'postman_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table22}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table22}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table22}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Returns Table Size",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('0'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table22}}/size?limit=10",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table22}}",
																"size"
															],
															"query": [
																{
																	"key": "limit",
																	"value": "10"
																}
															]
														},
														"description": "Returns a long"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table/size?limit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table",
																		"size"
																	],
																	"query": [
																		{
																			"key": "limit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "43857864"
														}
													]
												},
												{
													"name": "Creates/Updates content in datastore /sor/1/{table}/{key}",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('document_id1', 'document_id1_' + uuid.v4());",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n        \"name\": \"{{table22}}\",\n        \"id\": 1,\n        \"template\": {\n            \"test_field\": \"test_value_of_field\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_global:ugc\",\n            \"facade\": false\n        }\n    }",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table22}}/{{document_id1}}?audit=comment:'adding+document'&consistency={{write_consistency_weak}}&tag=postman&debug=true",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table22}}",
																"{{document_id1}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'adding+document'"
																},
																{
																	"key": "consistency",
																	"value": "{{write_consistency_weak}}"
																},
																{
																	"key": "tag",
																	"value": "postman"
																},
																{
																	"key": "debug",
																	"value": "true"
																}
															]
														},
														"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
													},
													"response": []
												},
												{
													"name": "Returns Table Size",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('1'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table22}}/size?limit=10",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table22}}",
																"size"
															],
															"query": [
																{
																	"key": "limit",
																	"value": "10"
																}
															]
														},
														"description": "Returns a long"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table/size?limit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table",
																		"size"
																	],
																	"query": [
																		{
																			"key": "limit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "43857864"
														}
													]
												},
												{
													"name": "Creates/Updates content in datastore /sor/1/{table}/{key}",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('document_id1', 'document_id1_' + uuid.v4());",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n        \"name\": \"{{table22}}\",\n        \"id\": 1,\n        \"template\": {\n            \"test_field\": \"test_value_of_field\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_global:ugc\",\n            \"facade\": false\n        }\n    }",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table22}}/{{document_id1}}?audit=comment:'adding+document'&consistency={{write_consistency_weak}}&tag=postman&debug=true",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table22}}",
																"{{document_id1}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'adding+document'"
																},
																{
																	"key": "consistency",
																	"value": "{{write_consistency_weak}}"
																},
																{
																	"key": "tag",
																	"value": "postman"
																},
																{
																	"key": "debug",
																	"value": "true"
																}
															]
														},
														"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
													},
													"response": []
												},
												{
													"name": "Creates/Updates content in datastore /sor/1/{table}/{key}",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('document_id1', 'document_id1_' + uuid.v4());",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n        \"name\": \"{{table22}}\",\n        \"id\": 1,\n        \"template\": {\n            \"test_field\": \"test_value_of_field\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_global:ugc\",\n            \"facade\": false\n        }\n    }",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table22}}/{{document_id1}}?audit=comment:'adding+document'&consistency={{write_consistency_weak}}&tag=postman&debug=true",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table22}}",
																"{{document_id1}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'adding+document'"
																},
																{
																	"key": "consistency",
																	"value": "{{write_consistency_weak}}"
																},
																{
																	"key": "tag",
																	"value": "postman"
																},
																{
																	"key": "debug",
																	"value": "true"
																}
															]
														},
														"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
													},
													"response": []
												},
												{
													"name": "Creates/Updates content in datastore /sor/1/{table}/{key}",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('document_id1', 'document_id1_' + uuid.v4());",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n        \"name\": \"{{table22}}\",\n        \"id\": 1,\n        \"template\": {\n            \"test_field\": \"test_value_of_field\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_global:ugc\",\n            \"facade\": false\n        }\n    }",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table22}}/{{document_id1}}?audit=comment:'adding+document'&consistency={{write_consistency_weak}}&tag=postman&debug=true",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table22}}",
																"{{document_id1}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'adding+document'"
																},
																{
																	"key": "consistency",
																	"value": "{{write_consistency_weak}}"
																},
																{
																	"key": "tag",
																	"value": "postman"
																},
																{
																	"key": "debug",
																	"value": "true"
																}
															]
														},
														"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
													},
													"response": []
												},
												{
													"name": "Creates/Updates content in datastore /sor/1/{table}/{key}",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('document_id1', 'document_id1_' + uuid.v4());",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n        \"name\": \"{{table22}}\",\n        \"id\": 1,\n        \"template\": {\n            \"test_field\": \"test_value_of_field\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_global:ugc\",\n            \"facade\": false\n        }\n    }",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table22}}/{{document_id1}}?audit=comment:'adding+document'&consistency={{write_consistency_weak}}&tag=postman&debug=true",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table22}}",
																"{{document_id1}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'adding+document'"
																},
																{
																	"key": "consistency",
																	"value": "{{write_consistency_weak}}"
																},
																{
																	"key": "tag",
																	"value": "postman"
																},
																{
																	"key": "debug",
																	"value": "true"
																}
															]
														},
														"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
													},
													"response": []
												},
												{
													"name": "Returns Table Size",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('5'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table22}}/size?limit=10",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table22}}",
																"size"
															],
															"query": [
																{
																	"key": "limit",
																	"value": "10"
																}
															]
														},
														"description": "Returns a long"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table/size?limit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table",
																		"size"
																	],
																	"query": [
																		{
																			"key": "limit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "43857864"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table22}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table22}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											],
											"description": "Request with api-key which has sor|read|{table} permission for the table that exists returns: number of documents in  the table",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "Request table size without limit parameter",
											"item": [
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table24', 'postman_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table24}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table24}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table24}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Creates/Updates content in datastore /sor/1/{table}/{key}",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('document_id3', 'document_id3_' + uuid.v4());",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n        \"name\": \"{{table24}}\",\n        \"id\": 1,\n        \"template\": {\n            \"test_field\": \"test_value_of_field\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_global:ugc\",\n            \"facade\": false\n        }\n    }",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table24}}/{{document_id3}}?audit=comment:'adding+document'&consistency={{write_consistency_weak}}&tag=postman&debug=true",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table24}}",
																"{{document_id3}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'adding+document'"
																},
																{
																	"key": "consistency",
																	"value": "{{write_consistency_weak}}"
																},
																{
																	"key": "tag",
																	"value": "postman"
																},
																{
																	"key": "debug",
																	"value": "true"
																}
															]
														},
														"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
													},
													"response": []
												},
												{
													"name": "Creates/Updates content in datastore /sor/1/{table}/{key}",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('document_id3', 'document_id3_' + uuid.v4());",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n        \"name\": \"{{table24}}\",\n        \"id\": 1,\n        \"template\": {\n            \"test_field\": \"test_value_of_field\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_global:ugc\",\n            \"facade\": false\n        }\n    }",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table24}}/{{document_id3}}?audit=comment:'adding+document'&consistency={{write_consistency_weak}}&tag=postman&debug=true",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table24}}",
																"{{document_id3}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'adding+document'"
																},
																{
																	"key": "consistency",
																	"value": "{{write_consistency_weak}}"
																},
																{
																	"key": "tag",
																	"value": "postman"
																},
																{
																	"key": "debug",
																	"value": "true"
																}
															]
														},
														"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
													},
													"response": []
												},
												{
													"name": "Creates/Updates content in datastore /sor/1/{table}/{key}",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('document_id3', 'document_id3_' + uuid.v4());",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n        \"name\": \"{{table24}}\",\n        \"id\": 1,\n        \"template\": {\n            \"test_field\": \"test_value_of_field\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_global:ugc\",\n            \"facade\": false\n        }\n    }",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table24}}/{{document_id3}}?audit=comment:'adding+document'&consistency={{write_consistency_weak}}&tag=postman&debug=true",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table24}}",
																"{{document_id3}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'adding+document'"
																},
																{
																	"key": "consistency",
																	"value": "{{write_consistency_weak}}"
																},
																{
																	"key": "tag",
																	"value": "postman"
																},
																{
																	"key": "debug",
																	"value": "true"
																}
															]
														},
														"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
													},
													"response": []
												},
												{
													"name": "Creates/Updates content in datastore /sor/1/{table}/{key}",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('document_id3', 'document_id3_' + uuid.v4());",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n        \"name\": \"{{table24}}\",\n        \"id\": 1,\n        \"template\": {\n            \"test_field\": \"test_value_of_field\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_global:ugc\",\n            \"facade\": false\n        }\n    }",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table24}}/{{document_id3}}?audit=comment:'adding+document'&consistency={{write_consistency_weak}}&tag=postman&debug=true",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table24}}",
																"{{document_id3}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'adding+document'"
																},
																{
																	"key": "consistency",
																	"value": "{{write_consistency_weak}}"
																},
																{
																	"key": "tag",
																	"value": "postman"
																},
																{
																	"key": "debug",
																	"value": "true"
																}
															]
														},
														"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
													},
													"response": []
												},
												{
													"name": "Creates/Updates content in datastore /sor/1/{table}/{key}",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('document_id3', 'document_id3_' + uuid.v4());",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n        \"name\": \"{{table24}}\",\n        \"id\": 1,\n        \"template\": {\n            \"test_field\": \"test_value_of_field\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_global:ugc\",\n            \"facade\": false\n        }\n    }",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table24}}/{{document_id3}}?audit=comment:'adding+document'&consistency={{write_consistency_weak}}&tag=postman&debug=true",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table24}}",
																"{{document_id3}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'adding+document'"
																},
																{
																	"key": "consistency",
																	"value": "{{write_consistency_weak}}"
																},
																{
																	"key": "tag",
																	"value": "postman"
																},
																{
																	"key": "debug",
																	"value": "true"
																}
															]
														},
														"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
													},
													"response": []
												},
												{
													"name": "Creates/Updates content in datastore /sor/1/{table}/{key}",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('document_id3', 'document_id3_' + uuid.v4());",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n        \"name\": \"{{table24}}\",\n        \"id\": 1,\n        \"template\": {\n            \"test_field\": \"test_value_of_field\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_global:ugc\",\n            \"facade\": false\n        }\n    }",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table24}}/{{document_id3}}?audit=comment:'adding+document'&consistency={{write_consistency_weak}}&tag=postman&debug=true",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table24}}",
																"{{document_id3}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'adding+document'"
																},
																{
																	"key": "consistency",
																	"value": "{{write_consistency_weak}}"
																},
																{
																	"key": "tag",
																	"value": "postman"
																},
																{
																	"key": "debug",
																	"value": "true"
																}
															]
														},
														"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
													},
													"response": []
												},
												{
													"name": "Returns Table Size",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('6'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table24}}/size",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table24}}",
																"size"
															]
														},
														"description": "Returns a long"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table/size?limit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table",
																		"size"
																	],
																	"query": [
																		{
																			"key": "limit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "43857864"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table24}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table24}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											],
											"description": "Request with api-key which has sor|read|{table} permission for the table that exists, limit value is set returns: number of documents in the table but no more then number in limit",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "Request table size for not existing table",
											"item": [
												{
													"name": "Returns Table Size",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 404\", function () {",
																	"    pm.response.to.have.status(404);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"message\":\"Unknown table: not_existing_table\",\"table\":\"not_existing_table\",\"suppressed\":[]}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/not_existing_table/size?limit=10",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"not_existing_table",
																"size"
															],
															"query": [
																{
																	"key": "limit",
																	"value": "10"
																}
															]
														},
														"description": "Returns a long"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table/size?limit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table",
																		"size"
																	],
																	"query": [
																		{
																			"key": "limit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "43857864"
														}
													]
												}
											],
											"description": "Request with api-key which has sor|read|{table} permission for the table that doesn't exist returns: \"message\": \"Unknown table: %table name%\",\n    \"table\": \"%table name%\",\n    \"suppressed\": []",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "Request table size with limit set to 0",
											"item": [
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table23', 'postman_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table23}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table23}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table23}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Returns Table Size",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('limit must be greater than 0'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table23}}/size?limit=0",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table23}}",
																"size"
															],
															"query": [
																{
																	"key": "limit",
																	"value": "0"
																}
															]
														},
														"description": "Returns a long"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table/size?limit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table",
																		"size"
																	],
																	"query": [
																		{
																			"key": "limit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "43857864"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table23}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table23}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											],
											"description": "Request with api-key which has sor|read|{table} permission for the table that exists when limit param is set to 0 returns: limit must be greater than 0",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "Returns Table Size",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"reason\":\"not authorized\"});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-BV-Api-Key",
														"value": "{{api_key_no_rights}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/:table/size?limit=<string>",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														":table",
														"size"
													],
													"query": [
														{
															"key": "limit",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "table",
															"value": "<string>",
															"description": "(Required) "
														}
													]
												},
												"description": "Returns a long"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table/size?limit=<string>",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table",
																"size"
															],
															"query": [
																{
																	"key": "limit",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "43857864"
												}
											]
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Sets table template PUT /sor/1/_table/:table/template",
									"item": [
										{
											"name": "TC: Request sets table template",
											"item": [
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table41', 'postman_'+uuid.v4());",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table41}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table41}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table41}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Returns Table metadata",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"const postman_table_name = pm.environment.get(\"table41\");",
																	"const expectedResponseBody = {",
																	"    \"name\":postman_table_name,",
																	"    \"options\":{",
																	"        \"placement\":\"ugc_global:ugc\",",
																	"        \"facades\":[]",
																	"    },",
																	"    \"template\":{",
																	"        \"test_table\":postman_table_name,",
																	"        \"customer\":\"postman\"",
																	"    },",
																	"    \"availability\":{",
																	"        \"placement\":\"ugc_global:ugc\",",
																	"        \"facade\":false  ",
																	"    }",
																	"}",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body(expectedResponseBody));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table41}}/metadata",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table41}}",
																"metadata"
															]
														},
														"description": "Returns a Table object"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table/metadata",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table",
																		"metadata"
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"options\": {\n  \"placement\": \"cupidatat dolor Excepteur\",\n  \"facades\": [\n   {\n    \"placement\": \"laboris magna s\"\n   },\n   {\n    \"placement\": \"minim deserunt\"\n   }\n  ]\n },\n \"template\": {},\n \"name\": \"eiusmod\",\n \"availability\": {\n  \"placement\": \"quis\",\n  \"facade\": false\n }\n}"
														}
													]
												},
												{
													"name": "Sets table template",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"table_name\": \"some_table\",\n    \"test_value\": \"some_table_filed\"\n}"
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table41}}/template?audit=comment:'set+template'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table41}}",
																"template"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'set+template'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table template is set"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "\"<object>\""
																},
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table/template?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table",
																		"template"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Returns Table metadata",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"const postman_table_name = pm.environment.get(\"table41\");",
																	"const expectedResponseBody = {",
																	"    \"name\":postman_table_name,",
																	"    \"options\":{",
																	"        \"placement\":\"ugc_global:ugc\",",
																	"        \"facades\":[]",
																	"    },",
																	"    \"template\":{",
																	"        \"table_name\":\"some_table\",",
																	"        \"test_value\":\"some_table_filed\"",
																	"    },",
																	"    \"availability\":{",
																	"        \"placement\":\"ugc_global:ugc\",",
																	"        \"facade\":false",
																	"    }",
																	"};",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql(expectedResponseBody);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table41}}/metadata",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table41}}",
																"metadata"
															]
														},
														"description": "Returns a Table object"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table/metadata",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table",
																		"metadata"
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"options\": {\n  \"placement\": \"cupidatat dolor Excepteur\",\n  \"facades\": [\n   {\n    \"placement\": \"laboris magna s\"\n   },\n   {\n    \"placement\": \"minim deserunt\"\n   }\n  ]\n },\n \"template\": {},\n \"name\": \"eiusmod\",\n \"availability\": {\n  \"placement\": \"quis\",\n  \"facade\": false\n }\n}"
														}
													]
												}
											],
											"description": "Request with correct api-key (has sor|set_table_attributes|{table} permissions) and with json body type, with populated audit param returns: \"\"success\": true\"",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "TC: Request without api key",
											"item": [
												{
													"name": "Sets table template",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {",
																	"    pm.response.to.have.status(403);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"reason\":\"not authorized\"});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key_no_rights}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \n}"
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/some_table/template?audit=comment:'set+template'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"some_table",
																"template"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'set+template'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table template is set"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "\"<object>\""
																},
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table/template?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table",
																		"template"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											],
											"description": "Request without api key returns: \"\"reason\": \"not authorized\"\""
										},
										{
											"name": "TC: Request table template without audit",
											"item": [
												{
													"name": "Sets table template",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('Missing required query parameter: audit'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/some_table/template",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"some_table",
																"template"
															]
														},
														"description": "Returns a SuccessResponse if table template is set"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "\"<object>\""
																},
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table/template?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table",
																		"template"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											],
											"description": "Request with correct api-key and with json body type and without audit returns: \"Missing required query parameter: audit\"",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "Sets table template",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-Api-Key",
														"value": "{{api_key_no_rights}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\"<object>\""
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/:table/template?audit=<string>",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														":table",
														"template"
													],
													"query": [
														{
															"key": "audit",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "table",
															"value": "<string>",
															"description": "(Required) "
														}
													]
												},
												"description": "Returns a SuccessResponse if table template is set"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "\"<object>\""
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table/template?audit=<string>",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table",
																"template"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "Returns all the existing tables GET /sor/1/_table",
									"item": [
										{
											"name": "TC: Request without api-key",
											"item": [
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table28', 'postman_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table28}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table28}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table28}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Returns all the existing tables",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {",
																	"    pm.response.to.have.status(403);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({ reason: 'not authorized' });",
																	"});",
																	"",
																	"pm.test(\"Response Content-Type is json\", function () {",
																	"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "not_existing_key",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table?limit=100",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table"
															],
															"query": [
																{
																	"key": "limit",
																	"value": "100"
																}
															]
														},
														"description": "Returns a Iterator of Table"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table?from=<string>&limit=10",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table"
																	],
																	"query": [
																		{
																			"key": "from",
																			"value": "<string>"
																		},
																		{
																			"key": "limit",
																			"value": "10"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"options\": {\n  \"placement\": \"cupidatat dolor Excepteur\",\n  \"facades\": [\n   {\n    \"placement\": \"laboris magna s\"\n   },\n   {\n    \"placement\": \"minim deserunt\"\n   }\n  ]\n },\n \"template\": {},\n \"name\": \"eiusmod\",\n \"availability\": {\n  \"placement\": \"quis\",\n  \"facade\": false\n }\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table28}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table28}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											],
											"description": "Request without api-key returns empty body response",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "TC: Request all tables when limit parameter is not defined",
											"item": [
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table29', 'postman_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table29}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table29}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table29}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table30', 'postman_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table30}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table30}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table30}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table31', 'postman_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table31}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table31}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table31}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table32', 'postman_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table32}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table32}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table32}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table33', 'postman_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table33}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table33}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table33}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table34', 'postman_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table34}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table34}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table34}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table35', 'postman_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table35}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table35}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table35}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table36', 'postman_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table36}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table36}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table36}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table37', 'postman_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table37}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table37}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table37}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table38', 'postman_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table38}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table38}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table38}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table39', 'postman_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table39}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table39}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table39}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Returns all the existing tables",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Your test name\", function () {",
																	"    var jsonData = pm.response.json();",
																	"    pm.expect(jsonData.length).to.be.greaterThan(10);",
																	"});",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table?limit=100",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table"
															],
															"query": [
																{
																	"key": "from",
																	"value": "{{table11}}",
																	"disabled": true
																},
																{
																	"key": "limit",
																	"value": "100"
																}
															]
														},
														"description": "Returns a Iterator of Table"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table?from=<string>&limit=10",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table"
																	],
																	"query": [
																		{
																			"key": "from",
																			"value": "<string>"
																		},
																		{
																			"key": "limit",
																			"value": "10"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"options\": {\n  \"placement\": \"cupidatat dolor Excepteur\",\n  \"facades\": [\n   {\n    \"placement\": \"laboris magna s\"\n   },\n   {\n    \"placement\": \"minim deserunt\"\n   }\n  ]\n },\n \"template\": {},\n \"name\": \"eiusmod\",\n \"availability\": {\n  \"placement\": \"quis\",\n  \"facade\": false\n }\n}"
														}
													]
												},
												{
													"name": "Returns all the existing tables",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Your test name\", function () {",
																	"    var jsonData = pm.response.json();",
																	"    pm.expect(jsonData.length).to.be.equal(10);",
																	"});",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table"
															],
															"query": [
																{
																	"key": "from",
																	"value": "{{table11}}",
																	"disabled": true
																},
																{
																	"key": "limit",
																	"value": "100",
																	"disabled": true
																}
															]
														},
														"description": "Returns a Iterator of Table"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table?from=<string>&limit=10",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table"
																	],
																	"query": [
																		{
																			"key": "from",
																			"value": "<string>"
																		},
																		{
																			"key": "limit",
																			"value": "10"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"options\": {\n  \"placement\": \"cupidatat dolor Excepteur\",\n  \"facades\": [\n   {\n    \"placement\": \"laboris magna s\"\n   },\n   {\n    \"placement\": \"minim deserunt\"\n   }\n  ]\n },\n \"template\": {},\n \"name\": \"eiusmod\",\n \"availability\": {\n  \"placement\": \"quis\",\n  \"facade\": false\n }\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table29}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table29}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table30}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table30}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table31}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table31}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table32}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table32}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table33}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table33}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table34}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table34}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table35}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table35}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table36}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table36}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table37}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table37}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table38}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table38}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table39}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table39}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											],
											"description": "Returns 10 tables (default value) where limit and from  parameter is not defined",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "TC: Request all tables when limit parameter is defined",
											"item": [
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table29', 'postman_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table29}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table29}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table29}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table30', 'postman_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table30}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table30}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table30}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table31', 'postman_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table31}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table31}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table31}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table32', 'postman_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table32}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table32}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table32}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table33', 'postman_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table33}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table33}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table33}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table34', 'postman_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table34}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table34}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table34}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table35', 'postman_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table35}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table35}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table35}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table36', 'postman_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table36}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table36}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table36}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table37', 'postman_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table37}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table37}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table37}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table38', 'postman_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table38}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table38}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table38}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table39', 'postman_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table39}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table39}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table39}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Returns all the existing tables",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Your test name\", function () {",
																	"    var jsonData = pm.response.json();",
																	"    pm.expect(jsonData.length).to.be.greaterThan(10);",
																	"});",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table?limit=100",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table"
															],
															"query": [
																{
																	"key": "limit",
																	"value": "100"
																}
															]
														},
														"description": "Returns a Iterator of Table"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table?from=<string>&limit=10",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table"
																	],
																	"query": [
																		{
																			"key": "from",
																			"value": "<string>"
																		},
																		{
																			"key": "limit",
																			"value": "10"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"options\": {\n  \"placement\": \"cupidatat dolor Excepteur\",\n  \"facades\": [\n   {\n    \"placement\": \"laboris magna s\"\n   },\n   {\n    \"placement\": \"minim deserunt\"\n   }\n  ]\n },\n \"template\": {},\n \"name\": \"eiusmod\",\n \"availability\": {\n  \"placement\": \"quis\",\n  \"facade\": false\n }\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table29}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table29}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table30}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table30}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table31}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table31}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table32}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table32}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table33}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table33}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table34}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table34}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table35}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table35}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table36}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table36}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table37}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table37}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table38}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table38}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table39}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table39}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											],
											"description": "Returns number of tables which is less or equel to number defined in Limit parameter",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "TC: Request all tables when limit and from parameters defined",
											"item": [
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table29', 'postman_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table29}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table29}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table29}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table30', 'postman_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table30}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table30}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table30}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table31', 'postman_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table31}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table31}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table31}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table32', 'postman_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table32}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table32}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table32}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table33', 'postman_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table33}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table33}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table33}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table34', 'postman_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table34}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table34}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table34}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table35', 'postman_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table35}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table35}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table35}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table36', 'postman_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table36}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table36}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table36}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table37', 'postman_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table37}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table37}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table37}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table38', 'postman_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table38}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table38}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table38}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table39', 'postman_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table39}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table39}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table39}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Returns all the existing tables without from",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Table name is in the returned result\", function () {",
																	"    pm.expect(Boolean(pm.response.json().find(tableAttributes => tableAttributes.name.includes('postman_')))).to.be.true;",
																	"});",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table?limit=10000",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table"
															],
															"query": [
																{
																	"key": "limit",
																	"value": "10000"
																}
															]
														},
														"description": "Returns a Iterator of Table"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table?from=<string>&limit=10",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table"
																	],
																	"query": [
																		{
																			"key": "from",
																			"value": "<string>"
																		},
																		{
																			"key": "limit",
																			"value": "10"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"options\": {\n  \"placement\": \"cupidatat dolor Excepteur\",\n  \"facades\": [\n   {\n    \"placement\": \"laboris magna s\"\n   },\n   {\n    \"placement\": \"minim deserunt\"\n   }\n  ]\n },\n \"template\": {},\n \"name\": \"eiusmod\",\n \"availability\": {\n  \"placement\": \"quis\",\n  \"facade\": false\n }\n}"
														}
													]
												},
												{
													"name": "Returns all the existing tables",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Table name is in the returned result\", function () {",
																	"    pm.expect(Boolean(pm.response.json().find(tableAttributes => tableAttributes.name.includes(pm.environment.get('table29'))))).to.be.false;",
																	"});",
																	"",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table?limit=100&from={{table29}}",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table"
															],
															"query": [
																{
																	"key": "limit",
																	"value": "100"
																},
																{
																	"key": "from",
																	"value": "{{table29}}"
																}
															]
														},
														"description": "Returns a Iterator of Table"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table?from=<string>&limit=10",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table"
																	],
																	"query": [
																		{
																			"key": "from",
																			"value": "<string>"
																		},
																		{
																			"key": "limit",
																			"value": "10"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"options\": {\n  \"placement\": \"cupidatat dolor Excepteur\",\n  \"facades\": [\n   {\n    \"placement\": \"laboris magna s\"\n   },\n   {\n    \"placement\": \"minim deserunt\"\n   }\n  ]\n },\n \"template\": {},\n \"name\": \"eiusmod\",\n \"availability\": {\n  \"placement\": \"quis\",\n  \"facade\": false\n }\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table29}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table29}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table30}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table30}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table31}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table31}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table32}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table32}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table33}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table33}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table34}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table34}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table35}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table35}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table36}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table36}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table37}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table37}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table38}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table38}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('{\"success\":true}'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table39}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table39}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											],
											"description": "Returns number of tables which is less or equel to number defined in Limit parameter",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "Returns all the existing tables",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.text()).to.include(JSON.parse('[]'));",
															"});",
															"",
															"pm.test(\"Response Content-Type is json\", function () {",
															"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table?limit=100",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table"
													],
													"query": [
														{
															"key": "limit",
															"value": "100"
														}
													]
												},
												"description": "Returns a Iterator of Table"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table?from=<string>&limit=10",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table"
															],
															"query": [
																{
																	"key": "from",
																	"value": "<string>"
																},
																{
																	"key": "limit",
																	"value": "10"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"options\": {\n  \"placement\": \"cupidatat dolor Excepteur\",\n  \"facades\": [\n   {\n    \"placement\": \"laboris magna s\"\n   },\n   {\n    \"placement\": \"minim deserunt\"\n   }\n  ]\n },\n \"template\": {},\n \"name\": \"eiusmod\",\n \"availability\": {\n  \"placement\": \"quis\",\n  \"facade\": false\n }\n}"
												}
											]
										}
									]
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": ":table test cases",
					"item": [
						{
							"name": "{key}",
							"item": [
								{
									"name": "Get current version of piece of data in sor GET /sor/1/{table}/{key}",
									"item": [
										{
											"name": "TC: Request without api-key",
											"item": [
												{
													"name": "Retrieves the current version of a piece of content from the data store",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {",
																	"    pm.response.to.have.status(403);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"reason\":\"not authorized\"});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key_no_rights}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/some_table/some_key?consistency=STRONG&debug=true",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"some_table",
																"some_key"
															],
															"query": [
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "debug",
																	"value": "true"
																}
															]
														},
														"description": "Retrieves the current version of a piece of content from the data store."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/:table/:key?consistency=STRONG&debug=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		":table",
																		":key"
																	],
																	"query": [
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														}
													]
												}
											]
										},
										{
											"name": "TC: Request to not existing table",
											"item": [
												{
													"name": "Retrieves the current version of a piece of content from the data store",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 404\", function () {",
																	"    pm.response.to.have.status(404);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"message\":\"Unknown table: some_table\",\"table\":\"some_table\",\"suppressed\":[]});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/some_table/:key?consistency=STRONG",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"some_table",
																":key"
															],
															"query": [
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "debug",
																	"value": "<string>",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "key",
																	"value": "<string>",
																	"description": "(Required) "
																}
															]
														},
														"description": "Retrieves the current version of a piece of content from the data store."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/:table/:key?consistency=STRONG&debug=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		":table",
																		":key"
																	],
																	"query": [
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														}
													]
												}
											]
										},
										{
											"name": "TC: Request by using not allowed table name",
											"item": [
												{
													"name": "Retrieves the current version of a piece of content from the data store",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.to.have.body('Table name must be a lowercase ASCII string between 1 and 255 characters in length. Allowed punctuation characters are -.:@_ and the table name may not start with a single underscore character. An example of a valid table name would be \\'review:testcustomer\\'.'));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/SOME_TABLE@/:key?consistency=STRONG",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"SOME_TABLE@",
																":key"
															],
															"query": [
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "debug",
																	"value": "<string>",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "key",
																	"value": ""
																}
															]
														},
														"description": "Retrieves the current version of a piece of content from the data store."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/:table/:key?consistency=STRONG&debug=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		":table",
																		":key"
																	],
																	"query": [
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														}
													]
												}
											]
										},
										{
											"name": "TC: Get current piece of data",
											"item": [
												{
													"name": "Creates table /sor/1/_table/{table}",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table', 'table_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": []
												},
												{
													"name": "Creates/Updates content in datastore /sor/1/{table}/{key}",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
																	"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
																	"    pm.expect(pm.response.json().success).to.eql(true);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('auditValue', 'comment:\\'auditValue+'",
																	" + pm.variables.replaceIn('{{$randomInt}}') + '\\'' );",
																	"postman.setEnvironmentVariable('document_id', 'document_id_' + uuid.v4());",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n        \"name\": \"{{table}}\",\n        \"id\": 1,\n        \"template\": {\n            \"test_field\": \"test_value_of_field\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_global:ugc\",\n            \"facade\": false\n        }\n    }",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?audit={{auditValue}}&consistency={{write_consistency_weak}}&tag=postman&debug=true",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table}}",
																"{{document_id}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "{{auditValue}}"
																},
																{
																	"key": "changeId",
																	"value": "{{changeId}}",
																	"disabled": true
																},
																{
																	"key": "consistency",
																	"value": "{{write_consistency_weak}}"
																},
																{
																	"key": "tag",
																	"value": "postman"
																},
																{
																	"key": "debug",
																	"value": "true"
																}
															]
														},
														"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
													},
													"response": []
												},
												{
													"name": "Creates/Updates content in datastore /sor/1/{table}/{key}",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
																	"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
																	"    pm.expect(pm.response.json().success).to.eql(true);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('auditValue', 'comment:\\'auditValue+'",
																	" + pm.variables.replaceIn('{{$randomInt}}') + '\\'' );",
																	"postman.setEnvironmentVariable('document_id1', 'document_id_' + uuid.v4());",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n        \"name\": \"{{table}}\",\n        \"id\": 1,\n        \"template\": {\n            \"test_field\": \"test_value_of_field\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_global:ugc\",\n            \"facade\": false\n        }\n    }",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id1}}?audit={{auditValue}}&consistency={{write_consistency_weak}}&tag=postman&debug=true",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table}}",
																"{{document_id1}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "{{auditValue}}"
																},
																{
																	"key": "changeId",
																	"value": "{{changeId}}",
																	"disabled": true
																},
																{
																	"key": "consistency",
																	"value": "{{write_consistency_weak}}"
																},
																{
																	"key": "tag",
																	"value": "postman"
																},
																{
																	"key": "debug",
																	"value": "true"
																}
															]
														},
														"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
													},
													"response": []
												},
												{
													"name": "Retrieves the current version of a piece of content from the data store",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"",
																	"var responsePropertiesMainActual = Object.keys(jsonData);",
																	"var responsePropertiesAvailabilityActual = Object.keys(jsonData.availability);",
																	"var responsePropertiesTemplateActual = Object.keys(jsonData.template);",
																	"",
																	"var responsePropertiesMainExpected = [\"availability\",\"id\",\"name\",\"template\",\"test_field\",\"~table\",\"~version\",\"~lastMutateAt\",\"~deleted\",\"~lastUpdateAt\",\"~id\",\"client\",\"~signature\",\"type\",\"~firstUpdateAt\"];",
																	"var responsePropertiesAvailabilityExpected = [\"facade\",\"placement\"];",
																	"var responsePropertiesTemplateExpected = [\"test_field\"];",
																	"",
																	"pm.test(\"Response fields\", function () {",
																	"    pm.expect(responsePropertiesMainActual).to.have.deep.members(responsePropertiesMainExpected);",
																	"    pm.expect(responsePropertiesAvailabilityExpected).to.have.deep.members(responsePropertiesAvailabilityExpected);",
																	"    pm.expect(responsePropertiesTemplateActual).to.have.deep.members(responsePropertiesTemplateExpected);",
																	"});",
																	"",
																	"delete jsonData[\"~lastMutateAt\"];",
																	"delete jsonData[\"~lastUpdateAt\"];",
																	"delete jsonData[\"~signature\"];",
																	"delete jsonData[\"~firstUpdateAt\"];",
																	"",
																	"const postman_table_name = pm.environment.get(\"table\");",
																	"const postman_document_id = pm.environment.get(\"document_id\");",
																	"",
																	"var responseValuesExpected = {",
																	"    \"availability\":{",
																	"        \"facade\":false,",
																	"        \"placement\":\"ugc_global:ugc\"},",
																	"        \"id\":1,",
																	"        \"name\":postman_table_name,",
																	"        \"template\":{",
																	"            \"test_field\":\"test_value_of_field\"",
																	"            },",
																	"            \"test_field\":\"postman\",",
																	"            \"~table\":postman_table_name,",
																	"            \"~version\":1,",
																	"            \"~deleted\":false,",
																	"            \"~id\":postman_document_id,",
																	"            \"client\":\"iuliia_customer\",",
																	"            \"type\":\"create_table_test\"",
																	"}",
																	"",
																	"",
																	"pm.test(\"Response values \", function () {",
																	"    pm.expect(jsonData).to.be.eql(responseValuesExpected);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?consistency=STRONG",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table}}",
																"{{document_id}}"
															],
															"query": [
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "debug",
																	"value": "<string>",
																	"disabled": true
																}
															]
														},
														"description": "Retrieves the current version of a piece of content from the data store."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/:table/:key?consistency=STRONG&debug=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		":table",
																		":key"
																	],
																	"query": [
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														}
													]
												},
												{
													"name": "Retrieves the current version of a piece of content from the data store",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"",
																	"var responsePropertiesMainActual = Object.keys(jsonData);",
																	"var responsePropertiesAvailabilityActual = Object.keys(jsonData.availability);",
																	"var responsePropertiesTemplateActual = Object.keys(jsonData.template);",
																	"",
																	"var responsePropertiesMainExpected = [\"availability\",\"id\",\"name\",\"template\",\"test_field\",\"~table\",\"~version\",\"~lastMutateAt\",\"~deleted\",\"~lastUpdateAt\",\"~id\",\"client\",\"~signature\",\"type\",\"~firstUpdateAt\"];",
																	"var responsePropertiesAvailabilityExpected = [\"facade\",\"placement\"];",
																	"var responsePropertiesTemplateExpected = [\"test_field\"];",
																	"",
																	"pm.test(\"Response fields\", function () {",
																	"    pm.expect(responsePropertiesMainActual).to.have.deep.members(responsePropertiesMainExpected);",
																	"    pm.expect(responsePropertiesAvailabilityExpected).to.have.deep.members(responsePropertiesAvailabilityExpected);",
																	"    pm.expect(responsePropertiesTemplateActual).to.have.deep.members(responsePropertiesTemplateExpected);",
																	"});",
																	"",
																	"delete jsonData[\"~lastMutateAt\"];",
																	"delete jsonData[\"~lastUpdateAt\"];",
																	"delete jsonData[\"~signature\"];",
																	"delete jsonData[\"~firstUpdateAt\"];",
																	"",
																	"const postman_table_name = pm.environment.get(\"table\");",
																	"const postman_document_id = pm.environment.get(\"document_id1\");",
																	"",
																	"var responseValuesExpected = {",
																	"    \"availability\":{",
																	"        \"facade\":false,",
																	"        \"placement\":\"ugc_global:ugc\"",
																	"    },",
																	"    \"id\":1,",
																	"    \"name\":postman_table_name,",
																	"    \"template\":{",
																	"        \"test_field\":\"test_value_of_field\"",
																	"    },",
																	"    \"test_field\":\"postman\",",
																	"    \"~table\":postman_table_name,",
																	"    \"~version\":1,",
																	"    \"~deleted\":false,",
																	"    \"~id\":postman_document_id,",
																	"    \"client\":\"iuliia_customer\",",
																	"    \"type\":\"create_table_test\"",
																	"}",
																	"",
																	"pm.test(\"Response values \", function () {",
																	"    pm.expect(jsonData).to.be.eql(responseValuesExpected);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id1}}?consistency=STRONG",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table}}",
																"{{document_id1}}"
															],
															"query": [
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "debug",
																	"value": "<string>",
																	"disabled": true
																}
															]
														},
														"description": "Retrieves the current version of a piece of content from the data store."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/:table/:key?consistency=STRONG&debug=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		":table",
																		":key"
																	],
																	"query": [
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														}
													]
												},
												{
													"name": "Delete content in datastore /sor/1/{table}/{key}",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n        \"name\": \"{{table_name_1}}\",\n        \"options\": {\n            \"placement\": \"ugc_eu:ugc\",\n            \"facades\": []\n        },\n        \"template\": {\n            \"test_field\": \"test_value_of_field\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_eu:ugc\",\n            \"facade\": false\n        }\n    }",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id1}}?audit={{auditValue}}",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table}}",
																"{{document_id1}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "{{auditValue}}"
																}
															]
														},
														"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
													},
													"response": []
												},
												{
													"name": "Retrieves the current version of a piece of content from the data store",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"",
																	"var responsePropertiesMainActual = Object.keys(jsonData);",
																	"var responsePropertiesAvailabilityActual = Object.keys(jsonData.availability);",
																	"var responsePropertiesTemplateActual = Object.keys(jsonData.template);",
																	"",
																	"var responsePropertiesMainExpected = [\"availability\",\"id\",\"name\",\"template\",\"test_field\",\"~table\",\"~version\",\"~lastMutateAt\",\"~deleted\",\"~lastUpdateAt\",\"~id\",\"client\",\"~signature\",\"type\",\"~firstUpdateAt\"];",
																	"var responsePropertiesAvailabilityExpected = [\"facade\",\"placement\"];",
																	"var responsePropertiesTemplateExpected = [\"test_field\"];",
																	"",
																	"pm.test(\"Response fields\", function () {",
																	"    pm.expect(responsePropertiesMainActual).to.have.deep.members(responsePropertiesMainExpected);",
																	"    pm.expect(responsePropertiesAvailabilityExpected).to.have.deep.members(responsePropertiesAvailabilityExpected);",
																	"    pm.expect(responsePropertiesTemplateActual).to.have.deep.members(responsePropertiesTemplateExpected);",
																	"});",
																	"",
																	"delete jsonData[\"~lastMutateAt\"];",
																	"delete jsonData[\"~lastUpdateAt\"];",
																	"delete jsonData[\"~signature\"];",
																	"delete jsonData[\"~firstUpdateAt\"];",
																	"",
																	"const postman_table_name = pm.environment.get(\"table\");",
																	"const postman_document_id = pm.environment.get(\"document_id\");",
																	"",
																	"var responseValuesExpected = {",
																	"    \"availability\":{",
																	"        \"facade\":false,",
																	"        \"placement\":\"ugc_global:ugc\"",
																	"    },",
																	"    \"id\":1,",
																	"    \"name\":postman_table_name,",
																	"    \"template\":{",
																	"        \"test_field\":\"test_value_of_field\"",
																	"    },",
																	"    \"test_field\":\"postman\",",
																	"    \"~table\":postman_table_name,",
																	"    \"~version\":1,",
																	"    \"~deleted\":false,",
																	"    \"~id\":postman_document_id,",
																	"    \"client\":\"iuliia_customer\",",
																	"    \"type\":\"create_table_test\"",
																	"    }",
																	"",
																	"pm.test(\"Response values \", function () {",
																	"    pm.expect(jsonData).to.be.eql(responseValuesExpected);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?consistency=STRONG",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table}}",
																"{{document_id}}"
															],
															"query": [
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "debug",
																	"value": "<string>",
																	"disabled": true
																}
															]
														},
														"description": "Retrieves the current version of a piece of content from the data store."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/:table/:key?consistency=STRONG&debug=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		":table",
																		":key"
																	],
																	"query": [
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														}
													]
												},
												{
													"name": "Retrieves the current version of a piece of content from the data store",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"",
																	"var responsePropertiesMainActual = Object.keys(jsonData);",
																	"",
																	"var responsePropertiesMainExpected = [\"client\",\"test_field\",\"type\",\"~id\",\"~table\",\"~version\",\"~signature\",\"~deleted\",\"~firstUpdateAt\",\"~lastUpdateAt\",\"~lastMutateAt\"];",
																	"",
																	"",
																	"pm.test(\"Response fields\", function () {",
																	"    pm.expect(responsePropertiesMainActual).to.have.deep.members(responsePropertiesMainExpected);",
																	"});",
																	"",
																	"delete jsonData[\"~lastMutateAt\"];",
																	"delete jsonData[\"~lastUpdateAt\"];",
																	"delete jsonData[\"~signature\"];",
																	"delete jsonData[\"~firstUpdateAt\"];",
																	"",
																	"const postman_table_name = pm.environment.get(\"table\");",
																	"const postman_document_id = pm.environment.get(\"document_id1\");",
																	"",
																	"var responseValuesExpected = {",
																	"        \"type\":\"create_table_test\",",
																	"        \"test_field\":\"postman\",",
																	"        \"client\":\"iuliia_customer\",",
																	"        \"~id\":postman_document_id,",
																	"        \"~table\":postman_table_name,",
																	"        \"~version\":2,",
																	"        \"~deleted\":true",
																	"    };",
																	"",
																	"pm.test(\"Response values \", function () {",
																	"    pm.expect(jsonData).to.be.eql(responseValuesExpected);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id1}}?consistency=STRONG",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table}}",
																"{{document_id1}}"
															],
															"query": [
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "debug",
																	"value": "<string>",
																	"disabled": true
																}
															]
														},
														"description": "Retrieves the current version of a piece of content from the data store."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/:table/:key?consistency=STRONG&debug=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		":table",
																		":key"
																	],
																	"query": [
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														}
													]
												},
												{
													"name": "Retrieves the current version of a piece of content from the data store",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"",
																	"var responsePropertiesMainActual = Object.keys(jsonData);",
																	"",
																	"var responsePropertiesMainExpected = [\"client\",\"test_field\",\"type\",\"~id\",\"~table\",\"~version\",\"~signature\",\"~deleted\",\"~firstUpdateAt\",\"~lastUpdateAt\",\"~lastMutateAt\"];",
																	"",
																	"",
																	"pm.test(\"Response fields\", function () {",
																	"    pm.expect(responsePropertiesMainActual).to.have.deep.members(responsePropertiesMainExpected);",
																	"});",
																	"",
																	"delete jsonData[\"~lastMutateAt\"];",
																	"delete jsonData[\"~lastUpdateAt\"];",
																	"delete jsonData[\"~signature\"];",
																	"delete jsonData[\"~firstUpdateAt\"];",
																	"",
																	"const postman_table_name = pm.environment.get(\"table\");",
																	"const postman_document_id = pm.environment.get(\"document_id1\");",
																	"",
																	"var responseValuesExpected = {",
																	"        \"type\":\"create_table_test\",",
																	"        \"test_field\":\"postman\",",
																	"        \"client\":\"iuliia_customer\",",
																	"        \"~id\":postman_document_id,",
																	"        \"~table\":postman_table_name,",
																	"        \"~version\":2,",
																	"        \"~deleted\":true",
																	"    }",
																	"",
																	"pm.test(\"Response values \", function () {",
																	"    pm.expect(jsonData).to.eql(responseValuesExpected);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id1}}?consistency=STRONG&includedDeletes=false",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table}}",
																"{{document_id1}}"
															],
															"query": [
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "debug",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "includedDeletes",
																	"value": "false"
																}
															]
														},
														"description": "Retrieves the current version of a piece of content from the data store."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/:table/:key?consistency=STRONG&debug=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		":table",
																		":key"
																	],
																	"query": [
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											],
											"description": "Request with api-key which has  sor|read|{table} permission to the table which exists returns: List of items in the table (deleted items are not included in the result)"
										},
										{
											"name": "TC: Get data by not existing document_id",
											"item": [
												{
													"name": "Creates table /sor/1/_table/{table}",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table', 'table_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": []
												},
												{
													"name": "Creates/Updates content in datastore /sor/1/{table}/{key}",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.have.keys(\"success\",\"debug\");",
																	"    pm.expect(pm.response.json().success).to.eql(true);",
																	"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('auditValue', 'comment:\\'auditValue+'",
																	" + pm.variables.replaceIn('{{$randomInt}}') + '\\'' );",
																	"postman.setEnvironmentVariable('document_id', 'document_id_' + uuid.v4());",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n        \"name\": \"{{table}}\",\n        \"id\": 1,\n        \"template\": {\n            \"test_field\": \"test_value_of_field\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_global:ugc\",\n            \"facade\": false\n        }\n    }",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?audit={{auditValue}}&consistency={{write_consistency_weak}}&tag=postman&debug=true",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table}}",
																"{{document_id}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "{{auditValue}}"
																},
																{
																	"key": "changeId",
																	"value": "{{changeId}}",
																	"disabled": true
																},
																{
																	"key": "consistency",
																	"value": "{{write_consistency_weak}}"
																},
																{
																	"key": "tag",
																	"value": "postman"
																},
																{
																	"key": "debug",
																	"value": "true"
																}
															]
														},
														"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
													},
													"response": []
												},
												{
													"name": "Retrieves the current version of a piece of content from the data store",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"",
																	"",
																	"var responsePropertiesMainExpected = [\"type\",\"test_field\",\"client\",\"~id\",\"~table\",\"~version\",\"~signature\",\"~deleted\"];",
																	"",
																	"pm.test(\"Response fields\", function () {",
																	"    pm.expect(jsonData).to.have.keys(responsePropertiesMainExpected);",
																	"});",
																	"",
																	"var postman_table_name = pm.environment.get(\"table\");",
																	"",
																	"var responseValuesExpected = {",
																	"    \"type\": \"create_table_test\",",
																	"    \"test_field\": \"postman\",",
																	"    \"client\": \"iuliia_customer\",",
																	"    \"~id\": \"not_exisiting_document\",",
																	"    \"~table\": postman_table_name,",
																	"    \"~version\": 0,",
																	"    \"~signature\": \"00000000000000000000000000000000\",",
																	"    \"~deleted\": true",
																	"};",
																	"",
																	"pm.test(\"Response values \", function () {",
																	"    pm.expect(jsonData).to.eql(responseValuesExpected);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table}}/not_exisiting_document?consistency=STRONG",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table}}",
																"not_exisiting_document"
															],
															"query": [
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "debug",
																	"value": "<string>",
																	"disabled": true
																}
															]
														},
														"description": "Retrieves the current version of a piece of content from the data store."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/:table/:key?consistency=STRONG&debug=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		":table",
																		":key"
																	],
																	"query": [
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											],
											"description": "Request with api-key which has  sor|read|{table} permission to the table which exists returns: List of items in the table (deleted items are not included in the result)"
										},
										{
											"name": "Retrieves the current version of a piece of content from the data store.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"reason\":\"not authorized\"});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-BV-Api-Key",
														"value": "{{api_key_no_rights}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/not_existing_table/:key?consistency=STRONG&debug=true",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"not_existing_table",
														":key"
													],
													"query": [
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "debug",
															"value": "true"
														}
													],
													"variable": [
														{
															"key": "key",
															"value": "<string>",
															"description": "(Required) "
														}
													]
												},
												"description": "Retrieves the current version of a piece of content from the data store."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?consistency=STRONG&debug=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "debug",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										}
									]
								},
								{
									"name": "Create/update/delete a piece of data in sor by applying a delta POST /sor/1/{table}/{key}",
									"item": [
										{
											"name": "TC: Request without api-key",
											"item": [
												{
													"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta.",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {",
																	"    pm.response.to.have.status(403);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"reason\":\"not authorized\"});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/x.json-delta"
															},
															{
																"key": "X-BV-Api-key",
																"value": "{{api_key_no_rights}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "\"<string>\""
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/not_existing_table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"not_existing_table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>"
																},
																{
																	"key": "audit",
																	"value": "<string>"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "debug",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "key",
																	"value": "<string>",
																	"description": "(Required) "
																}
															]
														},
														"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		":table",
																		":key"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "TC: Request to not existing table",
											"item": [
												{
													"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta.",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 404\", function () {",
																	"    pm.response.to.have.status(404);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"message\":\"Unknown table: some_table\",\"table\":\"some_table\",\"suppressed\":[]});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/x.json-delta"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \n}"
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/some_table/:key?audit=comment:'update+data'&consistency=STRONG&tag=<string>",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"some_table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "comment:'update+data'"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "debug",
																	"value": "<string>",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "key",
																	"value": "<string>",
																	"description": "(Required) "
																}
															]
														},
														"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		":table",
																		":key"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "TC: Request to create, update, delete a piece of data",
											"item": [
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table', 'postman_'+uuid.v4());",
																	"",
																	"postman.setEnvironmentVariable('document_id', 'document_id_' + uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Retrieves the current version of a piece of content from the data store Copy",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"",
																	"var responsePropertiesMainActual = Object.keys(jsonData);",
																	"var responsePropertiesMainExpected = [\"test_table\",\"customer\",\"~id\",\"~table\",\"~version\",\"~signature\",\"~deleted\"];",
																	"",
																	"",
																	"pm.test(\"Response fields\", function () {",
																	"    pm.expect(responsePropertiesMainActual).to.have.deep.members(responsePropertiesMainExpected);",
																	"});",
																	"",
																	"delete jsonData[\"~signature\"];",
																	"",
																	"const postman_table_name = pm.environment.get(\"table\");",
																	"const postman_document_id = pm.environment.get(\"document_id\");",
																	"",
																	"var responseValuesExpected = {",
																	"        \"test_table\":postman_table_name,",
																	"        \"customer\":\"postman\",",
																	"        \"~id\":postman_document_id,",
																	"        \"~table\":postman_table_name,",
																	"        \"~version\":0,",
																	"        \"~deleted\":true",
																	"    }",
																	"",
																	"pm.test(\"Response values \", function () {",
																	"    pm.expect(jsonData).to.eql(responseValuesExpected);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?consistency=STRONG&includedDeletes=false",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table}}",
																"{{document_id}}"
															],
															"query": [
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "debug",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "includedDeletes",
																	"value": "false"
																}
															]
														},
														"description": "Retrieves the current version of a piece of content from the data store."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/:table/:key?consistency=STRONG&debug=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		":table",
																		":key"
																	],
																	"query": [
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														}
													]
												},
												{
													"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/x.json-delta"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{..,\"status\":\"CREATED\"}"
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?audit=comment:'update+data'&consistency=STRONG&tag=<string>&tag=<string>&=",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table}}",
																"{{document_id}}"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "comment:'update+data'"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "debug",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "",
																	"value": ""
																}
															]
														},
														"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		":table",
																		":key"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Retrieves the current version of a piece of content from the data store",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"",
																	"var responsePropertiesMainActual = Object.keys(jsonData);",
																	"var responsePropertiesMainExpected = [\"status\",\"customer\",\"test_table\",\"~id\",\"~table\",\"~version\",\"~signature\",\"~deleted\",\"~firstUpdateAt\",\"~lastUpdateAt\",\"~lastMutateAt\"];",
																	"",
																	"pm.test(\"Response fields\", function () {",
																	"    pm.expect(responsePropertiesMainActual).to.have.deep.members(responsePropertiesMainExpected);",
																	"});",
																	"",
																	"delete jsonData[\"~signature\"];",
																	"delete jsonData[\"~firstUpdateAt\"];",
																	"delete jsonData[\"~lastUpdateAt\"];",
																	"delete jsonData[\"~lastMutateAt\"];",
																	"",
																	"const postman_table_name = pm.environment.get(\"table\");",
																	"const postman_document_id = pm.environment.get(\"document_id\");",
																	"",
																	"var responseValuesExpected = {",
																	"    \"status\":\"CREATED\",",
																	"    \"test_table\":postman_table_name,",
																	"    \"customer\":\"postman\",",
																	"    \"~id\":postman_document_id,",
																	"    \"~table\":postman_table_name,",
																	"    \"~version\":1,",
																	"    \"~deleted\":false",
																	"}",
																	"",
																	"pm.test(\"Response values \", function () {",
																	"    pm.expect(jsonData).to.eql(responseValuesExpected);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?consistency=STRONG&includedDeletes=false",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table}}",
																"{{document_id}}"
															],
															"query": [
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "debug",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "includedDeletes",
																	"value": "false"
																}
															]
														},
														"description": "Retrieves the current version of a piece of content from the data store."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/:table/:key?consistency=STRONG&debug=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		":table",
																		":key"
																	],
																	"query": [
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														}
													]
												},
												{
													"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/x.json-delta"
															},
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{..,\"status\":\"UPDATED\"}"
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?audit=comment:'update+data'&consistency=STRONG&tag=<string>&tag=<string>&=",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table}}",
																"{{document_id}}"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "comment:'update+data'"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "debug",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "",
																	"value": ""
																}
															]
														},
														"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		":table",
																		":key"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Retrieves the current version of a piece of content from the data store Copy 2",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"",
																	"var responsePropertiesMainActual = Object.keys(jsonData);",
																	"var responsePropertiesMainExpected = [\"status\",\"customer\",\"test_table\",\"~id\",\"~table\",\"~version\",\"~signature\",\"~deleted\",\"~firstUpdateAt\",\"~lastUpdateAt\",\"~lastMutateAt\"];",
																	"",
																	"pm.test(\"Response fields\", function () {",
																	"    pm.expect(responsePropertiesMainActual).to.have.deep.members(responsePropertiesMainExpected);",
																	"});",
																	"",
																	"delete jsonData[\"~signature\"];",
																	"delete jsonData[\"~firstUpdateAt\"];",
																	"delete jsonData[\"~lastUpdateAt\"];",
																	"delete jsonData[\"~lastMutateAt\"];",
																	"",
																	"const postman_table_name = pm.environment.get(\"table\");",
																	"const postman_document_id = pm.environment.get(\"document_id\");",
																	"",
																	"var responseValuesExpected = {",
																	"    \"status\":\"UPDATED\",",
																	"    \"test_table\":postman_table_name,",
																	"    \"customer\":\"postman\",",
																	"    \"~id\":postman_document_id,",
																	"    \"~table\":postman_table_name,",
																	"    \"~version\":2,",
																	"    \"~deleted\":false",
																	"}",
																	"",
																	"pm.test(\"Response values \", function () {",
																	"    pm.expect(jsonData).to.eql(responseValuesExpected);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?consistency=STRONG&includedDeletes=false",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table}}",
																"{{document_id}}"
															],
															"query": [
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "debug",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "includedDeletes",
																	"value": "false"
																}
															]
														},
														"description": "Retrieves the current version of a piece of content from the data store."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/:table/:key?consistency=STRONG&debug=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		":table",
																		":key"
																	],
																	"query": [
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														}
													]
												},
												{
													"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta Copy",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/x.json-delta"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "~"
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?audit=comment:'update+data'&consistency=STRONG&tag=<string>&tag=<string>&=",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table}}",
																"{{document_id}}"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "comment:'update+data'"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "debug",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "",
																	"value": ""
																}
															]
														},
														"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		":table",
																		":key"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Retrieves the current version of a piece of content from the data store",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"var responsePropertiesMainActual = Object.keys(jsonData);",
																	"",
																	"var responsePropertiesMainExpected = [\"customer\",\"test_table\",\"~id\",\"~table\",\"~version\",\"~signature\",\"~deleted\",\"~firstUpdateAt\",\"~lastUpdateAt\",\"~lastMutateAt\"];",
																	"",
																	"pm.test(\"Response fields\", function () {",
																	"    pm.expect(responsePropertiesMainActual).to.have.deep.members(responsePropertiesMainExpected);",
																	"});",
																	"",
																	"delete jsonData[\"~lastMutateAt\"];",
																	"delete jsonData[\"~lastUpdateAt\"];",
																	"delete jsonData[\"~signature\"];",
																	"delete jsonData[\"~firstUpdateAt\"];",
																	"",
																	"const postman_table_name = pm.environment.get(\"table\");",
																	"const postman_document_id = pm.environment.get(\"document_id\");",
																	"",
																	"var responseValuesExpected = {",
																	"    \"test_table\":postman_table_name,",
																	"    \"customer\":\"postman\",",
																	"    \"~id\":postman_document_id,",
																	"    \"~table\":postman_table_name,",
																	"    \"~version\":3,",
																	"    \"~deleted\":true",
																	"}",
																	"",
																	"pm.test(\"Response values \", function () {",
																	"    pm.expect(jsonData).to.eql(responseValuesExpected);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?consistency=STRONG&includedDeletes=false",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table}}",
																"{{document_id}}"
															],
															"query": [
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "debug",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "includedDeletes",
																	"value": "false"
																}
															]
														},
														"description": "Retrieves the current version of a piece of content from the data store."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/:table/:key?consistency=STRONG&debug=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		":table",
																		":key"
																	],
																	"query": [
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "TC: Request with empty request body",
											"item": [
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table', 'postman_'+uuid.v4());",
																	"",
																	"postman.setEnvironmentVariable('document_id', 'document_id_' + uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta.",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.text()).to.eql('Missing required JSON delta request entity.');",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/x.json-delta"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table}}/some_document?audit=comment:'update+data'&consistency=STRONG&tag=<string>&debug=true",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table}}",
																"some_document"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "comment:'update+data'"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "debug",
																	"value": "true"
																}
															]
														},
														"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		":table",
																		":key"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "TC: Request with debug set to true, consistency to Global",
											"item": [
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table', 'postman_'+uuid.v4());",
																	"",
																	"postman.setEnvironmentVariable('document_id', 'document_id_' + uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta.",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
																	"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
																	"    pm.expect(pm.response.json().success).to.eql(true);",
																	"",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/x.json-delta"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{..,\"test_delta\":\"set\"}"
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?audit=comment:'update+data'&consistency=GLOBAL&tag=test_tag&debug=true",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table}}",
																"{{document_id}}"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "comment:'update+data'"
																},
																{
																	"key": "consistency",
																	"value": "GLOBAL"
																},
																{
																	"key": "tag",
																	"value": "test_tag"
																},
																{
																	"key": "debug",
																	"value": "true"
																}
															]
														},
														"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		":table",
																		":key"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Retrieves the current version of a piece of content from the data store",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"",
																	"var responsePropertiesMainExpected = [\"test_delta\",\"test_table\",\"customer\",\"~id\",\"~table\",\"~version\",\"~signature\",\"~deleted\",\"~firstUpdateAt\",\"~lastUpdateAt\",\"~lastMutateAt\"];",
																	"",
																	"pm.test(\"Response fields\", function () {",
																	"    pm.expect(jsonData).to.have.keys(responsePropertiesMainExpected);",
																	"});",
																	"",
																	"var postman_table_name = pm.environment.get(\"table\");",
																	"var postman_document_id = pm.environment.get(\"document_id\");",
																	"",
																	"var responseValuesExpected = {",
																	"    \"~table\": postman_table_name,",
																	"    \"~version\": 1,",
																	"    \"test_delta\": \"set\",",
																	"    \"~deleted\": false,",
																	"    \"~id\": postman_document_id,",
																	"    \"test_table\": postman_table_name,",
																	"    \"customer\": \"postman\"",
																	"};",
																	"",
																	"delete jsonData[\"~lastMutateAt\"];",
																	"delete jsonData[\"~lastUpdateAt\"];",
																	"delete jsonData[\"~firstUpdateAt\"];",
																	"delete jsonData[\"~signature\"];",
																	"",
																	"pm.test(\"Response values \", function () {",
																	"    pm.expect(jsonData.test_delta).to.eql(\"set\");",
																	"    pm.expect(jsonData[\"~table\"]).to.eql(postman_table_name);",
																	"    pm.expect(jsonData[\"~version\"]).to.eql(1);",
																	"    pm.expect(jsonData[\"~deleted\"]).to.eql(false);",
																	"    pm.expect(jsonData[\"~id\"]).to.eql(postman_document_id);",
																	"    pm.expect(jsonData.test_table).to.eql(postman_table_name);",
																	"    pm.expect(jsonData.customer).to.eql(\"postman\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?consistency=STRONG&includedDeletes=false",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table}}",
																"{{document_id}}"
															],
															"query": [
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "debug",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "includedDeletes",
																	"value": "false"
																}
															]
														},
														"description": "Retrieves the current version of a piece of content from the data store."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/:table/:key?consistency=STRONG&debug=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		":table",
																		":key"
																	],
																	"query": [
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "TC: Request with debug set to false, consistency to Non Durable",
											"item": [
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table', 'postman_'+uuid.v4());",
																	"",
																	"postman.setEnvironmentVariable('document_id', 'document_id_' + uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta.",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.have.keys(\"success\");",
																	"    pm.expect(pm.response.json().success).to.eql(true);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/x.json-delta"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{..,\"test_delta\":\"set\"}"
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table}}/some_document?audit=comment:'update+data'&consistency=NON_DURABLE&tag=postman&debug=false",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table}}",
																"some_document"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "comment:'update+data'"
																},
																{
																	"key": "consistency",
																	"value": "NON_DURABLE"
																},
																{
																	"key": "tag",
																	"value": "postman"
																},
																{
																	"key": "debug",
																	"value": "false"
																}
															]
														},
														"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		":table",
																		":key"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Retrieves the current version of a piece of content from the data store",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"",
																	"var responsePropertiesMainExpected = [\"test_table\",\"customer\",\"~id\",\"~table\",\"~version\",\"~signature\",\"~deleted\"];",
																	"",
																	"",
																	"pm.test(\"Response fields\", function () {",
																	"    pm.expect(pm.response.json()).to.have.keys(responsePropertiesMainExpected);",
																	"});",
																	"",
																	"var postman_table_name = pm.environment.get(\"table\");",
																	"var postman_document_id = pm.environment.get(\"document_id\");",
																	"var responseValuesExpected = {",
																	"    \"test_table\": postman_table_name,",
																	"    \"customer\": \"postman\",",
																	"    \"~id\": postman_document_id,",
																	"    \"~table\": postman_table_name,",
																	"    \"~version\": 0,",
																	"    \"~signature\": \"00000000000000000000000000000000\",",
																	"    \"~deleted\": true",
																	"}",
																	"",
																	"pm.test(\"Response values \", function () {",
																	"    pm.expect(jsonData).to.eql(responseValuesExpected);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?consistency=STRONG&includedDeletes=false",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table}}",
																"{{document_id}}"
															],
															"query": [
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "debug",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "includedDeletes",
																	"value": "false"
																}
															]
														},
														"description": "Retrieves the current version of a piece of content from the data store."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/:table/:key?consistency=STRONG&debug=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		":table",
																		":key"
																	],
																	"query": [
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.have.keys(\"success\");",
																	"    pm.expect(pm.response.json().success).to.eql(true);",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"reason\":\"not authorized\"});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-delta"
													},
													{
														"key": "X-BV-Api-Key",
														"value": "{{api_key_no_rights}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\"<string>\""
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/not_existing_table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"not_existing_table",
														":key"
													],
													"query": [
														{
															"key": "changeId",
															"value": "<string>"
														},
														{
															"key": "audit",
															"value": "<string>"
														},
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "tag",
															"value": "<string>"
														},
														{
															"key": "tag",
															"value": "<string>"
														},
														{
															"key": "debug",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "key",
															"value": "<string>",
															"description": "(Required) "
														}
													]
												},
												"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>"
																},
																{
																	"key": "audit",
																	"value": "<string>"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "debug",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Create/replace a piece of data in the data store PUT /sor/1/{table}/{key}",
									"item": [
										{
											"name": "TC: Request without api-key",
											"item": [
												{
													"name": "Creates or replaces a piece of content in the data store",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('uuid', uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {",
																	"    pm.response.to.have.status(403);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"reason\":\"not authorized\"});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key_no_rights}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/not_existing_table/not_existing_key?consistency=STRONG",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"not_existing_table",
																"not_existing_key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "debug",
																	"value": "<string>",
																	"disabled": true
																}
															]
														},
														"description": "Creates or replaces a piece of content in the data store.  Overwrites the old\n version of the content, if it exists.  Expects a literal JSON representation\n of the object."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		":table",
																		":key"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "TC: Request to not existing table",
											"item": [
												{
													"name": "Creates or replaces a piece of content in the data store.",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 404\", function () {",
																	"    pm.response.to.have.status(404);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"message\":\"Unknown table: some_table\",\"table\":\"some_table\",\"suppressed\":[]});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/some_table/some_key?audit=comment:'create+/+replace+piece+of+data'&consistency=STRONG&tag=<string>&debug=true",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"some_table",
																"some_key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "comment:'create+/+replace+piece+of+data'"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "debug",
																	"value": "true"
																}
															]
														},
														"description": "Creates or replaces a piece of content in the data store.  Overwrites the old\n version of the content, if it exists.  Expects a literal JSON representation\n of the object."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		":table",
																		":key"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "TC: Request without audit param",
											"item": [
												{
													"name": "Creates or replaces a piece of content in the data store.",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.text()).to.eql('Missing required query parameter: audit');",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/some_table/some_key?consistency=STRONG&tag=<string>&debug=true",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"some_table",
																"some_key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "debug",
																	"value": "true"
																}
															]
														},
														"description": "Creates or replaces a piece of content in the data store.  Overwrites the old\n version of the content, if it exists.  Expects a literal JSON representation\n of the object."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		":table",
																		":key"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "TC: Request to create/replace piece of data",
											"item": [
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table', 'postman_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Creates or replaces a piece of content in the data store.",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('key', uuid.v4());",
																	"postman.setEnvironmentVariable('document_id', 'document_id_' + uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?audit=comment:'create+piece+of+data'&consistency=STRONG",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table}}",
																"{{document_id}}"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "comment:'create+piece+of+data'"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "debug",
																	"value": "<string>",
																	"disabled": true
																}
															]
														},
														"description": "Creates or replaces a piece of content in the data store.  Overwrites the old\n version of the content, if it exists.  Expects a literal JSON representation\n of the object."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		":table",
																		":key"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Retrieves the current version of a piece of content from the data store",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"",
																	"var responsePropertiesMainExpected = [\"author\",\"rating\",\"title\",\"~table\",\"~version\",\"~lastMutateAt\",\"~deleted\",\"~lastUpdateAt\",\"~id\",\"~signature\",\"test_table\",\"customer\",\"~firstUpdateAt\"];",
																	"",
																	"pm.test(\"Response fields\", function () {",
																	"    pm.expect(jsonData).to.have.keys(responsePropertiesMainExpected);",
																	"});",
																	"",
																	"var postman_table_name = pm.environment.get(\"table\");",
																	"var postman_document_id = pm.environment.get(\"document_id\");",
																	"",
																	"pm.test(\"Response values \", function () {",
																	"    pm.expect(jsonData.author).to.eql(\"Bob\");",
																	"    pm.expect(jsonData.rating).to.eql(5);",
																	"    pm.expect(jsonData.title).to.eql(\"Best Ever!\");",
																	"    pm.expect(jsonData[\"~deleted\"]).to.eql(false);",
																	"    pm.expect(jsonData[\"~id\"]).to.eql(postman_document_id);",
																	"    pm.expect(jsonData[\"~table\"]).to.eql(postman_table_name);",
																	"    pm.expect(jsonData[\"~version\"]).to.eql(1);",
																	"    pm.expect(jsonData.test_table).to.eql(postman_table_name);",
																	"    pm.expect(jsonData.customer).to.eql(\"postman\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?consistency=STRONG&includedDeletes=false",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table}}",
																"{{document_id}}"
															],
															"query": [
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "debug",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "includedDeletes",
																	"value": "false"
																}
															]
														},
														"description": "Retrieves the current version of a piece of content from the data store."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/:table/:key?consistency=STRONG&debug=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		":table",
																		":key"
																	],
																	"query": [
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "Creates or replaces a piece of content in the data store.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"postman.setEnvironmentVariable('uuid', uuid.v4());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"reason\":\"not authorized\"});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key_no_rights}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/not_existing_table/:key?consistency=STRONG",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"not_existing_table",
														":key"
													],
													"query": [
														{
															"key": "changeId",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "tag",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "debug",
															"value": "<string>",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "key",
															"value": "<string>",
															"description": "(Required) "
														}
													]
												},
												"description": "Creates or replaces a piece of content in the data store.  Overwrites the old\n version of the content, if it exists.  Expects a literal JSON representation\n of the object."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>"
																},
																{
																	"key": "audit",
																	"value": "<string>"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "debug",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "Delete a piece of content from sor DELETE /sor/1/{table}/{key}",
									"item": [
										{
											"name": "TC: Request without api-key",
											"item": [
												{
													"name": "Deletes a piece of content from the data store.",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {",
																	"    pm.response.to.have.status(403);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"reason\":\"not authorized\"});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key_no_rights}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"id\": \"<string>\",\n    \"authenticationId\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/not_existing_table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&debug=<string>",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"not_existing_table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>"
																},
																{
																	"key": "audit",
																	"value": "<string>"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "debug",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "key",
																	"value": "<string>",
																	"description": "(Required) "
																}
															]
														},
														"description": "Deletes a piece of content from the data store."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		":table",
																		":key"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "TC: Request without api-key",
											"item": [
												{
													"name": "Deletes a piece of content from the data store. Copy",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.text()).to.eql('Missing required query parameter: audit');",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"id\": \"some_id\",\n    \"authenticationId\": \"some_auth_id\"\n}"
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/:table/:key?consistency=STRONG&tag=<string>",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "debug",
																	"value": "<string>",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "table",
																	"value": "<string>",
																	"description": "(Required) "
																},
																{
																	"key": "key",
																	"value": "<string>",
																	"description": "(Required) "
																}
															]
														},
														"description": "Deletes a piece of content from the data store."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		":table",
																		":key"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "TC: Request to not existing table",
											"item": [
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table', 'postman_'+uuid.v4());",
																	"",
																	"postman.setEnvironmentVariable('document_id', 'document_id_' + uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Creates or replaces a piece of content in the data store.",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('key', uuid.v4());",
																	"postman.setEnvironmentVariable('document_id', 'document_id_' + uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?audit=comment:'create+piece+of+data'&consistency=STRONG",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table}}",
																"{{document_id}}"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "comment:'create+piece+of+data'"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "debug",
																	"value": "<string>",
																	"disabled": true
																}
															]
														},
														"description": "Creates or replaces a piece of content in the data store.  Overwrites the old\n version of the content, if it exists.  Expects a literal JSON representation\n of the object."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		":table",
																		":key"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Deletes a piece of content from the data store.",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 404\", function () {",
																	"    pm.response.to.have.status(404);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"message\":\"Unknown table: some_table\",\"table\":\"some_table\",\"suppressed\":[]});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\n}"
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/some_table/{{document_id}}?audit=comment:'remove+document'&consistency=STRONG&tag=deletion",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"some_table",
																"{{document_id}}"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "comment:'remove+document'"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "deletion"
																},
																{
																	"key": "debug",
																	"value": "<string>",
																	"disabled": true
																}
															]
														},
														"description": "Deletes a piece of content from the data store."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		":table",
																		":key"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "TC: Request to remove table",
											"item": [
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table', 'postman_'+uuid.v4());",
																	"",
																	"postman.setEnvironmentVariable('document_id', 'document_id_' + uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Creates or replaces a piece of content in the data store.",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('key', uuid.v4());",
																	"postman.setEnvironmentVariable('document_id', 'document_id_' + uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?audit=comment:'create+piece+of+data'&consistency=STRONG",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table}}",
																"{{document_id}}"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "comment:'create+piece+of+data'"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "debug",
																	"value": "<string>",
																	"disabled": true
																}
															]
														},
														"description": "Creates or replaces a piece of content in the data store.  Overwrites the old\n version of the content, if it exists.  Expects a literal JSON representation\n of the object."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		":table",
																		":key"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Retrieves the current version of a piece of content from the data store",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"",
																	"var responsePropertiesMainExpected = [\"author\",\"rating\",\"title\",\"~table\",\"~version\",\"~lastMutateAt\",\"~deleted\",\"~lastUpdateAt\",\"~id\",\"~signature\",\"test_table\",\"customer\",\"~firstUpdateAt\"];",
																	"",
																	"pm.test(\"Response fields\", function () {",
																	"    pm.expect(jsonData).to.have.keys(responsePropertiesMainExpected);",
																	"});",
																	"",
																	"var postman_table_name = pm.environment.get(\"table\");",
																	"var postman_document_id = pm.environment.get(\"document_id\");",
																	"",
																	"delete jsonData[\"~lastMutateAt\"];",
																	"delete jsonData[\"~lastUpdateAt\"];",
																	"delete jsonData[\"~signature\"];",
																	"delete jsonData[\"~firstUpdateAt\"];",
																	"",
																	"",
																	"var responseValuesExpected =  {",
																	"    \"author\": \"Bob\",",
																	"    \"rating\": 5,",
																	"    \"title\": \"Best Ever!\",",
																	"    \"~table\": postman_table_name,",
																	"    \"~version\": 1,",
																	"    \"~deleted\": false,",
																	"    \"~id\": postman_document_id,",
																	"    \"test_table\": postman_table_name,",
																	"    \"customer\": \"postman\",",
																	"};",
																	"",
																	"pm.test(\"Response values \", function () {",
																	"    pm.expect(jsonData).to.be.eql(responseValuesExpected);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?consistency=STRONG&includedDeletes=false",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table}}",
																"{{document_id}}"
															],
															"query": [
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "debug",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "includedDeletes",
																	"value": "false"
																}
															]
														},
														"description": "Retrieves the current version of a piece of content from the data store."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/:table/:key?consistency=STRONG&debug=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		":table",
																		":key"
																	],
																	"query": [
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														}
													]
												},
												{
													"name": "Deletes a piece of content from the data store. Copy 2",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({ success: true });",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\n}"
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?audit=comment:'remove+document'&consistency=STRONG&tag=deletion",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table}}",
																"{{document_id}}"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "comment:'remove+document'"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "deletion"
																},
																{
																	"key": "debug",
																	"value": "<string>",
																	"disabled": true
																}
															]
														},
														"description": "Deletes a piece of content from the data store."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		":table",
																		":key"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Retrieves the current version of a piece of content from the data store",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"",
																	"var responsePropertiesMainExpected = [\"~table\",\"~version\",\"~lastMutateAt\",\"~deleted\",\"~lastUpdateAt\",\"~id\",\"~signature\",\"test_table\",\"customer\",\"~firstUpdateAt\"];",
																	"",
																	"pm.test(\"Response fields\", function () {",
																	"    pm.expect(jsonData).to.have.keys(responsePropertiesMainExpected);",
																	"});",
																	"",
																	"var postman_table_name = pm.environment.get(\"table\");",
																	"var postman_document_id = pm.environment.get(\"document_id\");",
																	"",
																	"delete jsonData[\"~lastMutateAt\"];",
																	"delete jsonData[\"~lastUpdateAt\"];",
																	"delete jsonData[\"~signature\"];",
																	"delete jsonData[\"~firstUpdateAt\"];",
																	"",
																	"",
																	"var responseValuesExpected =  {",
																	"    \"~table\": postman_table_name,",
																	"    \"~version\": 2,",
																	"    \"~deleted\": true,",
																	"    \"~id\": postman_document_id,",
																	"    \"test_table\": postman_table_name,",
																	"    \"customer\": \"postman\",",
																	"};",
																	"",
																	"pm.test(\"Response values \", function () {",
																	"    pm.expect(jsonData).to.be.eql(responseValuesExpected);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?consistency=STRONG&includedDeletes=false",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table}}",
																"{{document_id}}"
															],
															"query": [
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "debug",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "includedDeletes",
																	"value": "false"
																}
															]
														},
														"description": "Retrieves the current version of a piece of content from the data store."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/:table/:key?consistency=STRONG&debug=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		":table",
																		":key"
																	],
																	"query": [
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														}
													]
												}
											]
										},
										{
											"name": "Deletes a piece of content from the data store.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"reason\":\"not authorized\"});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key_no_rights}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"<string>\",\n    \"authenticationId\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/not_existing_table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&debug=<string>",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"not_existing_table",
														":key"
													],
													"query": [
														{
															"key": "changeId",
															"value": "<string>"
														},
														{
															"key": "audit",
															"value": "<string>"
														},
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "tag",
															"value": "<string>"
														},
														{
															"key": "debug",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "key",
															"value": "<string>",
															"description": "(Required) "
														}
													]
												},
												"description": "Deletes a piece of content from the data store."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>"
																},
																{
																	"key": "audit",
																	"value": "<string>"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "debug",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "Attempts to reduce the size of the specified content in sor POST /sor/1/{table}/{key}/compact",
									"item": [
										{
											"name": "TC: Request without api-key",
											"item": [
												{
													"name": "Attempts to reduce the size of the specified content in the underlying storage.",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {",
																	"    pm.response.to.have.status(403);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"reason\":\"not authorized\"});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/:table/:key/compact?ttl=<string>&readConsistency=STRONG&writeConsistency=STRONG",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key",
																"compact"
															],
															"query": [
																{
																	"key": "ttl",
																	"value": "<string>"
																},
																{
																	"key": "readConsistency",
																	"value": "STRONG"
																},
																{
																	"key": "writeConsistency",
																	"value": "STRONG"
																}
															],
															"variable": [
																{
																	"key": "table",
																	"value": "<string>",
																	"description": "(Required) "
																},
																{
																	"key": "key",
																	"value": "<string>",
																	"description": "(Required) "
																}
															]
														},
														"description": "Attempts to reduce the size of the specified content in the underlying storage.\n Normally compaction occurs automatically as a side effect of performing a\n {@link #get}, but it can be forced to occur using this method."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/:table/:key/compact?ttl=<string>&readConsistency=STRONG&writeConsistency=STRONG",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		":table",
																		":key",
																		"compact"
																	],
																	"query": [
																		{
																			"key": "ttl",
																			"value": "<string>"
																		},
																		{
																			"key": "readConsistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "writeConsistency",
																			"value": "STRONG"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "TC: Request compact for not existing table",
											"item": [
												{
													"name": "Attempts to reduce the size of the specified content in the underlying storage.",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 404\", function () {",
																	"    pm.response.to.have.status(404);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"message\":\"Unknown table: not_existing_table\",\"table\":\"not_existing_table\",\"suppressed\":[]});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/not_existing_table/{{document_id}}/compact?ttl=200&readConsistency=STRONG&writeConsistency=STRONG",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"not_existing_table",
																"{{document_id}}",
																"compact"
															],
															"query": [
																{
																	"key": "ttl",
																	"value": "200"
																},
																{
																	"key": "readConsistency",
																	"value": "STRONG"
																},
																{
																	"key": "writeConsistency",
																	"value": "STRONG"
																}
															]
														},
														"description": "Attempts to reduce the size of the specified content in the underlying storage.\n Normally compaction occurs automatically as a side effect of performing a\n {@link #get}, but it can be forced to occur using this method."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/:table/:key/compact?ttl=<string>&readConsistency=STRONG&writeConsistency=STRONG",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		":table",
																		":key",
																		"compact"
																	],
																	"query": [
																		{
																			"key": "ttl",
																			"value": "<string>"
																		},
																		{
																			"key": "readConsistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "writeConsistency",
																			"value": "STRONG"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "TC: Request compact for not existing document",
											"item": [
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table', 'postman_'+uuid.v4());",
																	"",
																	"postman.setEnvironmentVariable('document_id', 'document_id_' + uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Attempts to reduce the size of the specified content in the underlying storage.",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}/compact?ttl=200&readConsistency=STRONG&writeConsistency=STRONG",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table}}",
																"{{document_id}}",
																"compact"
															],
															"query": [
																{
																	"key": "ttl",
																	"value": "200"
																},
																{
																	"key": "readConsistency",
																	"value": "STRONG"
																},
																{
																	"key": "writeConsistency",
																	"value": "STRONG"
																}
															]
														},
														"description": "Attempts to reduce the size of the specified content in the underlying storage.\n Normally compaction occurs automatically as a side effect of performing a\n {@link #get}, but it can be forced to occur using this method."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/:table/:key/compact?ttl=<string>&readConsistency=STRONG&writeConsistency=STRONG",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		":table",
																		":key",
																		"compact"
																	],
																	"query": [
																		{
																			"key": "ttl",
																			"value": "<string>"
																		},
																		{
																			"key": "readConsistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "writeConsistency",
																			"value": "STRONG"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "TC: Request data compaction",
											"item": [
												{
													"name": "Creates a table",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table', 'postman_'+uuid.v4());",
																	"",
																	"postman.setEnvironmentVariable('document_id', 'document_id_' + uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Creates or replaces a piece of content in the data store.",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('key', uuid.v4());",
																	"postman.setEnvironmentVariable('document_id', 'document_id_' + uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json().success).to.eql(true);",
																	"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?audit=comment:'create+piece+of+data'&consistency=STRONG&debug=true",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table}}",
																"{{document_id}}"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "comment:'create+piece+of+data'"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "debug",
																	"value": "true"
																}
															]
														},
														"description": "Creates or replaces a piece of content in the data store.  Overwrites the old\n version of the content, if it exists.  Expects a literal JSON representation\n of the object."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		":table",
																		":key"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Creates or replaces a piece of content in the data store.",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('key', uuid.v4());",
																	"postman.setEnvironmentVariable('document_id', 'document_id_' + uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json().success).to.eql(true);",
																	"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
																	"});",
																	"",
																	"pm.environment.set(\"change_id\", pm.response.json().debug.changeId);",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?audit=comment:'create+piece+of+data'&consistency=STRONG&debug=true",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table}}",
																"{{document_id}}"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "comment:'create+piece+of+data'"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "debug",
																	"value": "true"
																}
															]
														},
														"description": "Creates or replaces a piece of content in the data store.  Overwrites the old\n version of the content, if it exists.  Expects a literal JSON representation\n of the object."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		":table",
																		":key"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Retrieves all recorded history for a piece of content in the data store before compaction",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"const response = pm.response.json();",
																	"const change_id = pm.environment.get(\"change_id\");",
																	"const postman_table = pm.environment.get(\"table\");",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    var latestUpdate = response.find(e => e.id === change_id);",
																	"    ",
																	"    pm.expect(latestUpdate).to.have.keys(\"timestamp\",\"id\",\"delta\",\"tags\");",
																	"    ",
																	"    delete latestUpdate.timestamp;",
																	"",
																	"    const expectedUpdate = {",
																	"        \"id\":change_id,",
																	"        \"delta\":'{\"author\":\"Bob\",\"rating\":5,\"title\":\"Best Ever!\"}',",
																	"        \"tags\": []",
																	"    };",
																	"    pm.expect(latestUpdate).to.eql(expectedUpdate);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}/timeline?data=true&reversed=false&limit=10&consistency=STRONG",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table}}",
																"{{document_id}}",
																"timeline"
															],
															"query": [
																{
																	"key": "data",
																	"value": "true"
																},
																{
																	"key": "audit",
																	"value": "true",
																	"disabled": true
																},
																{
																	"key": "start",
																	"value": "",
																	"disabled": true
																},
																{
																	"key": "end",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "reversed",
																	"value": "false"
																},
																{
																	"key": "limit",
																	"value": "10"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																}
															]
														},
														"description": "Retrieves all recorded history for a piece of content in the data store."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/:table/:key/timeline?data=true&audit=false&start=<string>&end=<string>&reversed=true&limit=10&consistency=STRONG",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		":table",
																		":key",
																		"timeline"
																	],
																	"query": [
																		{
																			"key": "data",
																			"value": "true"
																		},
																		{
																			"key": "audit",
																			"value": "false"
																		},
																		{
																			"key": "start",
																			"value": "<string>"
																		},
																		{
																			"key": "end",
																			"value": "<string>"
																		},
																		{
																			"key": "reversed",
																			"value": "true"
																		},
																		{
																			"key": "limit",
																			"value": "10"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														}
													]
												},
												{
													"name": "Attempts to reduce the size of the specified content in the underlying storage.",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{key}}/compact?ttl=100&readConsistency=STRONG&writeConsistency=STRONG",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table}}",
																"{{key}}",
																"compact"
															],
															"query": [
																{
																	"key": "ttl",
																	"value": "100"
																},
																{
																	"key": "readConsistency",
																	"value": "STRONG"
																},
																{
																	"key": "writeConsistency",
																	"value": "STRONG"
																}
															]
														},
														"description": "Attempts to reduce the size of the specified content in the underlying storage.\n Normally compaction occurs automatically as a side effect of performing a\n {@link #get}, but it can be forced to occur using this method."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/:table/:key/compact?ttl=<string>&readConsistency=STRONG&writeConsistency=STRONG",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		":table",
																		":key",
																		"compact"
																	],
																	"query": [
																		{
																			"key": "ttl",
																			"value": "<string>"
																		},
																		{
																			"key": "readConsistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "writeConsistency",
																			"value": "STRONG"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Retrieves all recorded history for a piece of content in the data store after compaction",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"const response = pm.response.json();",
																	"const change_id = pm.environment.get(\"change_id\");",
																	"const postman_table = pm.environment.get(\"table\");",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    var latestUpdate = response.find(e => e.id === change_id);",
																	"    ",
																	"    pm.expect(latestUpdate).to.have.keys(\"timestamp\",\"id\",\"delta\",\"tags\");",
																	"    ",
																	"    delete latestUpdate.timestamp;",
																	"",
																	"    const expectedUpdate = {",
																	"        \"id\":change_id,",
																	"        \"delta\":'{\"author\":\"Bob\",\"rating\":5,\"title\":\"Best Ever!\"}',",
																	"        \"tags\": []",
																	"    };",
																	"    pm.expect(latestUpdate).to.eql(expectedUpdate);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}/timeline?data=true&reversed=false&limit=10&consistency=STRONG",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table}}",
																"{{document_id}}",
																"timeline"
															],
															"query": [
																{
																	"key": "data",
																	"value": "true"
																},
																{
																	"key": "audit",
																	"value": "true",
																	"disabled": true
																},
																{
																	"key": "start",
																	"value": "",
																	"disabled": true
																},
																{
																	"key": "end",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "reversed",
																	"value": "false"
																},
																{
																	"key": "limit",
																	"value": "10"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																}
															]
														},
														"description": "Retrieves all recorded history for a piece of content in the data store."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/:table/:key/timeline?data=true&audit=false&start=<string>&end=<string>&reversed=true&limit=10&consistency=STRONG",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		":table",
																		":key",
																		"timeline"
																	],
																	"query": [
																		{
																			"key": "data",
																			"value": "true"
																		},
																		{
																			"key": "audit",
																			"value": "false"
																		},
																		{
																			"key": "start",
																			"value": "<string>"
																		},
																		{
																			"key": "end",
																			"value": "<string>"
																		},
																		{
																			"key": "reversed",
																			"value": "true"
																		},
																		{
																			"key": "limit",
																			"value": "10"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "Attempts to reduce the size of the specified content in the underlying storage.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"reason\":\"not authorized\"});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/:table/:key/compact?ttl=<string>&readConsistency=STRONG&writeConsistency=STRONG",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														":table",
														":key",
														"compact"
													],
													"query": [
														{
															"key": "ttl",
															"value": "<string>"
														},
														{
															"key": "readConsistency",
															"value": "STRONG"
														},
														{
															"key": "writeConsistency",
															"value": "STRONG"
														}
													],
													"variable": [
														{
															"key": "table",
															"value": "<string>",
															"description": "(Required) "
														},
														{
															"key": "key",
															"value": "<string>",
															"description": "(Required) "
														}
													]
												},
												"description": "Attempts to reduce the size of the specified content in the underlying storage.\n Normally compaction occurs automatically as a side effect of performing a\n {@link #get}, but it can be forced to occur using this method."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table/:key/compact?ttl=<string>&readConsistency=STRONG&writeConsistency=STRONG",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table",
																":key",
																"compact"
															],
															"query": [
																{
																	"key": "ttl",
																	"value": "<string>"
																},
																{
																	"key": "readConsistency",
																	"value": "STRONG"
																},
																{
																	"key": "writeConsistency",
																	"value": "STRONG"
																}
															],
															"variable": [
																{
																	"key": "table"
																},
																{
																	"key": "key"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "Retrieves all recorded history for a piece of content in sor GET /sor/1/{table}/{key}/timeline",
									"item": [
										{
											"name": "TC: Request without api-key",
											"item": [
												{
													"name": "Creates table /sor/1/_table/{table}",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table', 'table_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": []
												},
												{
													"name": "Retrieves all recorded history for a piece of content in the data store.",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {",
																	"    pm.response.to.have.status(403);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.text()).to.be.oneOf(['{\"reason\":\"not authorized\"}','[]']);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key_no_rights}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}/timeline",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table}}",
																"{{document_id}}",
																"timeline"
															],
															"query": [
																{
																	"key": "data",
																	"value": "true",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "false",
																	"disabled": true
																},
																{
																	"key": "start",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "end",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "reversed",
																	"value": "true",
																	"disabled": true
																},
																{
																	"key": "limit",
																	"value": "10",
																	"disabled": true
																},
																{
																	"key": "consistency",
																	"value": "STRONG",
																	"disabled": true
																}
															]
														},
														"description": "Retrieves all recorded history for a piece of content in the data store."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/:table/:key/timeline?data=true&audit=false&start=<string>&end=<string>&reversed=true&limit=10&consistency=STRONG",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		":table",
																		":key",
																		"timeline"
																	],
																	"query": [
																		{
																			"key": "data",
																			"value": "true"
																		},
																		{
																			"key": "audit",
																			"value": "false"
																		},
																		{
																			"key": "start",
																			"value": "<string>"
																		},
																		{
																			"key": "end",
																			"value": "<string>"
																		},
																		{
																			"key": "reversed",
																			"value": "true"
																		},
																		{
																			"key": "limit",
																			"value": "10"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "TC: Request historical data of record",
											"item": [
												{
													"name": "Creates table /sor/1/_table/{table}",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table', 'table_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": []
												},
												{
													"name": "Creates/Updates content in datastore /sor/1/{table}/{key}",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches\", function () {",
																	"    pm.expect(pm.response.json().success).to.eql(true);",
																	"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
																	"});",
																	"",
																	"pm.environment.set(\"change_id\", pm.response.json().debug.changeId);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('auditValue', 'comment:\\'auditValue+'",
																	" + pm.variables.replaceIn('{{$randomInt}}') + '\\'' );",
																	"postman.setEnvironmentVariable('document_id', 'document_id_' + uuid.v4());",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n        \"name\": \"{{table}}\",\n        \"id\": 1,\n        \"template\": {\n            \"test_field\": \"test_value_of_field\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_global:ugc\",\n            \"facade\": false\n        }\n    }",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?audit={{auditValue}}&consistency={{write_consistency_weak}}&tag=postman&debug=true",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table}}",
																"{{document_id}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "{{auditValue}}"
																},
																{
																	"key": "changeId",
																	"value": "{{changeId}}",
																	"disabled": true
																},
																{
																	"key": "consistency",
																	"value": "{{write_consistency_weak}}"
																},
																{
																	"key": "tag",
																	"value": "postman"
																},
																{
																	"key": "debug",
																	"value": "true"
																}
															]
														},
														"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
													},
													"response": []
												},
												{
													"name": "Retrieves all recorded history for a piece of content in the data store.",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Number of timeline events\", function () {",
																	"    pm.expect(pm.response.json().length).to.eql(1);",
																	"});",
																	" ",
																	"const postman_table = pm.environment.get(\"table\");",
																	"const postman_changeId = pm.environment.get(\"change_id\");",
																	" ",
																	"pm.test(\"Body matches expectation\", function () {",
																	"    const actualBody = pm.response.json();",
																	"",
																	"    delete actualBody[0].timestamp;",
																	"",
																	"    const expectedBody = [{",
																	"        \"id\": `${postman_changeId}`,",
																	"        \"delta\": `{\"availability\":{\"facade\":false,\"placement\":\"ugc_global:ugc\"},\"id\":1,\"name\":\"${postman_table}\",\"template\":{\"test_field\":\"test_value_of_field\"}}`,",
																	"        \"tags\": [",
																	"            \"postman\"",
																	"        ]",
																	"    }];",
																	"",
																	"    pm.expect(actualBody).to.eql(expectedBody);",
																	"});",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}/timeline?data=true&audit=false&reversed=true&limit=10&consistency=STRONG",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table}}",
																"{{document_id}}",
																"timeline"
															],
															"query": [
																{
																	"key": "data",
																	"value": "true"
																},
																{
																	"key": "audit",
																	"value": "false"
																},
																{
																	"key": "start",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "end",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "reversed",
																	"value": "true"
																},
																{
																	"key": "limit",
																	"value": "10"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																}
															]
														},
														"description": "Retrieves all recorded history for a piece of content in the data store."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/:table/:key/timeline?data=true&audit=false&start=<string>&end=<string>&reversed=true&limit=10&consistency=STRONG",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		":table",
																		":key",
																		"timeline"
																	],
																	"query": [
																		{
																			"key": "data",
																			"value": "true"
																		},
																		{
																			"key": "audit",
																			"value": "false"
																		},
																		{
																			"key": "start",
																			"value": "<string>"
																		},
																		{
																			"key": "end",
																			"value": "<string>"
																		},
																		{
																			"key": "reversed",
																			"value": "true"
																		},
																		{
																			"key": "limit",
																			"value": "10"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														}
													]
												},
												{
													"name": "Creates/Updates content in datastore /sor/1/{table}/{key}",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches\", function () {",
																	"    pm.expect(pm.response.json().success).to.eql(true);",
																	"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
																	"});",
																	"",
																	"pm.environment.set(\"change_id\", pm.response.json().debug.changeId);",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n        \"name\": \"{{table}}\",\n        \"id\": 2,\n        \"extra_field\": \"some_value\",\n        \"template\": {\n            \"test_field\": \"test_value_of_field\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_global:ugc\",\n            \"facade\": false\n        }\n    }",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?audit={{auditValue}}&consistency={{write_consistency_weak}}&tag=postman&debug=true",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table}}",
																"{{document_id}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "{{auditValue}}"
																},
																{
																	"key": "changeId",
																	"value": "{{changeId}}",
																	"disabled": true
																},
																{
																	"key": "consistency",
																	"value": "{{write_consistency_weak}}"
																},
																{
																	"key": "tag",
																	"value": "postman"
																},
																{
																	"key": "debug",
																	"value": "true"
																}
															]
														},
														"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
													},
													"response": []
												},
												{
													"name": "Retrieves all recorded history for a piece of content in the data store.",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"const postman_table = pm.environment.get(\"table\");",
																	"const postman_document_id = pm.environment.get(\"document_id\");",
																	"const postman_change_id = pm.environment.get(\"change_id\");",
																	"const actualBody = pm.response.json();",
																	"",
																	"pm.test(\"Assert latest update\", function () {",
																	"    const actualUpdate = actualBody.find (update => update.id === postman_change_id);",
																	"",
																	"    delete actualUpdate.timestamp;",
																	"",
																	"    const expectedUpdate = {",
																	"        \"id\": `${postman_change_id}`,",
																	"        \"delta\": `{\"availability\":{\"facade\":false,\"placement\":\"ugc_global:ugc\"},\"extra_field\":\"some_value\",\"id\":2,\"name\":\"${postman_table}\",\"template\":{\"test_field\":\"test_value_of_field\"}}`,",
																	"        \"tags\": [",
																	"            \"postman\"",
																	"        ]",
																	"    };",
																	"    pm.expect(actualUpdate).to.eql(expectedUpdate);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}/timeline?data=true&audit=false&reversed=true&limit=10&consistency=STRONG",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table}}",
																"{{document_id}}",
																"timeline"
															],
															"query": [
																{
																	"key": "data",
																	"value": "true"
																},
																{
																	"key": "audit",
																	"value": "false"
																},
																{
																	"key": "start",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "end",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "reversed",
																	"value": "true"
																},
																{
																	"key": "limit",
																	"value": "10"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																}
															]
														},
														"description": "Retrieves all recorded history for a piece of content in the data store."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/:table/:key/timeline?data=true&audit=false&start=<string>&end=<string>&reversed=true&limit=10&consistency=STRONG",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		":table",
																		":key",
																		"timeline"
																	],
																	"query": [
																		{
																			"key": "data",
																			"value": "true"
																		},
																		{
																			"key": "audit",
																			"value": "false"
																		},
																		{
																			"key": "start",
																			"value": "<string>"
																		},
																		{
																			"key": "end",
																			"value": "<string>"
																		},
																		{
																			"key": "reversed",
																			"value": "true"
																		},
																		{
																			"key": "limit",
																			"value": "10"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														}
													]
												},
												{
													"name": "Creates/Updates content in datastore /sor/1/{table}/{key}",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches\", function () {",
																	"    pm.expect(pm.response.json().success).to.eql(true);",
																	"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
																	"});",
																	"",
																	"pm.environment.set(\"change_id\", pm.response.json().debug.changeId);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n        \"name\": \"{{table}}\",\n        \"template\": {\n            \"test_field\": \"test_value_of_field\",\n            \"new_field\": \"inside_template\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_global:ugc\",\n            \"facade\": false\n        }\n    }",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?audit={{auditValue}}&consistency={{write_consistency_weak}}&tag=postman&debug=true",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table}}",
																"{{document_id}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "{{auditValue}}"
																},
																{
																	"key": "changeId",
																	"value": "{{changeId}}",
																	"disabled": true
																},
																{
																	"key": "consistency",
																	"value": "{{write_consistency_weak}}"
																},
																{
																	"key": "tag",
																	"value": "postman"
																},
																{
																	"key": "debug",
																	"value": "true"
																}
															]
														},
														"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
													},
													"response": []
												},
												{
													"name": "Retrieves all recorded history for a piece of content in the data store. Copy",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"var actualBody = pm.response.json();",
																	"const postman_table = pm.environment.get(\"table\");",
																	"const postman_document_id = pm.environment.get(\"document_id\");",
																	"const postman_change_id = pm.environment.get(\"change_id\");",
																	"",
																	"pm.test(\"Assert latest update\", function () {",
																	"    const actualUpdate = actualBody.find (update => update.id === postman_change_id);",
																	"",
																	"    delete actualUpdate.timestamp;",
																	"",
																	"    const expectedUpdate = {",
																	"         \"id\": `${postman_change_id}`,",
																	"        \"delta\": `{\"availability\":{\"facade\":false,\"placement\":\"ugc_global:ugc\"},\"name\":\"${postman_table}\",\"template\":{\"new_field\":\"inside_template\",\"test_field\":\"test_value_of_field\"}}`,",
																	"        \"tags\": [\"postman\"]",
																	"    }",
																	"    pm.expect(actualUpdate).to.eql(expectedUpdate);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}/timeline?data=true&audit=false&reversed=true&limit=10&consistency=STRONG",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table}}",
																"{{document_id}}",
																"timeline"
															],
															"query": [
																{
																	"key": "data",
																	"value": "true"
																},
																{
																	"key": "audit",
																	"value": "false"
																},
																{
																	"key": "start",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "end",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "reversed",
																	"value": "true"
																},
																{
																	"key": "limit",
																	"value": "10"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																}
															]
														},
														"description": "Retrieves all recorded history for a piece of content in the data store."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/:table/:key/timeline?data=true&audit=false&start=<string>&end=<string>&reversed=true&limit=10&consistency=STRONG",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		":table",
																		":key",
																		"timeline"
																	],
																	"query": [
																		{
																			"key": "data",
																			"value": "true"
																		},
																		{
																			"key": "audit",
																			"value": "false"
																		},
																		{
																			"key": "start",
																			"value": "<string>"
																		},
																		{
																			"key": "end",
																			"value": "<string>"
																		},
																		{
																			"key": "reversed",
																			"value": "true"
																		},
																		{
																			"key": "limit",
																			"value": "10"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														}
													]
												},
												{
													"name": "Delete content in datastore /sor/1/{table}/{key}",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches\", function () {",
																	"    pm.expect(pm.response.json().success).to.eql(true);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n        \"name\": \"{{table}}\",\n        \"options\": {\n            \"placement\": \"ugc_eu:ugc\",\n            \"facades\": []\n        },\n        \"template\": {\n            \"test_field\": \"test_value_of_field\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_eu:ugc\",\n            \"facade\": false\n        }\n    }",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?audit={{auditValue}}",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table}}",
																"{{document_id}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "{{auditValue}}"
																}
															]
														},
														"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
													},
													"response": []
												},
												{
													"name": "Retrieves all recorded history for a piece of content in the data store.",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"var actualBody = pm.response.json();",
																	"const postman_table = pm.environment.get(\"table\");",
																	"const postman_document_id = pm.environment.get(\"document_id\");",
																	"const postman_change_id = pm.environment.get(\"change_id\");",
																	"",
																	"pm.test(\"Assert deleted update\", function () {",
																	"    const deletedUpdate = actualBody.filter(obj => {",
																	"        return obj.delta === \"~\";",
																	"    }); ",
																	"    ",
																	"    pm.expect(deletedUpdate[0]).to.have.keys(\"timestamp\",\"id\",\"delta\",\"tags\");",
																	"    pm.expect(deletedUpdate[0].delta).to.eql(\"~\");",
																	"    pm.expect(deletedUpdate[0].tags).to.eql([]);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}/timeline?data=true&audit=false&reversed=true&limit=10&consistency=STRONG",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table}}",
																"{{document_id}}",
																"timeline"
															],
															"query": [
																{
																	"key": "data",
																	"value": "true"
																},
																{
																	"key": "audit",
																	"value": "false"
																},
																{
																	"key": "start",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "end",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "reversed",
																	"value": "true"
																},
																{
																	"key": "limit",
																	"value": "10"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																}
															]
														},
														"description": "Retrieves all recorded history for a piece of content in the data store."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/:table/:key/timeline?data=true&audit=false&start=<string>&end=<string>&reversed=true&limit=10&consistency=STRONG",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		":table",
																		":key",
																		"timeline"
																	],
																	"query": [
																		{
																			"key": "data",
																			"value": "true"
																		},
																		{
																			"key": "audit",
																			"value": "false"
																		},
																		{
																			"key": "start",
																			"value": "<string>"
																		},
																		{
																			"key": "end",
																			"value": "<string>"
																		},
																		{
																			"key": "reversed",
																			"value": "true"
																		},
																		{
																			"key": "limit",
																			"value": "10"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "TC: Request historical data of record with audit records",
											"item": [
												{
													"name": "Creates table /sor/1/_table/{table}",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table', 'table_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": []
												},
												{
													"name": "Creates/Updates content in datastore /sor/1/{table}/{key}",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches\", function () {",
																	"    pm.expect(pm.response.json().success).to.eql(true);",
																	"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
																	"});",
																	"",
																	"pm.environment.set(\"change_id\", pm.response.json().debug.changeId);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('auditValue', 'comment:\\'auditValue+'",
																	" + pm.variables.replaceIn('{{$randomInt}}') + '\\'' );",
																	"postman.setEnvironmentVariable('document_id', 'document_id_' + uuid.v4());",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n        \"name\": \"{{table}}\",\n        \"id\": 1,\n        \"template\": {\n            \"test_field\": \"test_value_of_field\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_global:ugc\",\n            \"facade\": false\n        }\n    }",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?audit={{auditValue}}&consistency={{write_consistency_weak}}&tag=postman&debug=true",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table}}",
																"{{document_id}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "{{auditValue}}"
																},
																{
																	"key": "changeId",
																	"value": "{{changeId}}",
																	"disabled": true
																},
																{
																	"key": "consistency",
																	"value": "{{write_consistency_weak}}"
																},
																{
																	"key": "tag",
																	"value": "postman"
																},
																{
																	"key": "debug",
																	"value": "true"
																}
															]
														},
														"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
													},
													"response": []
												},
												{
													"name": "Retrieves all recorded history for a piece of content in the data store with data true and audit true",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"message\": \"Audit data is no longer accessable via EmoDB app servers.\",\"suppressed\": []});",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}/timeline?data=true&audit=true&reversed=false&limit=10&consistency=STRONG",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table}}",
																"{{document_id}}",
																"timeline"
															],
															"query": [
																{
																	"key": "data",
																	"value": "true"
																},
																{
																	"key": "audit",
																	"value": "true"
																},
																{
																	"key": "start",
																	"value": "",
																	"disabled": true
																},
																{
																	"key": "end",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "reversed",
																	"value": "false"
																},
																{
																	"key": "limit",
																	"value": "10"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																}
															]
														},
														"description": "Retrieves all recorded history for a piece of content in the data store."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/:table/:key/timeline?data=true&audit=false&start=<string>&end=<string>&reversed=true&limit=10&consistency=STRONG",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		":table",
																		":key",
																		"timeline"
																	],
																	"query": [
																		{
																			"key": "data",
																			"value": "true"
																		},
																		{
																			"key": "audit",
																			"value": "false"
																		},
																		{
																			"key": "start",
																			"value": "<string>"
																		},
																		{
																			"key": "end",
																			"value": "<string>"
																		},
																		{
																			"key": "reversed",
																			"value": "true"
																		},
																		{
																			"key": "limit",
																			"value": "10"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														}
													]
												},
												{
													"name": "Retrieves all recorded history for a piece of content with data false and audit false in the data store",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql([]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}/timeline?data=false&audit=false&reversed=false&limit=10&consistency=STRONG",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table}}",
																"{{document_id}}",
																"timeline"
															],
															"query": [
																{
																	"key": "data",
																	"value": "false"
																},
																{
																	"key": "audit",
																	"value": "false"
																},
																{
																	"key": "start",
																	"value": "",
																	"disabled": true
																},
																{
																	"key": "end",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "reversed",
																	"value": "false"
																},
																{
																	"key": "limit",
																	"value": "10"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																}
															]
														},
														"description": "Retrieves all recorded history for a piece of content in the data store."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/:table/:key/timeline?data=true&audit=false&start=<string>&end=<string>&reversed=true&limit=10&consistency=STRONG",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		":table",
																		":key",
																		"timeline"
																	],
																	"query": [
																		{
																			"key": "data",
																			"value": "true"
																		},
																		{
																			"key": "audit",
																			"value": "false"
																		},
																		{
																			"key": "start",
																			"value": "<string>"
																		},
																		{
																			"key": "end",
																			"value": "<string>"
																		},
																		{
																			"key": "reversed",
																			"value": "true"
																		},
																		{
																			"key": "limit",
																			"value": "10"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "TC: Request historical data of record with reversed false",
											"item": [
												{
													"name": "Creates table /sor/1/_table/{table}",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table', 'table_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": []
												},
												{
													"name": "Creates/Updates content in datastore /sor/1/{table}/{key}",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches\", function () {",
																	"    pm.expect(pm.response.json().success).to.eql(true);",
																	"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
																	"});",
																	"",
																	"pm.environment.set(\"change_id\", pm.response.json().debug.changeId);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('auditValue', 'comment:\\'auditValue+'",
																	" + pm.variables.replaceIn('{{$randomInt}}') + '\\'' );",
																	"postman.setEnvironmentVariable('document_id', 'document_id_' + uuid.v4());",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n        \"name\": \"{{table}}\",\n        \"id\": 1,\n        \"template\": {\n            \"test_field\": \"test_value_of_field\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_global:ugc\",\n            \"facade\": false\n        }\n    }",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?audit={{auditValue}}&consistency={{write_consistency_weak}}&tag=postman&debug=true",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table}}",
																"{{document_id}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "{{auditValue}}"
																},
																{
																	"key": "changeId",
																	"value": "{{changeId}}",
																	"disabled": true
																},
																{
																	"key": "consistency",
																	"value": "{{write_consistency_weak}}"
																},
																{
																	"key": "tag",
																	"value": "postman"
																},
																{
																	"key": "debug",
																	"value": "true"
																}
															]
														},
														"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
													},
													"response": []
												},
												{
													"name": "Retrieves all recorded history for a piece of content in the data store_reversed true and start < end",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.text()).to.eql(\"Start must be >=End for reversed ranges\");",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('startUUID', new Date(Date.now() - 1000 * 120).toISOString());",
																	"postman.setEnvironmentVariable('endUUID', new Date(Date.now() + 1000 * 120).toISOString());"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}/timeline?data=true&start={{startUUID}}&end={{endUUID}}&reversed=true&limit=10&consistency=STRONG",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table}}",
																"{{document_id}}",
																"timeline"
															],
															"query": [
																{
																	"key": "data",
																	"value": "true"
																},
																{
																	"key": "audit",
																	"value": "true",
																	"disabled": true
																},
																{
																	"key": "start",
																	"value": "{{startUUID}}"
																},
																{
																	"key": "end",
																	"value": "{{endUUID}}"
																},
																{
																	"key": "reversed",
																	"value": "true"
																},
																{
																	"key": "limit",
																	"value": "10"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																}
															]
														},
														"description": "Retrieves all recorded history for a piece of content in the data store."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/:table/:key/timeline?data=true&audit=false&start=<string>&end=<string>&reversed=true&limit=10&consistency=STRONG",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		":table",
																		":key",
																		"timeline"
																	],
																	"query": [
																		{
																			"key": "data",
																			"value": "true"
																		},
																		{
																			"key": "audit",
																			"value": "false"
																		},
																		{
																			"key": "start",
																			"value": "<string>"
																		},
																		{
																			"key": "end",
																			"value": "<string>"
																		},
																		{
																			"key": "reversed",
																			"value": "true"
																		},
																		{
																			"key": "limit",
																			"value": "10"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														}
													]
												},
												{
													"name": "Retrieves all recorded history for a piece of content in the data store_reversed true and start >= end",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"const response = pm.response.json();",
																	"const change_id = pm.environment.get(\"change_id\");",
																	"const postman_table = pm.environment.get(\"table\");",
																	"",
																	"pm.test(\"Number of elements in the response\", function () {",
																	"    pm.expect(response.length, 1);",
																	"});",
																	"    ",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(response[0]).to.have.keys(\"timestamp\",\"id\",\"delta\",\"tags\");",
																	"    pm.expect(response[0].id).to.eql(change_id);",
																	"    pm.expect(response[0].delta).to.eql(`{\"availability\":{\"facade\":false,\"placement\":\"ugc_global:ugc\"},\"id\":1,\"name\":\"${postman_table}\",\"template\":{\"test_field\":\"test_value_of_field\"}}`);",
																	"    pm.expect(response[0].tags).to.eql([\"postman\"]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('startUUID', new Date(Date.now() - 1000 * 120).toISOString());",
																	"postman.setEnvironmentVariable('endUUID', new Date(Date.now() + 1000 * 120).toISOString());"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}/timeline?data=true&start={{endUUID}}&end={{startUUID}}&reversed=true&limit=10&consistency=STRONG",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table}}",
																"{{document_id}}",
																"timeline"
															],
															"query": [
																{
																	"key": "data",
																	"value": "true"
																},
																{
																	"key": "audit",
																	"value": "true",
																	"disabled": true
																},
																{
																	"key": "start",
																	"value": "{{endUUID}}"
																},
																{
																	"key": "end",
																	"value": "{{startUUID}}"
																},
																{
																	"key": "reversed",
																	"value": "true"
																},
																{
																	"key": "limit",
																	"value": "10"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																}
															]
														},
														"description": "Retrieves all recorded history for a piece of content in the data store."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/:table/:key/timeline?data=true&audit=false&start=<string>&end=<string>&reversed=true&limit=10&consistency=STRONG",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		":table",
																		":key",
																		"timeline"
																	],
																	"query": [
																		{
																			"key": "data",
																			"value": "true"
																		},
																		{
																			"key": "audit",
																			"value": "false"
																		},
																		{
																			"key": "start",
																			"value": "<string>"
																		},
																		{
																			"key": "end",
																			"value": "<string>"
																		},
																		{
																			"key": "reversed",
																			"value": "true"
																		},
																		{
																			"key": "limit",
																			"value": "10"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "TC: Request historical data of record with reversed false/true with start and end params",
											"item": [
												{
													"name": "Creates table /sor/1/_table/{table}",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table', 'table_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": []
												},
												{
													"name": "Creates/Updates content in datastore /sor/1/{table}/{key}",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches\", function () {",
																	"    pm.expect(pm.response.json().success).to.eql(true);",
																	"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
																	"});",
																	"",
																	"pm.environment.set(\"change_id\", pm.response.json().debug.changeId);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('auditValue', 'comment:\\'auditValue+'",
																	" + pm.variables.replaceIn('{{$randomInt}}') + '\\'' );",
																	"postman.setEnvironmentVariable('document_id', 'document_id_' + uuid.v4());",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n        \"name\": \"{{table}}\",\n        \"id\": 1,\n        \"template\": {\n            \"test_field\": \"test_value_of_field\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_global:ugc\",\n            \"facade\": false\n        }\n    }",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?audit={{auditValue}}&consistency={{write_consistency_weak}}&tag=postman&debug=true",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table}}",
																"{{document_id}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "{{auditValue}}"
																},
																{
																	"key": "changeId",
																	"value": "{{changeId}}",
																	"disabled": true
																},
																{
																	"key": "consistency",
																	"value": "{{write_consistency_weak}}"
																},
																{
																	"key": "tag",
																	"value": "postman"
																},
																{
																	"key": "debug",
																	"value": "true"
																}
															]
														},
														"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
													},
													"response": []
												},
												{
													"name": "Retrieves all recorded history for a piece of content in the data store reversed false",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql([]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('startUUID', new Date(Date.now()).toISOString());"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}/timeline?data=true&start={{startUUID}}&reversed=false&limit=10&consistency=STRONG",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table}}",
																"{{document_id}}",
																"timeline"
															],
															"query": [
																{
																	"key": "data",
																	"value": "true"
																},
																{
																	"key": "audit",
																	"value": "true",
																	"disabled": true
																},
																{
																	"key": "start",
																	"value": "{{startUUID}}"
																},
																{
																	"key": "end",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "reversed",
																	"value": "false"
																},
																{
																	"key": "limit",
																	"value": "10"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																}
															]
														},
														"description": "Retrieves all recorded history for a piece of content in the data store."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/:table/:key/timeline?data=true&audit=false&start=<string>&end=<string>&reversed=true&limit=10&consistency=STRONG",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		":table",
																		":key",
																		"timeline"
																	],
																	"query": [
																		{
																			"key": "data",
																			"value": "true"
																		},
																		{
																			"key": "audit",
																			"value": "false"
																		},
																		{
																			"key": "start",
																			"value": "<string>"
																		},
																		{
																			"key": "end",
																			"value": "<string>"
																		},
																		{
																			"key": "reversed",
																			"value": "true"
																		},
																		{
																			"key": "limit",
																			"value": "10"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														}
													]
												},
												{
													"name": "Retrieves all recorded history for a piece of content in the data store_reversed true",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"const response = pm.response.json();",
																	"const change_id = pm.environment.get(\"change_id\");",
																	"const postman_table = pm.environment.get(\"table\");",
																	"",
																	"pm.test(\"Number of elements in the response\", function () {",
																	"    pm.expect(response.length, 1);",
																	"});",
																	"    ",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(response[0]).to.have.keys(\"timestamp\",\"id\",\"delta\",\"tags\");",
																	"    pm.expect(response[0].id).to.eql(change_id);",
																	"    pm.expect(response[0].delta).to.eql(`{\"availability\":{\"facade\":false,\"placement\":\"ugc_global:ugc\"},\"id\":1,\"name\":\"${postman_table}\",\"template\":{\"test_field\":\"test_value_of_field\"}}`);",
																	"    pm.expect(response[0].tags).to.eql([\"postman\"]);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('startUUID', new Date(Date.now()).toISOString());"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}/timeline?data=true&start={{startUUID}}&reversed=true&limit=10&consistency=STRONG",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"{{table}}",
																"{{document_id}}",
																"timeline"
															],
															"query": [
																{
																	"key": "data",
																	"value": "true"
																},
																{
																	"key": "audit",
																	"value": "true",
																	"disabled": true
																},
																{
																	"key": "start",
																	"value": "{{startUUID}}"
																},
																{
																	"key": "end",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "reversed",
																	"value": "true"
																},
																{
																	"key": "limit",
																	"value": "10"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																}
															]
														},
														"description": "Retrieves all recorded history for a piece of content in the data store."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/:table/:key/timeline?data=true&audit=false&start=<string>&end=<string>&reversed=true&limit=10&consistency=STRONG",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		":table",
																		":key",
																		"timeline"
																	],
																	"query": [
																		{
																			"key": "data",
																			"value": "true"
																		},
																		{
																			"key": "audit",
																			"value": "false"
																		},
																		{
																			"key": "start",
																			"value": "<string>"
																		},
																		{
																			"key": "end",
																			"value": "<string>"
																		},
																		{
																			"key": "reversed",
																			"value": "true"
																		},
																		{
																			"key": "limit",
																			"value": "10"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "TC: Request historical data of record from newest to oldest",
											"item": [
												{
													"name": "Retrieves all recorded history for not existing table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 404\", function () {",
																	"    pm.response.to.have.status(404);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"message\":\"Unknown table: not_existing_table\",\"table\":\"not_existing_table\",\"suppressed\":[]});",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('startUUID', new Date(Date.now()).toISOString());"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/not_existing_table/not_existing_document/timeline?data=true&reversed=false&limit=10&consistency=STRONG",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"not_existing_table",
																"not_existing_document",
																"timeline"
															],
															"query": [
																{
																	"key": "data",
																	"value": "true"
																},
																{
																	"key": "audit",
																	"value": "true",
																	"disabled": true
																},
																{
																	"key": "start",
																	"value": "",
																	"disabled": true
																},
																{
																	"key": "end",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "reversed",
																	"value": "false"
																},
																{
																	"key": "limit",
																	"value": "10"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																}
															]
														},
														"description": "Retrieves all recorded history for a piece of content in the data store."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/:table/:key/timeline?data=true&audit=false&start=<string>&end=<string>&reversed=true&limit=10&consistency=STRONG",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		":table",
																		":key",
																		"timeline"
																	],
																	"query": [
																		{
																			"key": "data",
																			"value": "true"
																		},
																		{
																			"key": "audit",
																			"value": "false"
																		},
																		{
																			"key": "start",
																			"value": "<string>"
																		},
																		{
																			"key": "end",
																			"value": "<string>"
																		},
																		{
																			"key": "reversed",
																			"value": "true"
																		},
																		{
																			"key": "limit",
																			"value": "10"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														}
													]
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "Retrieves a list of content items in a particular table. GET /sor/1/{table}",
							"item": [
								{
									"name": "TC: Request without api-key",
									"item": [
										{
											"name": "Retrieves a list of content items in a particular table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"reason\":\"not authorized\"});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/some_table_name?from=<string>&limit=10&includeDeletes=false&consistency=STRONG&debug=<string>&APIKey=<string>",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"some_table_name"
													],
													"query": [
														{
															"key": "from",
															"value": "<string>"
														},
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "includeDeletes",
															"value": "false"
														},
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "debug",
															"value": "<string>"
														},
														{
															"key": "APIKey",
															"value": "<string>",
															"description": "(Required) "
														}
													]
												},
												"description": "Retrieves a list of content items in a particular table.  To retrieve <em>all</em> items in a table set the\n limit param to a very large value (eg. Long.MAX_VALUE), but for large tables be sure your client can stream the\n results without exhausting all available memory."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table?from=<string>&limit=10&includeDeletes=false&consistency=STRONG&debug=<string>&APIKey=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table"
															],
															"query": [
																{
																	"key": "from",
																	"value": "<string>"
																},
																{
																	"key": "limit",
																	"value": "10"
																},
																{
																	"key": "includeDeletes",
																	"value": "false"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "debug",
																	"value": "<string>"
																},
																{
																	"key": "APIKey",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Request to not existing table",
									"item": [
										{
											"name": "Retrieves a list of content items in a particular table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"message\":\"Unknown table: some_table_name\",\"table\":\"some_table_name\",\"suppressed\":[]});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/some_table_name?APIKey={{api_key}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"some_table_name"
													],
													"query": [
														{
															"key": "from",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "limit",
															"value": "10",
															"disabled": true
														},
														{
															"key": "includeDeletes",
															"value": "false",
															"disabled": true
														},
														{
															"key": "consistency",
															"value": "STRONG",
															"disabled": true
														},
														{
															"key": "debug",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "APIKey",
															"value": "{{api_key}}",
															"description": "(Required) "
														}
													]
												},
												"description": "Retrieves a list of content items in a particular table.  To retrieve <em>all</em> items in a table set the\n limit param to a very large value (eg. Long.MAX_VALUE), but for large tables be sure your client can stream the\n results without exhausting all available memory."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table?from=<string>&limit=10&includeDeletes=false&consistency=STRONG&debug=<string>&APIKey=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table"
															],
															"query": [
																{
																	"key": "from",
																	"value": "<string>"
																},
																{
																	"key": "limit",
																	"value": "10"
																},
																{
																	"key": "includeDeletes",
																	"value": "false"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "debug",
																	"value": "<string>"
																},
																{
																	"key": "APIKey",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										}
									]
								},
								{
									"name": "TC: List of items from table including/excluding deleted items",
									"item": [
										{
											"name": "Creates table /sor/1/_table/{table}",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"postman.setEnvironmentVariable('table', 'table_'+uuid.v4());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "placement:'ugc_global:ugc'"
														},
														{
															"key": "audit",
															"value": "comment:'initial+provisioning'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is created"
											},
											"response": []
										},
										{
											"name": "Creates/Updates content in datastore /sor/1/{table}/{key}",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\",\"debug\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"postman.setEnvironmentVariable('auditValue', 'comment:\\'auditValue+'",
															" + pm.variables.replaceIn('{{$randomInt}}') + '\\'' );",
															"postman.setEnvironmentVariable('document_id', 'document_id_' + uuid.v4());",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n        \"name\": \"{{table}}\",\n        \"id\": 1,\n        \"template\": {\n            \"test_field\": \"test_value_of_field\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_global:ugc\",\n            \"facade\": false\n        }\n    }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?audit={{auditValue}}&consistency={{write_consistency_weak}}&tag=postman&debug=true",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "{{auditValue}}"
														},
														{
															"key": "changeId",
															"value": "{{changeId}}",
															"disabled": true
														},
														{
															"key": "consistency",
															"value": "{{write_consistency_weak}}"
														},
														{
															"key": "tag",
															"value": "postman"
														},
														{
															"key": "debug",
															"value": "true"
														}
													]
												},
												"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
											},
											"response": []
										},
										{
											"name": "Creates/Updates content in datastore /sor/1/{table}/{key}",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\",\"debug\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"postman.setEnvironmentVariable('auditValue', 'comment:\\'auditValue+'",
															" + pm.variables.replaceIn('{{$randomInt}}') + '\\'' );",
															"postman.setEnvironmentVariable('document_id1', 'document_id_' + uuid.v4());",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n        \"name\": \"{{table}}\",\n        \"id\": 1,\n        \"template\": {\n            \"test_field\": \"test_value_of_field\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_global:ugc\",\n            \"facade\": false\n        }\n    }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id1}}?audit={{auditValue}}&consistency={{write_consistency_weak}}&tag=postman&debug=true",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id1}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "{{auditValue}}"
														},
														{
															"key": "changeId",
															"value": "{{changeId}}",
															"disabled": true
														},
														{
															"key": "consistency",
															"value": "{{write_consistency_weak}}"
														},
														{
															"key": "tag",
															"value": "postman"
														},
														{
															"key": "debug",
															"value": "true"
														}
													]
												},
												"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
											},
											"response": []
										},
										{
											"name": "Retrieves a list of content items in a particular table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"jsonData.forEach(update => {",
															"    var responsePropertiesMainActual = Object.keys(update);",
															"    var responsePropertiesAvailabilityActual = Object.keys(update.availability);",
															"    var responsePropertiesTemplateActual = Object.keys(update.template);",
															"",
															"    var responsePropertiesMainExpected = [\"availability\",\"id\",\"name\",\"template\",\"test_field\",\"~table\",\"~version\",\"~lastMutateAt\",\"~deleted\",\"~lastUpdateAt\",\"~id\",\"client\",\"~signature\",\"type\",\"~firstUpdateAt\"];",
															"    var responsePropertiesAvailabilityExpected = [\"facade\",\"placement\"];",
															"    var responsePropertiesTemplateExpected = [\"test_field\"];",
															"",
															"    pm.test(\"Response fields\", function () {",
															"        pm.expect(responsePropertiesMainActual).to.have.deep.members(responsePropertiesMainExpected);",
															"        pm.expect(responsePropertiesAvailabilityActual).to.have.deep.members(responsePropertiesAvailabilityExpected);",
															"        pm.expect(responsePropertiesTemplateActual).to.have.deep.members(responsePropertiesTemplateExpected);",
															"    });",
															"",
															"    delete update[\"~lastMutateAt\"];",
															"    delete update[\"~lastUpdateAt\"];",
															"    delete update[\"~signature\"];",
															"    delete update[\"~firstUpdateAt\"];",
															"",
															"    const postman_table_name = pm.environment.get(\"table\");",
															"    const postman_document_id = pm.environment.get(\"document_id\");",
															"",
															"    const responseValuesExpected = {",
															"        \"~deleted\":false,",
															"        \"~id\":postman_document_id,",
															"        \"~table\":postman_table_name,",
															"        \"~version\":1,",
															"        \"availability\":{",
															"            \"facade\":false,",
															"            \"placement\":\"ugc_global:ugc\"",
															"        },",
															"        \"client\":\"iuliia_customer\",",
															"        \"id\":1,",
															"        \"name\":postman_table_name,",
															"        \"template\":{",
															"            \"test_field\":\"test_value_of_field\"",
															"        },",
															"        \"test_field\":\"postman\",",
															"        \"type\":\"create_table_test\"",
															"    };",
															"",
															"    const postman_document_id_1 = pm.environment.get(\"document_id1\");",
															"",
															"    const responseValuesExpected1 = {",
															"        ...responseValuesExpected,",
															"        \"~id\": postman_document_id_1",
															"    };",
															"",
															"    pm.test(\"Response values \", function () {",
															"        pm.expect(JSON.stringify(update)).to.be.deep.oneOf([JSON.stringify(responseValuesExpected), JSON.stringify(responseValuesExpected1)]);",
															"    });",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}?APIKey={{api_key}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}"
													],
													"query": [
														{
															"key": "from",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "limit",
															"value": "10",
															"disabled": true
														},
														{
															"key": "includeDeletes",
															"value": "false",
															"disabled": true
														},
														{
															"key": "consistency",
															"value": "STRONG",
															"disabled": true
														},
														{
															"key": "debug",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "APIKey",
															"value": "{{api_key}}",
															"description": "(Required) "
														}
													]
												},
												"description": "Retrieves a list of content items in a particular table.  To retrieve <em>all</em> items in a table set the\n limit param to a very large value (eg. Long.MAX_VALUE), but for large tables be sure your client can stream the\n results without exhausting all available memory."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table?from=<string>&limit=10&includeDeletes=false&consistency=STRONG&debug=<string>&APIKey=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table"
															],
															"query": [
																{
																	"key": "from",
																	"value": "<string>"
																},
																{
																	"key": "limit",
																	"value": "10"
																},
																{
																	"key": "includeDeletes",
																	"value": "false"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "debug",
																	"value": "<string>"
																},
																{
																	"key": "APIKey",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										},
										{
											"name": "Delete content in datastore /sor/1/{table}/{key}",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n        \"name\": \"{{table_name_1}}\",\n        \"options\": {\n            \"placement\": \"ugc_eu:ugc\",\n            \"facades\": []\n        },\n        \"template\": {\n            \"test_field\": \"test_value_of_field\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_eu:ugc\",\n            \"facade\": false\n        }\n    }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id1}}?audit={{auditValue}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id1}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "{{auditValue}}"
														}
													]
												},
												"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
											},
											"response": []
										},
										{
											"name": "Retrieves a list of content items with deleted in a particular table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"jsonData.forEach(update => {",
															"    var responsePropertiesMainActual = Object.keys(update);",
															"    var responsePropertiesAvailabilityActual = Object.keys(update.availability);",
															"    var responsePropertiesTemplateActual = Object.keys(update.template);",
															"",
															"    var responsePropertiesMainExpected = [\"availability\",\"id\",\"name\",\"template\",\"test_field\",\"~table\",\"~version\",\"~lastMutateAt\",\"~deleted\",\"~lastUpdateAt\",\"~id\",\"client\",\"~signature\",\"type\",\"~firstUpdateAt\"];",
															"    var responsePropertiesAvailabilityExpected = [\"facade\",\"placement\"];",
															"    var responsePropertiesTemplateExpected = [\"test_field\"];",
															"",
															"    pm.test(\"Response fields\", function () {",
															"        pm.expect(responsePropertiesMainActual).to.have.deep.members(responsePropertiesMainExpected);",
															"        pm.expect(responsePropertiesAvailabilityActual).to.have.deep.members(responsePropertiesAvailabilityExpected);",
															"        pm.expect(responsePropertiesTemplateActual).to.have.deep.members(responsePropertiesTemplateExpected);",
															"    });",
															"",
															"    delete update[\"~lastMutateAt\"];",
															"    delete update[\"~lastUpdateAt\"];",
															"    delete update[\"~signature\"];",
															"    delete update[\"~firstUpdateAt\"];",
															"",
															"    const postman_table_name = pm.environment.get(\"table\");",
															"    const postman_document_id = pm.environment.get(\"document_id\");",
															"    const postman_document_id_1 = pm.environment.get(\"document_id1\");",
															"   ",
															"    const responseValuesExpected = {",
															"        \"~deleted\":false,",
															"        \"~id\":postman_document_id,",
															"        \"~table\":postman_table_name,",
															"        \"~version\":1,",
															"        \"availability\":{",
															"            \"facade\":false,",
															"            \"placement\":\"ugc_global:ugc\"",
															"        },",
															"        \"client\":\"iuliia_customer\",",
															"        \"id\":1,",
															"        \"name\":postman_table_name,",
															"        \"template\":{",
															"            \"test_field\":\"test_value_of_field\"",
															"        },",
															"        \"test_field\":\"postman\",",
															"        \"type\":\"create_table_test\"",
															"    };",
															"",
															"    const responseValuesExpected1 = {",
															"        ...responseValuesExpected,",
															"        \"~id\": postman_document_id_1",
															"    };",
															"",
															"    pm.test(\"Response values \", function () {",
															"        pm.expect(JSON.stringify(update)).to.be.deep.oneOf([JSON.stringify(responseValuesExpected), JSON.stringify(responseValuesExpected1)]);",
															"    });",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}?APIKey={{api_key}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}"
													],
													"query": [
														{
															"key": "from",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "limit",
															"value": "10",
															"disabled": true
														},
														{
															"key": "includeDeletes",
															"value": "false",
															"disabled": true
														},
														{
															"key": "consistency",
															"value": "STRONG",
															"disabled": true
														},
														{
															"key": "debug",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "APIKey",
															"value": "{{api_key}}",
															"description": "(Required) "
														}
													]
												},
												"description": "Retrieves a list of content items in a particular table.  To retrieve <em>all</em> items in a table set the\n limit param to a very large value (eg. Long.MAX_VALUE), but for large tables be sure your client can stream the\n results without exhausting all available memory."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table?from=<string>&limit=10&includeDeletes=false&consistency=STRONG&debug=<string>&APIKey=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table"
															],
															"query": [
																{
																	"key": "from",
																	"value": "<string>"
																},
																{
																	"key": "limit",
																	"value": "10"
																},
																{
																	"key": "includeDeletes",
																	"value": "false"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "debug",
																	"value": "<string>"
																},
																{
																	"key": "APIKey",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										},
										{
											"name": "Retrieves a list of content items without deleted in a particular table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"There is only one element returned\", function () {",
															"    pm.expect(jsonData.length).eql(1);",
															"});",
															"",
															"jsonData = jsonData[0];",
															"var responsePropertiesMainActual = Object.keys(jsonData);",
															"var responsePropertiesAvailabilityActual = Object.keys(jsonData.availability);",
															"var responsePropertiesTemplateActual = Object.keys(jsonData.template);",
															"",
															"var responsePropertiesMainExpected = [\"availability\",\"id\",\"name\",\"template\",\"test_field\",\"~table\",\"~version\",\"~lastMutateAt\",\"~deleted\",\"~lastUpdateAt\",\"~id\",\"client\",\"~signature\",\"type\",\"~firstUpdateAt\"];",
															"var responsePropertiesAvailabilityExpected = [\"facade\",\"placement\"];",
															"var responsePropertiesTemplateExpected = [\"test_field\"];",
															"",
															"pm.test(\"Response fields\", function () {",
															"    pm.expect(responsePropertiesMainActual).to.have.deep.members(responsePropertiesMainExpected);",
															"    pm.expect(responsePropertiesAvailabilityActual).to.have.deep.members(responsePropertiesAvailabilityExpected);",
															"    pm.expect(responsePropertiesTemplateActual).to.have.deep.members(responsePropertiesTemplateExpected);",
															"});",
															"",
															"delete jsonData[\"~lastMutateAt\"];",
															"delete jsonData[\"~lastUpdateAt\"];",
															"delete jsonData[\"~signature\"];",
															"delete jsonData[\"~firstUpdateAt\"];",
															"",
															"const postman_table_name = pm.environment.get(\"table\");",
															"const postman_document_id = pm.environment.get(\"document_id\");",
															"",
															"var responseValuesExpected = {",
															"    \"~deleted\":false,",
															"    \"~id\":postman_document_id,",
															"    \"~table\":postman_table_name,",
															"    \"~version\":1,",
															"    \"availability\":{",
															"        \"facade\":false,",
															"        \"placement\":\"ugc_global:ugc\"",
															"    },",
															"    \"client\":\"iuliia_customer\",",
															"    \"id\":1,",
															"    \"name\":postman_table_name,",
															"    \"template\":{",
															"        \"test_field\":\"test_value_of_field\"",
															"    },",
															"    \"test_field\":\"postman\",",
															"    \"type\":\"create_table_test\"",
															"}",
															"",
															"pm.test(\"Response values \", function () {",
															"    pm.expect(jsonData).to.eql(responseValuesExpected);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}?includeDeletes=false&APIKey={{api_key}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}"
													],
													"query": [
														{
															"key": "from",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "limit",
															"value": "10",
															"disabled": true
														},
														{
															"key": "includeDeletes",
															"value": "false"
														},
														{
															"key": "consistency",
															"value": "STRONG",
															"disabled": true
														},
														{
															"key": "debug",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "APIKey",
															"value": "{{api_key}}",
															"description": "(Required) "
														}
													]
												},
												"description": "Retrieves a list of content items in a particular table.  To retrieve <em>all</em> items in a table set the\n limit param to a very large value (eg. Long.MAX_VALUE), but for large tables be sure your client can stream the\n results without exhausting all available memory."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table?from=<string>&limit=10&includeDeletes=false&consistency=STRONG&debug=<string>&APIKey=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table"
															],
															"query": [
																{
																	"key": "from",
																	"value": "<string>"
																},
																{
																	"key": "limit",
																	"value": "10"
																},
																{
																	"key": "includeDeletes",
																	"value": "false"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "debug",
																	"value": "<string>"
																},
																{
																	"key": "APIKey",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										},
										{
											"name": "Drops a table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "comment:'table_removal'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is dropped"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									],
									"description": "Request with api-key which has  sor|read|{table} permission to the table which exists returns: List of items in the table (deleted items are not included in the result)"
								},
								{
									"name": "TC: List of sorted/unsorted items from table, including deleted items",
									"item": [
										{
											"name": "Creates table /sor/1/_table/{table}",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"postman.setEnvironmentVariable('table', 'table_'+uuid.v4());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "placement:'ugc_global:ugc'"
														},
														{
															"key": "audit",
															"value": "comment:'initial+provisioning'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is created"
											},
											"response": []
										},
										{
											"name": "Creates/Updates content in datastore /sor/1/{table}/{key}",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\",\"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"postman.setEnvironmentVariable('auditValue', 'comment:\\'auditValue+'",
															" + pm.variables.replaceIn('{{$randomInt}}') + '\\'' );",
															"postman.setEnvironmentVariable('document_id', 'document_id_' + uuid.v4());",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n        \"name\": \"{{table}}\",\n        \"id\": 4,\n        \"template\": {\n            \"test_field\": \"test_value_of_field_4\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_global:ugc\",\n            \"facade\": false\n        }\n    }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?audit={{auditValue}}&consistency={{write_consistency_weak}}&tag=postman&debug=true",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "{{auditValue}}"
														},
														{
															"key": "changeId",
															"value": "{{changeId}}",
															"disabled": true
														},
														{
															"key": "consistency",
															"value": "{{write_consistency_weak}}"
														},
														{
															"key": "tag",
															"value": "postman"
														},
														{
															"key": "debug",
															"value": "true"
														}
													]
												},
												"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
											},
											"response": []
										},
										{
											"name": "Creates/Updates content in datastore /sor/1/{table}/{key}",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\",\"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"postman.setEnvironmentVariable('auditValue', 'comment:\\'auditValue+'",
															" + pm.variables.replaceIn('{{$randomInt}}') + '\\'' );",
															"postman.setEnvironmentVariable('document_id1', 'document_id_' + uuid.v4());",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n        \"name\": \"{{table}}\",\n        \"id\": 3,\n        \"template\": {\n            \"test_field\": \"test_value_of_field_3\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_global:ugc\",\n            \"facade\": false\n        }\n    }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id1}}?audit={{auditValue}}&consistency={{write_consistency_weak}}&tag=postman&debug=true",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id1}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "{{auditValue}}"
														},
														{
															"key": "changeId",
															"value": "{{changeId}}",
															"disabled": true
														},
														{
															"key": "consistency",
															"value": "{{write_consistency_weak}}"
														},
														{
															"key": "tag",
															"value": "postman"
														},
														{
															"key": "debug",
															"value": "true"
														}
													]
												},
												"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
											},
											"response": []
										},
										{
											"name": "Creates/Updates content in datastore /sor/1/{table}/{key}",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\",\"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"postman.setEnvironmentVariable('auditValue', 'comment:\\'auditValue+'",
															" + pm.variables.replaceIn('{{$randomInt}}') + '\\'' );",
															"postman.setEnvironmentVariable('document_id2', 'document_id_' + uuid.v4());",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n        \"name\": \"{{table}}\",\n        \"id\": 2,\n        \"template\": {\n            \"test_field\": \"test_value_of_field_2\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_global:ugc\",\n            \"facade\": false\n        }\n    }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id2}}?audit={{auditValue}}&consistency={{write_consistency_weak}}&tag=postman&debug=true",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id2}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "{{auditValue}}"
														},
														{
															"key": "changeId",
															"value": "{{changeId}}",
															"disabled": true
														},
														{
															"key": "consistency",
															"value": "{{write_consistency_weak}}"
														},
														{
															"key": "tag",
															"value": "postman"
														},
														{
															"key": "debug",
															"value": "true"
														}
													]
												},
												"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
											},
											"response": []
										},
										{
											"name": "Creates/Updates content in datastore /sor/1/{table}/{key}",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\",\"debug\");",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"postman.setEnvironmentVariable('auditValue', 'comment:\\'auditValue+'",
															" + pm.variables.replaceIn('{{$randomInt}}') + '\\'' );",
															"postman.setEnvironmentVariable('document_id3', 'document_id_' + uuid.v4());",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n        \"name\": \"{{table}}\",\n        \"id\": 5,\n        \"template\": {\n            \"test_field\": \"test_value_of_field_5\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_global:ugc\",\n            \"facade\": false\n        }\n    }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id3}}?audit={{auditValue}}&consistency={{write_consistency_weak}}&tag=postman&debug=true",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id3}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "{{auditValue}}"
														},
														{
															"key": "changeId",
															"value": "{{changeId}}",
															"disabled": true
														},
														{
															"key": "consistency",
															"value": "{{write_consistency_weak}}"
														},
														{
															"key": "tag",
															"value": "postman"
														},
														{
															"key": "debug",
															"value": "true"
														}
													]
												},
												"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
											},
											"response": []
										},
										{
											"name": "Retrieves a list of unsorted content items in a particular table, debug set false, without includede deletes",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"var documentIds = [pm.environment.get(\"document_id2\"), pm.environment.get(\"document_id\"), pm.environment.get(\"document_id3\"), pm.environment.get(\"document_id1\")];",
															"",
															"pm.test(\"Number of returned Updates\", function () {",
															"    pm.expect(jsonData.length).to.eql(4);",
															"});",
															"",
															"documentIds.forEach((documentId) => {",
															"    var update = jsonData.find(update => update[\"~id\"] === documentId);",
															"    if (!update) {",
															"        pm.expect.fail(`Document '${documentId}' not found`);",
															"        return;",
															"    }",
															"",
															"    var responsePropertiesMainExpected = [\"availability\",\"id\",\"name\",\"template\",\"test_field\",\"~table\",\"~lastMutateAt\",\"~deleted\",\"~lastUpdateAt\",\"~id\",\"client\",\"~signature\",\"type\",\"~firstUpdateAt\"];",
															"    var responsePropertiesAvailabilityExpected = [\"facade\",\"placement\"];",
															"    var responsePropertiesTemplateExpected = [\"test_field\"];",
															"",
															"    pm.test(\"Response fields\", function () {",
															"        pm.expect(update).to.have.keys(responsePropertiesMainExpected);",
															"        pm.expect(update.availability).to.have.keys(responsePropertiesAvailabilityExpected);",
															"        pm.expect(update.template).to.have.keys(responsePropertiesTemplateExpected);",
															"    });",
															"",
															"    delete update[\"~lastMutateAt\"];",
															"    delete update[\"~lastUpdateAt\"];",
															"    delete update[\"~signature\"];",
															"    delete update[\"~firstUpdateAt\"];",
															"    delete update.id;",
															"    delete update.template.test_field;",
															"",
															"    var responseValuesExpected = [];",
															"    var postman_table_name = pm.environment.get(\"table\");",
															"    var responseValuesExpected = {",
															"        \"~deleted\": false,",
															"        \"~id\": documentId,",
															"        \"~table\": postman_table_name,",
															"        \"availability\": {",
															"            \"facade\": false,",
															"            \"placement\": \"ugc_global:ugc\"",
															"        },",
															"        \"client\": \"iuliia_customer\",",
															"        \"name\": postman_table_name,",
															"        \"template\": {},",
															"        \"test_field\": \"postman\",",
															"        \"type\": \"create_table_test\"",
															"    };",
															"",
															"    pm.test(\"Response values \", function () {",
															"        pm.expect(responseValuesExpected).to.eql(update);",
															"    });",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}?consistency={{write_consistency_weak}}&debug=false&APIKey={{api_key}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}"
													],
													"query": [
														{
															"key": "from",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "limit",
															"value": "10",
															"disabled": true
														},
														{
															"key": "includeDeletes",
															"value": "false",
															"disabled": true
														},
														{
															"key": "consistency",
															"value": "{{write_consistency_weak}}"
														},
														{
															"key": "debug",
															"value": "false"
														},
														{
															"key": "APIKey",
															"value": "{{api_key}}",
															"description": "(Required) "
														}
													]
												},
												"description": "Retrieves a list of content items in a particular table.  To retrieve <em>all</em> items in a table set the\n limit param to a very large value (eg. Long.MAX_VALUE), but for large tables be sure your client can stream the\n results without exhausting all available memory."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table?from=<string>&limit=10&includeDeletes=false&consistency=STRONG&debug=<string>&APIKey=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table"
															],
															"query": [
																{
																	"key": "from",
																	"value": "<string>"
																},
																{
																	"key": "limit",
																	"value": "10"
																},
																{
																	"key": "includeDeletes",
																	"value": "false"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "debug",
																	"value": "<string>"
																},
																{
																	"key": "APIKey",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										},
										{
											"name": "Delete content in datastore /sor/1/{table}/{key}",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n        \"name\": \"{{table}}\",\n        \"options\": {\n            \"placement\": \"ugc_eu:ugc\",\n            \"facades\": []\n        },\n        \"template\": {\n            \"test_field\": \"test_value_of_field\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_eu:ugc\",\n            \"facade\": false\n        }\n    }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id1}}?audit={{auditValue}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id1}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "{{auditValue}}"
														}
													]
												},
												"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
											},
											"response": []
										},
										{
											"name": "Retrieves a list of content items with includeDeletes is false in a particular table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Number of returned Updates\", function () {",
															"    pm.expect(jsonData.length).to.eql(3);",
															"});",
															"",
															"var postman_table_name = pm.environment.get(\"table\");",
															"var documentIds = [pm.environment.get(\"document_id2\"), pm.environment.get(\"document_id\"), pm.environment.get(\"document_id3\")];",
															"",
															"documentIds.forEach((documentId) => {",
															"    var update = jsonData.find(update => update[\"~id\"] === documentId);",
															"    if (!update) {",
															"        pm.expect.fail(`Document '${documentId}' not found`);",
															"        return;",
															"    }",
															"",
															"    var responsePropertiesMainExpected = [\"availability\",\"id\",\"name\",\"template\",\"test_field\",\"~table\",\"~version\",\"~lastMutateAt\",\"~deleted\",\"~lastUpdateAt\",\"~id\",\"client\",\"~signature\",\"type\",\"~firstUpdateAt\"];",
															"    var responsePropertiesAvailabilityExpected = [\"facade\",\"placement\"];",
															"    var responsePropertiesTemplateExpected = [\"test_field\"];",
															"",
															"    pm.test(\"Response fields\", function () {",
															"        pm.expect(update).to.have.keys(responsePropertiesMainExpected);",
															"        pm.expect(update.availability).to.have.keys(responsePropertiesAvailabilityExpected);",
															"        pm.expect(update.template).to.have.keys(responsePropertiesTemplateExpected);",
															"    });",
															"",
															"    delete update[\"~lastMutateAt\"];",
															"    delete update[\"~lastUpdateAt\"];",
															"    delete update[\"~signature\"];",
															"    delete update[\"~firstUpdateAt\"];",
															"    delete update[\"~version\"];",
															"    delete update.id;",
															"    delete update.template.test_field;",
															"",
															"    var responseValuesExpected = {",
															"            \"~deleted\": false,",
															"            \"~id\": documentId,",
															"            \"~table\": postman_table_name,",
															"            \"availability\": {",
															"                \"facade\": false,",
															"                \"placement\": \"ugc_global:ugc\"",
															"            },",
															"            \"client\": \"iuliia_customer\",",
															"            \"name\": postman_table_name,",
															"            \"template\": {},",
															"            \"test_field\": \"postman\",",
															"            \"type\": \"create_table_test\"",
															"        };",
															"",
															"    pm.test(\"Response values \", function () {",
															"        pm.expect(update).to.eql(responseValuesExpected);",
															"    });",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}?includeDeletes=false&APIKey={{api_key}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}"
													],
													"query": [
														{
															"key": "from",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "limit",
															"value": "10",
															"disabled": true
														},
														{
															"key": "includeDeletes",
															"value": "false"
														},
														{
															"key": "consistency",
															"value": "STRONG",
															"disabled": true
														},
														{
															"key": "debug",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "APIKey",
															"value": "{{api_key}}",
															"description": "(Required) "
														}
													]
												},
												"description": "Retrieves a list of content items in a particular table.  To retrieve <em>all</em> items in a table set the\n limit param to a very large value (eg. Long.MAX_VALUE), but for large tables be sure your client can stream the\n results without exhausting all available memory."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table?from=<string>&limit=10&includeDeletes=false&consistency=STRONG&debug=<string>&APIKey=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table"
															],
															"query": [
																{
																	"key": "from",
																	"value": "<string>"
																},
																{
																	"key": "limit",
																	"value": "10"
																},
																{
																	"key": "includeDeletes",
																	"value": "false"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "debug",
																	"value": "<string>"
																},
																{
																	"key": "APIKey",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										},
										{
											"name": "Retrieves a list of content items with includeDeletes is true, debug is false in a particular table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Number of returned Updates\", function () {",
															"    pm.expect(jsonData.length).to.eql(4);",
															"});",
															"",
															"var postman_table_name = pm.environment.get(\"table\");",
															"var documentIds = [pm.environment.get(\"document_id2\"), pm.environment.get(\"document_id\"), pm.environment.get(\"document_id3\")];",
															"",
															"documentIds.forEach((documentId) => {",
															"    var update = jsonData.find(update => update[\"~id\"] === documentId);",
															"    if (!update) {",
															"        pm.expect.fail(`Document '${documentId}' not found`);",
															"        return;",
															"    }",
															"",
															"    var responsePropertiesMainExpected = [\"availability\",\"id\",\"name\",\"template\",\"test_field\",\"~table\",\"~version\",\"~lastMutateAt\",\"~deleted\",\"~lastUpdateAt\",\"~id\",\"client\",\"~signature\",\"type\",\"~firstUpdateAt\"];",
															"    var responsePropertiesAvailabilityExpected = [\"facade\",\"placement\"];",
															"    var responsePropertiesTemplateExpected = [\"test_field\"];",
															"",
															"    pm.test(\"Response fields\", function () {",
															"        pm.expect(update).to.have.keys(responsePropertiesMainExpected);",
															"        pm.expect(update.availability).to.have.keys(responsePropertiesAvailabilityExpected);",
															"        pm.expect(update.template).to.have.keys(responsePropertiesTemplateExpected);",
															"    });",
															"",
															"    delete update[\"~lastMutateAt\"];",
															"    delete update[\"~lastUpdateAt\"];",
															"    delete update[\"~signature\"];",
															"    delete update[\"~firstUpdateAt\"];",
															"    delete update[\"~version\"];",
															"    delete update.id;",
															"    delete update.template.test_field;",
															"",
															"    var responseValuesExpected = {",
															"            \"~deleted\": false,",
															"            \"~id\": documentId,",
															"            \"~table\": postman_table_name,",
															"            \"availability\": {",
															"                \"facade\": false,",
															"                \"placement\": \"ugc_global:ugc\"",
															"            },",
															"            \"client\": \"iuliia_customer\",",
															"            \"name\": postman_table_name,",
															"            \"template\": {},",
															"            \"test_field\": \"postman\",",
															"            \"type\": \"create_table_test\"",
															"        };",
															"",
															"    pm.test(\"Response values \", function () {",
															"        pm.expect(update).to.eql(responseValuesExpected);",
															"    });",
															"});",
															"",
															"pm.test(\"Deleted update verification\", function () {",
															"    var postman_document_id = pm.environment.get(\"document_id1\");",
															"    var update = jsonData.find(update => update[\"~id\"] === postman_document_id);",
															"    ",
															"    pm.test(\"Response fields\", function () {",
															"        var responsePropertiesExpected = [\"~version\",\"~signature\",\"~firstUpdateAt\",\"~lastUpdateAt\",\"~lastMutateAt\",\"client\",\"test_field\",\"type\",\"~id\",\"~table\",\"~deleted\"];",
															"        pm.expect(update).to.have.keys(responsePropertiesExpected);",
															"    });",
															"",
															"    delete update[\"~version\"];",
															"    delete update[\"~signature\"];",
															"    delete update[\"~firstUpdateAt\"];",
															"    delete update[\"~lastUpdateAt\"];",
															"    delete update[\"~lastMutateAt\"];",
															"    ",
															"    var responseValuesExpected = {",
															"        \"client\": \"iuliia_customer\",",
															"        \"test_field\": \"postman\",",
															"        \"type\": \"create_table_test\",",
															"        \"~id\": postman_document_id,",
															"        \"~table\": postman_table_name,",
															"        \"~deleted\": true,",
															"    };",
															"",
															"    pm.test(\"Response values \", function () {",
															"        pm.expect(update).to.eql(responseValuesExpected);",
															"    });",
															"}); ",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}?includeDeletes=true&debug=false&APIKey={{api_key}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}"
													],
													"query": [
														{
															"key": "from",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "limit",
															"value": "10",
															"disabled": true
														},
														{
															"key": "includeDeletes",
															"value": "true"
														},
														{
															"key": "consistency",
															"value": "STRONG",
															"disabled": true
														},
														{
															"key": "debug",
															"value": "false"
														},
														{
															"key": "APIKey",
															"value": "{{api_key}}",
															"description": "(Required) "
														}
													]
												},
												"description": "Retrieves a list of content items in a particular table.  To retrieve <em>all</em> items in a table set the\n limit param to a very large value (eg. Long.MAX_VALUE), but for large tables be sure your client can stream the\n results without exhausting all available memory."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table?from=<string>&limit=10&includeDeletes=false&consistency=STRONG&debug=<string>&APIKey=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table"
															],
															"query": [
																{
																	"key": "from",
																	"value": "<string>"
																},
																{
																	"key": "limit",
																	"value": "10"
																},
																{
																	"key": "includeDeletes",
																	"value": "false"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "debug",
																	"value": "<string>"
																},
																{
																	"key": "APIKey",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										},
										{
											"name": "Retrieves a list of sorted content items with includeDeletes is true, debug is true in a particular table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Number of returned Updates\", function () {",
															"    pm.expect(jsonData.length).to.eql(4);",
															"});",
															"",
															"var postman_table_name = pm.environment.get(\"table\");",
															"var documentIds = [pm.environment.get(\"document_id2\"), pm.environment.get(\"document_id\"), pm.environment.get(\"document_id3\")];",
															"",
															"documentIds.forEach((documentId) => {",
															"    var update = jsonData.find(update => update[\"~id\"] === documentId);",
															"    if (!update) {",
															"        pm.expect.fail(`Document '${documentId}' not found`);",
															"        return;",
															"    }",
															"",
															"    var responsePropertiesMainExpected = [\"availability\",\"id\",\"name\",\"template\",\"test_field\",\"~table\",\"~version\",\"~lastMutateAt\",\"~deleted\",\"~lastUpdateAt\",\"~id\",\"client\",\"~signature\",\"type\",\"~firstUpdateAt\"];",
															"    var responsePropertiesAvailabilityExpected = [\"facade\",\"placement\"];",
															"    var responsePropertiesTemplateExpected = [\"test_field\"];",
															"",
															"    pm.test(\"Response fields\", function () {",
															"        pm.expect(update).to.have.keys(responsePropertiesMainExpected);",
															"        pm.expect(update.availability).to.have.keys(responsePropertiesAvailabilityExpected);",
															"        pm.expect(update.template).to.have.keys(responsePropertiesTemplateExpected);",
															"    });",
															"",
															"    delete update[\"~lastMutateAt\"];",
															"    delete update[\"~lastUpdateAt\"];",
															"    delete update[\"~signature\"];",
															"    delete update[\"~firstUpdateAt\"];",
															"    delete update[\"~version\"];",
															"    delete update.id;",
															"    delete update.template.test_field;",
															"",
															"    var responseValuesExpected = {",
															"            \"~deleted\": false,",
															"            \"~id\": documentId,",
															"            \"~table\": postman_table_name,",
															"            \"availability\": {",
															"                \"facade\": false,",
															"                \"placement\": \"ugc_global:ugc\"",
															"            },",
															"            \"client\": \"iuliia_customer\",",
															"            \"name\": postman_table_name,",
															"            \"template\": {},",
															"            \"test_field\": \"postman\",",
															"            \"type\": \"create_table_test\"",
															"        };",
															"",
															"    pm.test(\"Response values \", function () {",
															"        pm.expect(update).to.eql(responseValuesExpected);",
															"    });",
															"});",
															"",
															"pm.test(\"Deleted update verification\", function () {",
															"    var postman_document_id = pm.environment.get(\"document_id1\");",
															"    var update = jsonData.find(update => update[\"~id\"] === postman_document_id);",
															"    ",
															"    pm.test(\"Response fields\", function () {",
															"        var responsePropertiesExpected = [\"~version\",\"~signature\",\"~firstUpdateAt\",\"~lastUpdateAt\",\"~lastMutateAt\",\"client\",\"test_field\",\"type\",\"~id\",\"~table\",\"~deleted\"];",
															"        pm.expect(update).to.have.keys(responsePropertiesExpected);",
															"    });",
															"",
															"    pm.test(\"Fields sequence verification\", function () {",
															"        var keysWithoutSorting = [\"~deleted\",\"~firstUpdateAt\",\"~id\",\"~lastMutateAt\",\"~lastUpdateAt\",\"~signature\",\"~table\",\"~version\",\"client\",\"test_field\",\"type\"];",
															"        pm.expect(Object.keys(update)).to.eql(keysWithoutSorting);",
															"    });",
															"",
															"    delete update[\"~version\"];",
															"    delete update[\"~signature\"];",
															"    delete update[\"~firstUpdateAt\"];",
															"    delete update[\"~lastUpdateAt\"];",
															"    delete update[\"~lastMutateAt\"];",
															"    ",
															"    var responseValuesExpected = {",
															"        \"client\": \"iuliia_customer\",",
															"        \"test_field\": \"postman\",",
															"        \"type\": \"create_table_test\",",
															"        \"~id\": postman_document_id,",
															"        \"~table\": postman_table_name,",
															"        \"~deleted\": true,",
															"    };",
															"",
															"    pm.test(\"Response values \", function () {",
															"        pm.expect(update).to.eql(responseValuesExpected);",
															"    });",
															"}); ",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}?includeDeletes=true&debug=true&APIKey={{api_key}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}"
													],
													"query": [
														{
															"key": "from",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "limit",
															"value": "10",
															"disabled": true
														},
														{
															"key": "includeDeletes",
															"value": "true"
														},
														{
															"key": "consistency",
															"value": "STRONG",
															"disabled": true
														},
														{
															"key": "debug",
															"value": "true"
														},
														{
															"key": "APIKey",
															"value": "{{api_key}}",
															"description": "(Required) "
														}
													]
												},
												"description": "Retrieves a list of content items in a particular table.  To retrieve <em>all</em> items in a table set the\n limit param to a very large value (eg. Long.MAX_VALUE), but for large tables be sure your client can stream the\n results without exhausting all available memory."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table?from=<string>&limit=10&includeDeletes=false&consistency=STRONG&debug=<string>&APIKey=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table"
															],
															"query": [
																{
																	"key": "from",
																	"value": "<string>"
																},
																{
																	"key": "limit",
																	"value": "10"
																},
																{
																	"key": "includeDeletes",
																	"value": "false"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "debug",
																	"value": "<string>"
																},
																{
																	"key": "APIKey",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										},
										{
											"name": "Retrieves a list of content items with includeDeletes is true in a particular table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Number of returned Updates\", function () {",
															"    pm.expect(jsonData.length).to.eql(4);",
															"});",
															"",
															"var postman_table_name = pm.environment.get(\"table\");",
															"var documentIds = [pm.environment.get(\"document_id2\"), pm.environment.get(\"document_id\"), pm.environment.get(\"document_id3\")];",
															"",
															"documentIds.forEach((documentId) => {",
															"    var update = jsonData.find(update => update[\"~id\"] === documentId);",
															"    if (!update) {",
															"        pm.expect.fail(`Document '${documentId}' not found`);",
															"        return;",
															"    }",
															"",
															"    var responsePropertiesMainExpected = [\"availability\",\"id\",\"name\",\"template\",\"test_field\",\"~table\",\"~version\",\"~lastMutateAt\",\"~deleted\",\"~lastUpdateAt\",\"~id\",\"client\",\"~signature\",\"type\",\"~firstUpdateAt\"];",
															"    var responsePropertiesAvailabilityExpected = [\"facade\",\"placement\"];",
															"    var responsePropertiesTemplateExpected = [\"test_field\"];",
															"",
															"    pm.test(\"Response fields\", function () {",
															"        pm.expect(update).to.have.keys(responsePropertiesMainExpected);",
															"        pm.expect(update.availability).to.have.keys(responsePropertiesAvailabilityExpected);",
															"        pm.expect(update.template).to.have.keys(responsePropertiesTemplateExpected);",
															"    });",
															"",
															"    delete update[\"~lastMutateAt\"];",
															"    delete update[\"~lastUpdateAt\"];",
															"    delete update[\"~signature\"];",
															"    delete update[\"~firstUpdateAt\"];",
															"    delete update[\"~version\"];",
															"    delete update.id;",
															"    delete update.template.test_field;",
															"",
															"    var responseValuesExpected = {",
															"            \"~deleted\": false,",
															"            \"~id\": documentId,",
															"            \"~table\": postman_table_name,",
															"            \"availability\": {",
															"                \"facade\": false,",
															"                \"placement\": \"ugc_global:ugc\"",
															"            },",
															"            \"client\": \"iuliia_customer\",",
															"            \"name\": postman_table_name,",
															"            \"template\": {},",
															"            \"test_field\": \"postman\",",
															"            \"type\": \"create_table_test\"",
															"        };",
															"",
															"    pm.test(\"Response values \", function () {",
															"        pm.expect(update).to.eql(responseValuesExpected);",
															"    });",
															"});",
															"",
															"pm.test(\"Deleted update verification\", function () {",
															"    var postman_document_id = pm.environment.get(\"document_id1\");",
															"    var update = jsonData.find(update => update[\"~id\"] === postman_document_id);",
															"    ",
															"    pm.test(\"Response fields\", function () {",
															"        var responsePropertiesExpected = [\"~version\",\"~signature\",\"~firstUpdateAt\",\"~lastUpdateAt\",\"~lastMutateAt\",\"client\",\"test_field\",\"type\",\"~id\",\"~table\",\"~deleted\"];",
															"        pm.expect(update).to.have.keys(responsePropertiesExpected);",
															"    });",
															"",
															"    delete update[\"~version\"];",
															"    delete update[\"~signature\"];",
															"    delete update[\"~firstUpdateAt\"];",
															"    delete update[\"~lastUpdateAt\"];",
															"    delete update[\"~lastMutateAt\"];",
															"    ",
															"    var responseValuesExpected = {",
															"        \"client\": \"iuliia_customer\",",
															"        \"test_field\": \"postman\",",
															"        \"type\": \"create_table_test\",",
															"        \"~id\": postman_document_id,",
															"        \"~table\": postman_table_name,",
															"        \"~deleted\": true,",
															"    };",
															"",
															"    pm.test(\"Response values \", function () {",
															"        pm.expect(update).to.eql(responseValuesExpected);",
															"    });",
															"}); ",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}?includeDeletes=true&APIKey={{api_key}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}"
													],
													"query": [
														{
															"key": "from",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "limit",
															"value": "10",
															"disabled": true
														},
														{
															"key": "includeDeletes",
															"value": "true"
														},
														{
															"key": "consistency",
															"value": "STRONG",
															"disabled": true
														},
														{
															"key": "debug",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "APIKey",
															"value": "{{api_key}}",
															"description": "(Required) "
														}
													]
												},
												"description": "Retrieves a list of content items in a particular table.  To retrieve <em>all</em> items in a table set the\n limit param to a very large value (eg. Long.MAX_VALUE), but for large tables be sure your client can stream the\n results without exhausting all available memory."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table?from=<string>&limit=10&includeDeletes=false&consistency=STRONG&debug=<string>&APIKey=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table"
															],
															"query": [
																{
																	"key": "from",
																	"value": "<string>"
																},
																{
																	"key": "limit",
																	"value": "10"
																},
																{
																	"key": "includeDeletes",
																	"value": "false"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "debug",
																	"value": "<string>"
																},
																{
																	"key": "APIKey",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										},
										{
											"name": "Drops a table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "comment:'table_removal'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is dropped"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									],
									"description": "Request with api-key which has  sor|read|{table} permission to the table which exists returns: List of items in the table (deleted items are not included in the result)"
								},
								{
									"name": "TC: List of items from table, limited by limit param",
									"item": [
										{
											"name": "Creates table /sor/1/_table/{table}",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"postman.setEnvironmentVariable('table', 'table_'+uuid.v4());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "placement:'ugc_global:ugc'"
														},
														{
															"key": "audit",
															"value": "comment:'initial+provisioning'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is created"
											},
											"response": []
										},
										{
											"name": "Creates/Updates content in datastore /sor/1/{table}/{key}",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"postman.setEnvironmentVariable('auditValue', 'comment:\\'auditValue+'",
															" + pm.variables.replaceIn('{{$randomInt}}') + '\\'' );",
															"postman.setEnvironmentVariable('document_id', 'document_id_' + uuid.v4());",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n        \"name\": \"{{table}}\",\n        \"id\": 4,\n        \"template\": {\n            \"test_field\": \"test_value_of_field_4\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_global:ugc\",\n            \"facade\": false\n        }\n    }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?audit={{auditValue}}&consistency={{write_consistency_weak}}&tag=postman&debug=true",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "{{auditValue}}"
														},
														{
															"key": "changeId",
															"value": "{{changeId}}",
															"disabled": true
														},
														{
															"key": "consistency",
															"value": "{{write_consistency_weak}}"
														},
														{
															"key": "tag",
															"value": "postman"
														},
														{
															"key": "debug",
															"value": "true"
														}
													]
												},
												"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
											},
											"response": []
										},
										{
											"name": "Creates/Updates content in datastore /sor/1/{table}/{key}",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"postman.setEnvironmentVariable('auditValue', 'comment:\\'auditValue+'",
															" + pm.variables.replaceIn('{{$randomInt}}') + '\\'' );",
															"postman.setEnvironmentVariable('document_id1', 'document_id_' + uuid.v4());",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n        \"name\": \"{{table}}\",\n        \"id\": 3,\n        \"template\": {\n            \"test_field\": \"test_value_of_field_3\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_global:ugc\",\n            \"facade\": false\n        }\n    }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id1}}?audit={{auditValue}}&consistency={{write_consistency_weak}}&tag=postman&debug=true",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id1}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "{{auditValue}}"
														},
														{
															"key": "changeId",
															"value": "{{changeId}}",
															"disabled": true
														},
														{
															"key": "consistency",
															"value": "{{write_consistency_weak}}"
														},
														{
															"key": "tag",
															"value": "postman"
														},
														{
															"key": "debug",
															"value": "true"
														}
													]
												},
												"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
											},
											"response": []
										},
										{
											"name": "Creates/Updates content in datastore /sor/1/{table}/{key}",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"postman.setEnvironmentVariable('auditValue', 'comment:\\'auditValue+'",
															" + pm.variables.replaceIn('{{$randomInt}}') + '\\'' );",
															"postman.setEnvironmentVariable('document_id2', 'document_id_' + uuid.v4());",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n        \"name\": \"{{table}}\",\n        \"id\": 2,\n        \"template\": {\n            \"test_field\": \"test_value_of_field_2\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_global:ugc\",\n            \"facade\": false\n        }\n    }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id2}}?audit={{auditValue}}&consistency={{write_consistency_weak}}&tag=postman&debug=true",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id2}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "{{auditValue}}"
														},
														{
															"key": "changeId",
															"value": "{{changeId}}",
															"disabled": true
														},
														{
															"key": "consistency",
															"value": "{{write_consistency_weak}}"
														},
														{
															"key": "tag",
															"value": "postman"
														},
														{
															"key": "debug",
															"value": "true"
														}
													]
												},
												"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
											},
											"response": []
										},
										{
											"name": "Creates/Updates content in datastore /sor/1/{table}/{key}",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\", \"debug\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"postman.setEnvironmentVariable('auditValue', 'comment:\\'auditValue+'",
															" + pm.variables.replaceIn('{{$randomInt}}') + '\\'' );",
															"postman.setEnvironmentVariable('document_id3', 'document_id_' + uuid.v4());",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n        \"name\": \"{{table}}\",\n        \"id\": 5,\n        \"template\": {\n            \"test_field\": \"test_value_of_field_5\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_global:ugc\",\n            \"facade\": false\n        }\n    }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id3}}?audit={{auditValue}}&consistency={{write_consistency_weak}}&tag=postman&debug=true",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id3}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "{{auditValue}}"
														},
														{
															"key": "changeId",
															"value": "{{changeId}}",
															"disabled": true
														},
														{
															"key": "consistency",
															"value": "{{write_consistency_weak}}"
														},
														{
															"key": "tag",
															"value": "postman"
														},
														{
															"key": "debug",
															"value": "true"
														}
													]
												},
												"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
											},
											"response": []
										},
										{
											"name": "Retrieves a unsorted list of content items in a particular table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															" pm.test(\"Number of returned updates\", function () {",
															"     pm.expect(jsonData.length).to.be.eql(3);",
															" });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}?limit=3&includeDeletes=true&consistency={{write_consistency_weak}}&debug=false&APIKey={{api_key}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}"
													],
													"query": [
														{
															"key": "from",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "limit",
															"value": "3"
														},
														{
															"key": "includeDeletes",
															"value": "true"
														},
														{
															"key": "consistency",
															"value": "{{write_consistency_weak}}"
														},
														{
															"key": "debug",
															"value": "false"
														},
														{
															"key": "APIKey",
															"value": "{{api_key}}",
															"description": "(Required) "
														}
													]
												},
												"description": "Retrieves a list of content items in a particular table.  To retrieve <em>all</em> items in a table set the\n limit param to a very large value (eg. Long.MAX_VALUE), but for large tables be sure your client can stream the\n results without exhausting all available memory."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table?from=<string>&limit=10&includeDeletes=false&consistency=STRONG&debug=<string>&APIKey=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table"
															],
															"query": [
																{
																	"key": "from",
																	"value": "<string>"
																},
																{
																	"key": "limit",
																	"value": "10"
																},
																{
																	"key": "includeDeletes",
																	"value": "false"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "debug",
																	"value": "<string>"
																},
																{
																	"key": "APIKey",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										},
										{
											"name": "Drops a table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "comment:'table_removal'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is dropped"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									],
									"description": "Request with api-key which has  sor|read|{table} permission to the table which exists returns: List of items in the table (deleted items are not included in the result)"
								},
								{
									"name": "TC: List of items from table, using from param",
									"item": [
										{
											"name": "Creates table /sor/1/_table/{table}",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"postman.setEnvironmentVariable('table', 'table_'+uuid.v4());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "placement:'ugc_global:ugc'"
														},
														{
															"key": "audit",
															"value": "comment:'initial+provisioning'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is created"
											},
											"response": []
										},
										{
											"name": "Creates/Updates content in datastore /sor/1/{table}/{key}",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body verification\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\",\"debug\")",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"postman.setEnvironmentVariable('auditValue', 'comment:\\'auditValue+'",
															" + pm.variables.replaceIn('{{$randomInt}}') + '\\'' );",
															"postman.setEnvironmentVariable('document_id', 'document_id_' + uuid.v4());",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n        \"name\": \"{{table}}\",\n        \"id\": 4,\n        \"template\": {\n            \"test_field\": \"test_value_of_field_4\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_global:ugc\",\n            \"facade\": false\n        }\n    }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id}}?audit={{auditValue}}&consistency={{write_consistency_weak}}&tag=postman&debug=true",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "{{auditValue}}"
														},
														{
															"key": "changeId",
															"value": "{{changeId}}",
															"disabled": true
														},
														{
															"key": "consistency",
															"value": "{{write_consistency_weak}}"
														},
														{
															"key": "tag",
															"value": "postman"
														},
														{
															"key": "debug",
															"value": "true"
														}
													]
												},
												"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
											},
											"response": []
										},
										{
											"name": "Creates/Updates content in datastore /sor/1/{table}/{key}",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body verification\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\",\"debug\")",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"postman.setEnvironmentVariable('auditValue', 'comment:\\'auditValue+'",
															" + pm.variables.replaceIn('{{$randomInt}}') + '\\'' );",
															"postman.setEnvironmentVariable('document_id1', 'document_id_' + uuid.v4());",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n        \"name\": \"{{table}}\",\n        \"id\": 3,\n        \"template\": {\n            \"test_field\": \"test_value_of_field_3\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_global:ugc\",\n            \"facade\": false\n        }\n    }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id1}}?audit={{auditValue}}&consistency={{write_consistency_weak}}&tag=postman&debug=true",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id1}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "{{auditValue}}"
														},
														{
															"key": "changeId",
															"value": "{{changeId}}",
															"disabled": true
														},
														{
															"key": "consistency",
															"value": "{{write_consistency_weak}}"
														},
														{
															"key": "tag",
															"value": "postman"
														},
														{
															"key": "debug",
															"value": "true"
														}
													]
												},
												"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
											},
											"response": []
										},
										{
											"name": "Creates/Updates content in datastore /sor/1/{table}/{key}",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body verification\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\",\"debug\")",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"postman.setEnvironmentVariable('auditValue', 'comment:\\'auditValue+'",
															" + pm.variables.replaceIn('{{$randomInt}}') + '\\'' );",
															"postman.setEnvironmentVariable('document_id2', 'document_id_' + uuid.v4());",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n        \"name\": \"{{table}}\",\n        \"id\": 2,\n        \"template\": {\n            \"test_field\": \"test_value_of_field_2\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_global:ugc\",\n            \"facade\": false\n        }\n    }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id2}}?audit={{auditValue}}&consistency={{write_consistency_weak}}&tag=postman&debug=true",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id2}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "{{auditValue}}"
														},
														{
															"key": "changeId",
															"value": "{{changeId}}",
															"disabled": true
														},
														{
															"key": "consistency",
															"value": "{{write_consistency_weak}}"
														},
														{
															"key": "tag",
															"value": "postman"
														},
														{
															"key": "debug",
															"value": "true"
														}
													]
												},
												"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
											},
											"response": []
										},
										{
											"name": "Creates/Updates content in datastore /sor/1/{table}/{key}",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body verification\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"success\",\"debug\")",
															"    pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
															"    pm.expect(pm.response.json().success).to.eql(true);",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"postman.setEnvironmentVariable('auditValue', 'comment:\\'auditValue+'",
															" + pm.variables.replaceIn('{{$randomInt}}') + '\\'' );",
															"postman.setEnvironmentVariable('document_id3', 'document_id_' + uuid.v4());",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n        \"name\": \"{{table}}\",\n        \"id\": 5,\n        \"template\": {\n            \"test_field\": \"test_value_of_field_5\"\n        },\n        \"availability\": {\n            \"placement\": \"ugc_global:ugc\",\n            \"facade\": false\n        }\n    }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}/{{document_id3}}?audit={{auditValue}}&consistency={{write_consistency_weak}}&tag=postman&debug=true",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}",
														"{{document_id3}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "{{auditValue}}"
														},
														{
															"key": "changeId",
															"value": "{{changeId}}",
															"disabled": true
														},
														{
															"key": "consistency",
															"value": "{{write_consistency_weak}}"
														},
														{
															"key": "tag",
															"value": "postman"
														},
														{
															"key": "debug",
															"value": "true"
														}
													]
												},
												"description": "\"Creates or replaces a piece of content in the data store.  Overwrites the old\\n\" +\n                    \" version of the content, if it exists.  Expects a literal JSON representation\\n\" +\n                    \" of the object.\""
											},
											"response": []
										},
										{
											"name": "Retrieves a unsorted list of content items in a particular table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"var postman_table_name = pm.environment.get(\"table\");",
															"",
															"jsonData.forEach(update => {",
															"    var responsePropertiesMainExpected = [\"availability\",\"id\",\"name\",\"template\",\"test_field\",\"~table\",\"~lastMutateAt\",\"~deleted\",\"~lastUpdateAt\",\"~id\",\"client\",\"~signature\",\"type\",\"~firstUpdateAt\"];",
															"    var responsePropertiesAvailabilityExpected = [\"facade\",\"placement\"];",
															"    var responsePropertiesTemplateExpected = [\"test_field\"];",
															"",
															"    pm.test(\"Response fields\", function () {",
															"        pm.expect(update).to.have.keys(responsePropertiesMainExpected);",
															"        pm.expect(update.availability).to.have.keys(responsePropertiesAvailabilityExpected);",
															"        pm.expect(update.template).to.have.keys(responsePropertiesTemplateExpected);",
															"    });",
															"",
															"    delete update[\"~lastMutateAt\"];",
															"    delete update[\"~lastUpdateAt\"];",
															"    delete update[\"~signature\"];",
															"    delete update[\"~firstUpdateAt\"];",
															"    delete update.id;",
															"    delete update.template.test_field;",
															"    delete update[\"~id\"];",
															"",
															"    var responseValuesExpected = {",
															"        \"~deleted\": false,",
															"        \"~table\": postman_table_name,",
															"        \"availability\": {",
															"            \"facade\": false,",
															"            \"placement\": \"ugc_global:ugc\"",
															"        },",
															"        \"client\": \"iuliia_customer\",",
															"        \"name\": postman_table_name,",
															"        \"template\": {},",
															"        \"test_field\": \"postman\",",
															"        \"type\": \"create_table_test\"",
															"    };",
															"",
															"    pm.test(\"Response values \", function () {",
															"        pm.expect(update).to.eql(responseValuesExpected);",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}?from=document_id_&limit=5&includeDeletes=true&consistency={{write_consistency_weak}}&debug=true&APIKey={{api_key}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}"
													],
													"query": [
														{
															"key": "from",
															"value": "document_id_"
														},
														{
															"key": "limit",
															"value": "5"
														},
														{
															"key": "includeDeletes",
															"value": "true"
														},
														{
															"key": "consistency",
															"value": "{{write_consistency_weak}}"
														},
														{
															"key": "debug",
															"value": "true"
														},
														{
															"key": "APIKey",
															"value": "{{api_key}}"
														}
													]
												},
												"description": "Retrieves a list of content items in a particular table.  To retrieve <em>all</em> items in a table set the\n limit param to a very large value (eg. Long.MAX_VALUE), but for large tables be sure your client can stream the\n results without exhausting all available memory."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table?from=<string>&limit=10&includeDeletes=false&consistency=STRONG&debug=<string>&APIKey=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table"
															],
															"query": [
																{
																	"key": "from",
																	"value": "<string>"
																},
																{
																	"key": "limit",
																	"value": "10"
																},
																{
																	"key": "includeDeletes",
																	"value": "false"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "debug",
																	"value": "<string>"
																},
																{
																	"key": "APIKey",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										},
										{
											"name": "Retrieves a unsorted list of content items in a particular table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"var postman_table_name = pm.environment.get(\"table\");",
															"    ",
															"    if (jsonData.length > 0) {",
															"        jsonData.forEach((update) => {",
															"        var responsePropertiesMainExpected = [\"availability\",\"id\",\"name\",\"template\",\"test_field\",\"~table\",\"~lastMutateAt\",\"~deleted\",\"~lastUpdateAt\",\"~id\",\"client\",\"~signature\",\"type\",\"~firstUpdateAt\"];",
															"        var responsePropertiesAvailabilityExpected = [\"facade\",\"placement\"];",
															"        var responsePropertiesTemplateExpected = [\"test_field\"];",
															"",
															"        pm.test(\"Response fields\", function () {",
															"            pm.expect(update).to.have.keys(responsePropertiesMainExpected);",
															"            pm.expect(update.availability).to.have.keys(responsePropertiesAvailabilityExpected);",
															"            pm.expect(update.template).to.have.keys(responsePropertiesTemplateExpected);",
															"        });",
															"",
															"        delete update[\"~lastMutateAt\"];",
															"        delete update[\"~lastUpdateAt\"];",
															"        delete update[\"~signature\"];",
															"        delete update[\"~firstUpdateAt\"];",
															"        delete update.id;",
															"        delete update[\"~id\"];",
															"        delete update.template.test_field;",
															"",
															"        var responseValuesExpected = {",
															"            \"~deleted\": false,",
															"            \"~table\": postman_table_name,",
															"            \"availability\": {",
															"                \"facade\": false,",
															"                \"placement\": \"ugc_global:ugc\"",
															"            },",
															"            \"client\": \"iuliia_customer\",",
															"            \"name\": postman_table_name,",
															"            \"template\": {},",
															"            \"test_field\": \"postman\",",
															"            \"type\": \"create_table_test\"",
															"        };",
															"",
															"        pm.test(\"Response values \", function () {",
															"            pm.expect(update).to.eql(responseValuesExpected);",
															"        });",
															"    });",
															"}",
															"",
															"",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}?from={{document_id1}}&limit=5&includeDeletes=true&consistency={{write_consistency_weak}}&debug=false&APIKey={{api_key}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}"
													],
													"query": [
														{
															"key": "from",
															"value": "{{document_id1}}"
														},
														{
															"key": "limit",
															"value": "5"
														},
														{
															"key": "includeDeletes",
															"value": "true"
														},
														{
															"key": "consistency",
															"value": "{{write_consistency_weak}}"
														},
														{
															"key": "debug",
															"value": "false"
														},
														{
															"key": "APIKey",
															"value": "{{api_key}}",
															"description": "(Required) "
														}
													]
												},
												"description": "Retrieves a list of content items in a particular table.  To retrieve <em>all</em> items in a table set the\n limit param to a very large value (eg. Long.MAX_VALUE), but for large tables be sure your client can stream the\n results without exhausting all available memory."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table?from=<string>&limit=10&includeDeletes=false&consistency=STRONG&debug=<string>&APIKey=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table"
															],
															"query": [
																{
																	"key": "from",
																	"value": "<string>"
																},
																{
																	"key": "limit",
																	"value": "10"
																},
																{
																	"key": "includeDeletes",
																	"value": "false"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "debug",
																	"value": "<string>"
																},
																{
																	"key": "APIKey",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										},
										{
											"name": "Drops a table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "comment:'table_removal'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is dropped"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									],
									"description": "Request with api-key which has  sor|read|{table} permission to the table which exists returns: List of items in the table (deleted items are not included in the result)"
								},
								{
									"name": "Retrieves a list of content items in a particular table.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.json()).to.eql({\"reason\":\"not authorized\"});",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-BV-Api-Key",
												"value": "{{api_key_no_rights}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/{{table}}?from=<string>&limit=10&includeDeletes=false&consistency=STRONG&debug=<string>&APIKey=<string>",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"{{table}}"
											],
											"query": [
												{
													"key": "from",
													"value": "<string>"
												},
												{
													"key": "limit",
													"value": "10"
												},
												{
													"key": "includeDeletes",
													"value": "false"
												},
												{
													"key": "consistency",
													"value": "STRONG"
												},
												{
													"key": "debug",
													"value": "<string>"
												},
												{
													"key": "APIKey",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										},
										"description": "Retrieves a list of content items in a particular table.  To retrieve <em>all</em> items in a table set the\n limit param to a very large value (eg. Long.MAX_VALUE), but for large tables be sure your client can stream the\n results without exhausting all available memory."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sor/1/:table?from=<string>&limit=10&includeDeletes=false&consistency=STRONG&debug=<string>&APIKey=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sor",
														"1",
														":table"
													],
													"query": [
														{
															"key": "from",
															"value": "<string>"
														},
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "includeDeletes",
															"value": "false"
														},
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "debug",
															"value": "<string>"
														},
														{
															"key": "APIKey",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "table"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										}
									]
								}
							]
						},
						{
							"name": "Imports an arbitrary size stream of deltas and/or JSON objects POST /sor/1/{table}",
							"item": [
								{
									"name": "TC: Request import an arbitrary size of stream of JSON",
									"item": [
										{
											"name": "Creates table /sor/1/_table/{table}",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"postman.setEnvironmentVariable('table', 'table_'+uuid.v4());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "placement:'ugc_global:ugc'"
														},
														{
															"key": "audit",
															"value": "comment:'initial+provisioning'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is created"
											},
											"response": []
										},
										{
											"name": "Imports an arbitrary size stream of deltas and/or JSON objects.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"postman.setEnvironmentVariable('id1', uuid.v4());",
															"postman.setEnvironmentVariable('id2', uuid.v4());",
															"postman.setEnvironmentVariable('id3', uuid.v4());",
															"postman.setEnvironmentVariable('id4', uuid.v4());",
															"postman.setEnvironmentVariable('id5', uuid.v4());",
															"postman.setEnvironmentVariable('id6', uuid.v4());",
															"postman.setEnvironmentVariable('id7', uuid.v4());",
															"postman.setEnvironmentVariable('id8', uuid.v4());",
															"postman.setEnvironmentVariable('id9', uuid.v4());",
															"postman.setEnvironmentVariable('id10', uuid.v4());",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-Api-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n         {\n            \"table\": \"{{table}}\",\n            \"~id\": \"{{id1}}\",\n            \"key\": \"demo1\",\n            \"delta\": \"{\\\"field1\\\":\\\"value1\\\",\\\"field2\\\":\\\"value2\\\",\\\"field3\\\":\\\"value3\\\"}\",\n            \"consistency\": \"STRONG\",\n            \"audit\": {\n              \"comment\": \"Adding demo1 document\"\n            }\n          },\n          {\n        \"table\": \"{{table}}\",\n        \"~id\": \"{{id2}}\",\n        \"key\": \"demo2\",\n        \"delta\": \"{\\\"field1\\\":\\\"value1.1\\\",\\\"field5\\\":\\\"value5\\\",\\\"field32\\\":\\\"value33\\\"}\",\n        \"consistency\": \"STRONG\",\n        \"audit\": {\n          \"comment\": \"Update and Add\"\n        }\n      },\n      {\n        \"table\": \"{{table}}\",\n        \"~id\": \"{{id3}}\",\n        \"key\": \"demo3\",\n        \"delta\": \"{\\\"owner\\\":\\\"test@mail.com\\\",\\\"description\\\":\\\"Data Team QA\\\",\\\"issued\\\":\\\"2015-04-20T18:18:18.425+0000\\\",\\\"roles\\\":[\\\"data-team-qa\\\"]}\",\n        \"consistency\": \"NO_DURABLE\",\n        \"audit\": {\n          \"comment\": \"re-import\"\n        }\n      },\n            {\n        \"table\": \"{{table}}\",\n        \"~id\": \"{{id4}}\",\n        \"key\": \"demo4\",\n        \"delta\": \"{\\\"owner\\\":\\\"test@mail.com\\\",\\\"description\\\":\\\"Data Team QA\\\",\\\"issued\\\":\\\"2015-04-20T18:18:18.425+0000\\\",\\\"roles\\\":[\\\"data-team-qa\\\"]}\",\n        \"consistency\": \"STRONG\",\n        \"audit\": {\n          \"comment\": \"re-import\"\n        }\n      },\n            {\n        \"table\": \"{{table}}\",\n        \"~id\": \"{{id5}}\",\n        \"key\": \"demo5\",\n        \"delta\": \"{\\\"owner\\\":\\\"test@mail.com\\\",\\\"description\\\":\\\"Data Team QA\\\",\\\"issued\\\":\\\"2015-04-20T18:18:18.425+0000\\\",\\\"roles\\\":[\\\"data-team-qa\\\"]}\",\n        \"consistency\": \"STRONG\",\n        \"audit\": {\n          \"comment\": \"re-import\"\n        }\n      },\n        {\n        \"table\": \"{{table}}\",\n        \"~id\": \"{{id6}}\",\n        \"key\": \"demo6\",\n        \"delta\": \"{\\\"owner\\\":\\\"test@mail.com\\\",\\\"description\\\":\\\"Data Team QA\\\",\\\"issued\\\":\\\"2015-04-20T18:18:18.425+0000\\\",\\\"roles\\\":[\\\"data-team-qa\\\"]}\",\n        \"consistency\": \"WEAK\",\n        \"audit\": {\n          \"comment\": \"re-import\"\n        }\n      },\n        {\n        \"table\": \"{{table}}\",\n        \"~id\": \"{{id7}}\",\n        \"key\": \"demo7\",\n        \"delta\": \"{\\\"owner\\\":\\\"test@mail.com\\\",\\\"description\\\":\\\"Data Team QA\\\",\\\"issued\\\":\\\"2015-04-20T18:18:18.425+0000\\\",\\\"roles\\\":[\\\"data-team-qa\\\"]}\",\n        \"consistency\": \"WEAK\",\n        \"audit\": {\n          \"comment\": \"re-import\"\n        }\n      },\n        {\n        \"table\": \"{{table}}\",\n        \"~id\": \"{{id8}}\",\n        \"key\": \"demo8\",\n        \"delta\": \"{\\\"owner\\\":\\\"test@mail.com\\\",\\\"description\\\":\\\"Data Team QA\\\",\\\"issued\\\":\\\"2015-04-20T18:18:18.425+0000\\\",\\\"roles\\\":[\\\"data-team-qa\\\"]}\",\n        \"consistency\": \"WEAK\",\n        \"audit\": {\n          \"comment\": \"re-import\"\n        }\n      },\n        {\n        \"table\": \"{{table}}\",\n        \"~id\": \"{{id9}}\",\n        \"key\": \"demo9\",\n        \"delta\": \"{\\\"owner\\\":\\\"test@mail.com\\\",\\\"description\\\":\\\"Data Team QA\\\",\\\"issued\\\":\\\"2015-04-20T18:18:18.425+0000\\\",\\\"roles\\\":[\\\"data-team-qa\\\"]}\",\n        \"consistency\": \"WEAK\",\n        \"audit\": {\n          \"comment\": \"re-import\"\n        }\n      },\n        {\n        \"table\": \"{{table}}\",\n        \"~id\": \"{{id10}}\",\n        \"key\": \"demo10\",\n        \"delta\": \"{\\\"owner\\\":\\\"test@mail.com\\\",\\\"description\\\":\\\"Data Team QA\\\",\\\"issued\\\":\\\"2015-04-20T18:18:18.425+0000\\\",\\\"roles\\\":[\\\"data-team-qa\\\"]}\",\n        \"consistency\": \"WEAK\",\n        \"audit\": {\n          \"comment\": \"re-import\"\n        }\n      }\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}?audit=comment:'imports+an+arbitrary+size'&consistency=STRONG&facade=false",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "993091dd-7751-11eb-b70c-496d0c9f0df0",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "comment:'imports+an+arbitrary+size'"
														},
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "facade",
															"value": "false"
														},
														{
															"key": "tag",
															"value": "<string>",
															"disabled": true
														}
													]
												},
												"description": " Imports an arbitrary size stream of deltas and/or JSON objects.  Two formats are supported: array syntax\n ('[' object ',' object ',' ... ']') and whitespace-separated objects (object whitespace object whitespace ...)\n Each piece of content must have a top-level \"~id\" attribute that determines the object key in the SoR."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table?changeId=<string>&audit=<string>&consistency=STRONG&facade=<string>&tag=<string>&tag=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>"
																},
																{
																	"key": "audit",
																	"value": "<string>"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "facade",
																	"value": "<string>"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Retrieves a list of content items in a particular table.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonBody = pm.response.json();",
															"",
															"if(jsonBody.length > 0) {",
															"    const postman_table_name = pm.environment.get(\"table\");",
															"",
															"    pm.test(\"Assert response body\", function () {",
															"        jsonBody.forEach(update => {",
															"            pm.expect(update).to.have.keys(\"~deleted\",\"~firstUpdateAt\",\"~id\",\"~lastMutateAt\",\"~lastUpdateAt\",\"~signature\",\"~table\",\"~version\",\"audit\",\"client\",\"consistency\",\"delta\",\"key\",\"table\",\"test_field\",\"type\");",
															"            pm.expect(update.audit).to.have.keys(\"comment\");",
															"            pm.expect(update[\"~table\"]).to.eql(postman_table_name);",
															"        });",
															"    });",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-BV-Api-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}?from=<string>&limit=10&includeDeletes=false&consistency=STRONG&debug=true&APIKey={{api_key}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}"
													],
													"query": [
														{
															"key": "from",
															"value": "<string>"
														},
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "includeDeletes",
															"value": "false"
														},
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "debug",
															"value": "true"
														},
														{
															"key": "APIKey",
															"value": "{{api_key}}",
															"description": "(Required) "
														}
													]
												},
												"description": "Retrieves a list of content items in a particular table.  To retrieve <em>all</em> items in a table set the\n limit param to a very large value (eg. Long.MAX_VALUE), but for large tables be sure your client can stream the\n results without exhausting all available memory."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table?from=<string>&limit=10&includeDeletes=false&consistency=STRONG&debug=<string>&APIKey=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table"
															],
															"query": [
																{
																	"key": "from",
																	"value": "<string>"
																},
																{
																	"key": "limit",
																	"value": "10"
																},
																{
																	"key": "includeDeletes",
																	"value": "false"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "debug",
																	"value": "<string>"
																},
																{
																	"key": "APIKey",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										},
										{
											"name": "Drops a table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "comment:'table_removal'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is dropped"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Request for not existing table",
									"item": [
										{
											"name": "Imports an arbitrary size stream of deltas and/or JSON objects.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"postman.setEnvironmentVariable('id1', uuid.v4());",
															"postman.setEnvironmentVariable('id2', uuid.v4());",
															"postman.setEnvironmentVariable('id3', uuid.v4());",
															"postman.setEnvironmentVariable('id4', uuid.v4());",
															"postman.setEnvironmentVariable('id5', uuid.v4());",
															"postman.setEnvironmentVariable('id6', uuid.v4());",
															"postman.setEnvironmentVariable('id7', uuid.v4());",
															"postman.setEnvironmentVariable('id8', uuid.v4());",
															"postman.setEnvironmentVariable('id9', uuid.v4());",
															"postman.setEnvironmentVariable('id10', uuid.v4());",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"message\":\"Unknown table: not_existing_table\",\"table\":\"not_existing_table\",\"suppressed\":[]});",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-Api-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n         {\n            \"table\": \"{{table}}\",\n            \"~id\": \"{{id1}}\",\n            \"key\": \"demo1\",\n            \"delta\": \"{\\\"field1\\\":\\\"value1\\\",\\\"field2\\\":\\\"value2\\\",\\\"field3\\\":\\\"value3\\\"}\",\n            \"consistency\": \"STRONG\",\n            \"audit\": {\n              \"comment\": \"Adding demo1 document\"\n            }\n          },\n          {\n        \"table\": \"{{table}}\",\n        \"~id\": \"{{id2}}\",\n        \"key\": \"demo2\",\n        \"delta\": \"{\\\"field1\\\":\\\"value1.1\\\",\\\"field5\\\":\\\"value5\\\",\\\"field32\\\":\\\"value33\\\"}\",\n        \"consistency\": \"STRONG\",\n        \"audit\": {\n          \"comment\": \"Update and Add\"\n        }\n      },\n      {\n        \"table\": \"{{table}}\",\n        \"~id\": \"{{id3}}\",\n        \"key\": \"demo3\",\n        \"delta\": \"{\\\"owner\\\":\\\"test@mail.com\\\",\\\"description\\\":\\\"Data Team QA\\\",\\\"issued\\\":\\\"2015-04-20T18:18:18.425+0000\\\",\\\"roles\\\":[\\\"data-team-qa\\\"]}\",\n        \"consistency\": \"NO_DURABLE\",\n        \"audit\": {\n          \"comment\": \"re-import\"\n        }\n      },\n            {\n        \"table\": \"{{table}}\",\n        \"~id\": \"{{id4}}\",\n        \"key\": \"demo4\",\n        \"delta\": \"{\\\"owner\\\":\\\"test@mail.com\\\",\\\"description\\\":\\\"Data Team QA\\\",\\\"issued\\\":\\\"2015-04-20T18:18:18.425+0000\\\",\\\"roles\\\":[\\\"data-team-qa\\\"]}\",\n        \"consistency\": \"STRONG\",\n        \"audit\": {\n          \"comment\": \"re-import\"\n        }\n      },\n            {\n        \"table\": \"{{table}}\",\n        \"~id\": \"{{id5}}\",\n        \"key\": \"demo5\",\n        \"delta\": \"{\\\"owner\\\":\\\"test@mail.com\\\",\\\"description\\\":\\\"Data Team QA\\\",\\\"issued\\\":\\\"2015-04-20T18:18:18.425+0000\\\",\\\"roles\\\":[\\\"data-team-qa\\\"]}\",\n        \"consistency\": \"STRONG\",\n        \"audit\": {\n          \"comment\": \"re-import\"\n        }\n      },\n        {\n        \"table\": \"{{table}}\",\n        \"~id\": \"{{id6}}\",\n        \"key\": \"demo6\",\n        \"delta\": \"{\\\"owner\\\":\\\"test@mail.com\\\",\\\"description\\\":\\\"Data Team QA\\\",\\\"issued\\\":\\\"2015-04-20T18:18:18.425+0000\\\",\\\"roles\\\":[\\\"data-team-qa\\\"]}\",\n        \"consistency\": \"WEAK\",\n        \"audit\": {\n          \"comment\": \"re-import\"\n        }\n      },\n        {\n        \"table\": \"{{table}}\",\n        \"~id\": \"{{id7}}\",\n        \"key\": \"demo7\",\n        \"delta\": \"{\\\"owner\\\":\\\"test@mail.com\\\",\\\"description\\\":\\\"Data Team QA\\\",\\\"issued\\\":\\\"2015-04-20T18:18:18.425+0000\\\",\\\"roles\\\":[\\\"data-team-qa\\\"]}\",\n        \"consistency\": \"WEAK\",\n        \"audit\": {\n          \"comment\": \"re-import\"\n        }\n      },\n        {\n        \"table\": \"{{table}}\",\n        \"~id\": \"{{id8}}\",\n        \"key\": \"demo8\",\n        \"delta\": \"{\\\"owner\\\":\\\"test@mail.com\\\",\\\"description\\\":\\\"Data Team QA\\\",\\\"issued\\\":\\\"2015-04-20T18:18:18.425+0000\\\",\\\"roles\\\":[\\\"data-team-qa\\\"]}\",\n        \"consistency\": \"WEAK\",\n        \"audit\": {\n          \"comment\": \"re-import\"\n        }\n      },\n        {\n        \"table\": \"{{table}}\",\n        \"~id\": \"{{id9}}\",\n        \"key\": \"demo9\",\n        \"delta\": \"{\\\"owner\\\":\\\"test@mail.com\\\",\\\"description\\\":\\\"Data Team QA\\\",\\\"issued\\\":\\\"2015-04-20T18:18:18.425+0000\\\",\\\"roles\\\":[\\\"data-team-qa\\\"]}\",\n        \"consistency\": \"WEAK\",\n        \"audit\": {\n          \"comment\": \"re-import\"\n        }\n      },\n        {\n        \"table\": \"{{table}}\",\n        \"~id\": \"{{id10}}\",\n        \"key\": \"demo10\",\n        \"delta\": \"{\\\"owner\\\":\\\"test@mail.com\\\",\\\"description\\\":\\\"Data Team QA\\\",\\\"issued\\\":\\\"2015-04-20T18:18:18.425+0000\\\",\\\"roles\\\":[\\\"data-team-qa\\\"]}\",\n        \"consistency\": \"WEAK\",\n        \"audit\": {\n          \"comment\": \"re-import\"\n        }\n      }\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/not_existing_table?audit=comment:'imports+an+arbitrary+size'&consistency=STRONG&facade=false",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"not_existing_table"
													],
													"query": [
														{
															"key": "changeId",
															"value": "993091dd-7751-11eb-b70c-496d0c9f0df0",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "comment:'imports+an+arbitrary+size'"
														},
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "facade",
															"value": "false"
														},
														{
															"key": "tag",
															"value": "<string>",
															"disabled": true
														}
													]
												},
												"description": " Imports an arbitrary size stream of deltas and/or JSON objects.  Two formats are supported: array syntax\n ('[' object ',' object ',' ... ']') and whitespace-separated objects (object whitespace object whitespace ...)\n Each piece of content must have a top-level \"~id\" attribute that determines the object key in the SoR."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table?changeId=<string>&audit=<string>&consistency=STRONG&facade=<string>&tag=<string>&tag=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>"
																},
																{
																	"key": "audit",
																	"value": "<string>"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "facade",
																	"value": "<string>"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Request with empty body",
									"item": [
										{
											"name": "Creates table /sor/1/_table/{table} Copy",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"postman.setEnvironmentVariable('table', 'table_'+uuid.v4());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "placement:'ugc_global:ugc'"
														},
														{
															"key": "audit",
															"value": "comment:'initial+provisioning'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is created"
											},
											"response": []
										},
										{
											"name": "Imports an arbitrary size stream of deltas and/or JSON objects",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"postman.setEnvironmentVariable('id1', uuid.v4());",
															"postman.setEnvironmentVariable('id2', uuid.v4());",
															"postman.setEnvironmentVariable('id3', uuid.v4());",
															"postman.setEnvironmentVariable('id4', uuid.v4());",
															"postman.setEnvironmentVariable('id5', uuid.v4());",
															"postman.setEnvironmentVariable('id6', uuid.v4());",
															"postman.setEnvironmentVariable('id7', uuid.v4());",
															"postman.setEnvironmentVariable('id8', uuid.v4());",
															"postman.setEnvironmentVariable('id9', uuid.v4());",
															"postman.setEnvironmentVariable('id10', uuid.v4());",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-Api-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}?audit=comment:'imports+an+arbitrary+size'&consistency=STRONG&facade=false",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "993091dd-7751-11eb-b70c-496d0c9f0df0",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "comment:'imports+an+arbitrary+size'"
														},
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "facade",
															"value": "false"
														},
														{
															"key": "tag",
															"value": "<string>",
															"disabled": true
														}
													]
												},
												"description": " Imports an arbitrary size stream of deltas and/or JSON objects.  Two formats are supported: array syntax\n ('[' object ',' object ',' ... ']') and whitespace-separated objects (object whitespace object whitespace ...)\n Each piece of content must have a top-level \"~id\" attribute that determines the object key in the SoR."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table?changeId=<string>&audit=<string>&consistency=STRONG&facade=<string>&tag=<string>&tag=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>"
																},
																{
																	"key": "audit",
																	"value": "<string>"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "facade",
																	"value": "<string>"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Retrieves a list of content items in a particular table.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql([]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-BV-Api-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}?from=<string>&limit=10&includeDeletes=false&consistency=STRONG&debug=true&APIKey={{api_key}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}"
													],
													"query": [
														{
															"key": "from",
															"value": "<string>"
														},
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "includeDeletes",
															"value": "false"
														},
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "debug",
															"value": "true"
														},
														{
															"key": "APIKey",
															"value": "{{api_key}}",
															"description": "(Required) "
														}
													]
												},
												"description": "Retrieves a list of content items in a particular table.  To retrieve <em>all</em> items in a table set the\n limit param to a very large value (eg. Long.MAX_VALUE), but for large tables be sure your client can stream the\n results without exhausting all available memory."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table?from=<string>&limit=10&includeDeletes=false&consistency=STRONG&debug=<string>&APIKey=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table"
															],
															"query": [
																{
																	"key": "from",
																	"value": "<string>"
																},
																{
																	"key": "limit",
																	"value": "10"
																},
																{
																	"key": "includeDeletes",
																	"value": "false"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "debug",
																	"value": "<string>"
																},
																{
																	"key": "APIKey",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										},
										{
											"name": "Drops a table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "comment:'table_removal'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is dropped"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Request without api-key and audit param",
									"item": [
										{
											"name": "Imports an arbitrary size stream of deltas and/or JSON objects. Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.text()).to.eql('Missing required query parameter: audit');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/not_exisiting_table?consistency=STRONG&facade=false&tag=<string>",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"not_exisiting_table"
													],
													"query": [
														{
															"key": "changeId",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "facade",
															"value": "false"
														},
														{
															"key": "tag",
															"value": "<string>"
														}
													]
												},
												"description": " Imports an arbitrary size stream of deltas and/or JSON objects.  Two formats are supported: array syntax\n ('[' object ',' object ',' ... ']') and whitespace-separated objects (object whitespace object whitespace ...)\n Each piece of content must have a top-level \"~id\" attribute that determines the object key in the SoR."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table?changeId=<string>&audit=<string>&consistency=STRONG&facade=<string>&tag=<string>&tag=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>"
																},
																{
																	"key": "audit",
																	"value": "<string>"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "facade",
																	"value": "<string>"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Request without api-key",
									"item": [
										{
											"name": "Imports an arbitrary size stream of deltas and/or JSON objects.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json().reason).to.be.oneOf([`not authorized to update table ${pm.environment.get('table')}`, 'not authorized']);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key_no_rights}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n         {\n            \"table\": \"{{table}}\",\n            \"~id\": \"{{id1}}\",\n            \"key\": \"demo1\",\n            \"delta\": \"{\\\"field1\\\":\\\"value1\\\",\\\"field2\\\":\\\"value2\\\",\\\"field3\\\":\\\"value3\\\"}\",\n            \"consistency\": \"STRONG\",\n            \"audit\": {\n              \"comment\": \"Adding demo1 document\"\n            }\n          },\n          {\n        \"table\": \"{{table}}\",\n        \"~id\": \"{{id2}}\",\n        \"key\": \"demo2\",\n        \"delta\": \"{\\\"field1\\\":\\\"value1.1\\\",\\\"field5\\\":\\\"value5\\\",\\\"field32\\\":\\\"value33\\\"}\",\n        \"consistency\": \"STRONG\",\n        \"audit\": {\n          \"comment\": \"Update and Add\"\n        }\n      }\n]"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/{{table}}?audit=comment:'table_import'&consistency=STRONG",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"{{table}}"
													],
													"query": [
														{
															"key": "changeId",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "audit",
															"value": "comment:'table_import'"
														},
														{
															"key": "facade",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "tag",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "consistency",
															"value": "STRONG"
														}
													]
												},
												"description": " Imports an arbitrary size stream of deltas and/or JSON objects.  Two formats are supported: array syntax\n ('[' object ',' object ',' ... ']') and whitespace-separated objects (object whitespace object whitespace ...)\n Each piece of content must have a top-level \"~id\" attribute that determines the object key in the SoR."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/:table?changeId=<string>&audit=<string>&consistency=STRONG&facade=<string>&tag=<string>&tag=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																":table"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>"
																},
																{
																	"key": "audit",
																	"value": "<string>"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "facade",
																	"value": "<string>"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "Imports an arbitrary size stream of deltas and/or JSON objects.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/some_table?audit=comment:'imports+an+arbitrary+size'&consistency=STRONG&facade=false&tag=postman",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"some_table"
											],
											"query": [
												{
													"key": "changeId",
													"value": "<string>",
													"disabled": true
												},
												{
													"key": "audit",
													"value": "comment:'imports+an+arbitrary+size'"
												},
												{
													"key": "consistency",
													"value": "STRONG"
												},
												{
													"key": "facade",
													"value": "false"
												},
												{
													"key": "tag",
													"value": "postman"
												}
											]
										},
										"description": " Imports an arbitrary size stream of deltas and/or JSON objects.  Two formats are supported: array syntax\n ('[' object ',' object ',' ... ']') and whitespace-separated objects (object whitespace object whitespace ...)\n Each piece of content must have a top-level \"~id\" attribute that determines the object key in the SoR."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sor/1/:table?changeId=<string>&audit=<string>&consistency=STRONG&facade=<string>&tag=<string>&tag=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sor",
														"1",
														":table"
													],
													"query": [
														{
															"key": "changeId",
															"value": "<string>"
														},
														{
															"key": "audit",
															"value": "<string>"
														},
														{
															"key": "consistency",
															"value": "STRONG"
														},
														{
															"key": "facade",
															"value": "<string>"
														},
														{
															"key": "tag",
															"value": "<string>"
														},
														{
															"key": "tag",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "table"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"success\": false,\n \"debug\": {}\n}"
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "facade test cases",
					"item": [
						{
							"name": "{table}",
							"item": [
								{
									"name": "Creates a facade",
									"item": [
										{
											"name": "TC: Request without api-key",
											"item": [
												{
													"name": "Creates a facade",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {",
																	"    pm.response.to.have.status(403);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"reason\":\"not authorized\"});",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key_no_rights}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_facade/:table?options=<string>&audit=<string>",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																":table"
															],
															"query": [
																{
																	"key": "options",
																	"value": "<string>"
																},
																{
																	"key": "audit",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table",
																	"value": "<string>",
																	"description": "(Required) "
																}
															]
														},
														"description": "Returns a SuccessResponse if facade is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/_facade/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "TC: Request for creating facade for not existing table",
											"item": [
												{
													"name": "Creates a facade",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 404\", function () {",
																	"    pm.response.to.have.status(404);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"message\":\"Unknown table: not_existing_table\",\"table\":\"not_existing_table\",\"suppressed\":[]});",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_facade/not_existing_table?options=placement:'ugc_global:ugc'&audit=audit=comment:'initial+facade+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"not_existing_table"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "audit=comment:'initial+facade+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if facade is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/_facade/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "TC: Create facade without option param",
											"item": [
												{
													"name": "Creates table /sor/1/_table/{table}",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table', 'table_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": []
												},
												{
													"name": "Creates a facade",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.text()).to.eql(\"Missing required query parameter: options\");",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_facade/{{table}}",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "<string>",
																	"disabled": true
																},
																{
																	"key": "audit",
																	"value": "<string>",
																	"disabled": true
																}
															]
														},
														"description": "Returns a SuccessResponse if facade is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/_facade/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "TC: Create facade in the same placement with table",
											"item": [
												{
													"name": "Creates table /sor/1/_table/{table}",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table', 'table_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": []
												},
												{
													"name": "Creates a facade",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.text()).to.eql(\"Cannot create a facade in the same placement as its table: ugc_global:ugc\");",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_facade/{{table}}?options=placement:'ugc_global:ugc'&audit=audit=comment:'initial+facade+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "audit=comment:'initial+facade+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if facade is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/_facade/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "TC: Create facade in not existing pacement",
											"item": [
												{
													"name": "Creates table /sor/1/_table/{table}",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table', 'table_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": []
												},
												{
													"name": "Creates a facade",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.text()).to.eql(\"Unknown placement string: not_existing:placement\");",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_facade/{{table}}?options=placement:'not_existing:placement'&audit=audit=comment:'initial+facade+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'not_existing:placement'"
																},
																{
																	"key": "audit",
																	"value": "audit=comment:'initial+facade+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if facade is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/_facade/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "TC: Create facade",
											"item": [
												{
													"name": "Creates table /sor/1/_table/{table}",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table', 'table_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": []
												},
												{
													"name": "Creates a facade",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_facade/{{table}}?options=placement:'catalog_global:cat'&audit=audit=comment:'initial+facade+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'catalog_global:cat'"
																},
																{
																	"key": "audit",
																	"value": "audit=comment:'initial+facade+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if facade is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/_facade/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "TC: Create facade without audit param",
											"item": [
												{
													"name": "Creates table /sor/1/_table/{table}",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table', 'table_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": []
												},
												{
													"name": "Creates a facade",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.text()).to.eql(\"Missing required query parameter: audit\");",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_facade/{{table}}?options=placement:'ugc_global:ugc'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_global:ugc'"
																}
															]
														},
														"description": "Returns a SuccessResponse if facade is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/_facade/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "Creates a facade",
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_facade/:table?options=<string>&audit=<string>",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_facade",
														":table"
													],
													"query": [
														{
															"key": "options",
															"value": "<string>"
														},
														{
															"key": "audit",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "table",
															"value": "<string>",
															"description": "(Required) "
														}
													]
												},
												"description": "Returns a SuccessResponse if facade is created"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/_facade/:table?options=<string>&audit=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																":table"
															],
															"query": [
																{
																	"key": "options",
																	"value": "<string>"
																},
																{
																	"key": "audit",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "Drops a Facade",
									"item": [
										{
											"name": "TC: Request without api-key",
											"item": [
												{
													"name": "Drops a Facade",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {",
																	"    pm.response.to.have.status(403);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({\"reason\":\"not authorized\"});",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key_no_rights}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_facade/not_existing_table?audit=<string>&placement=<string>",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"not_existing_table"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "<string>"
																},
																{
																	"key": "placement",
																	"value": "<string>"
																}
															]
														},
														"description": "Returns a SuccessResponse if facade is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/_facade/:table?audit=<string>&placement=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		},
																		{
																			"key": "placement",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "TC: Request without placement to drop facade",
											"item": [
												{
													"name": "Drops a Facade",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.text()).to.eql('Missing required placement.');",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_facade/:table?audit=comment:'facade+deletion'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																":table"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'facade+deletion'"
																},
																{
																	"key": "placement",
																	"value": "<string>",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "table",
																	"value": "<string>",
																	"description": "(Required) "
																}
															]
														},
														"description": "Returns a SuccessResponse if facade is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/_facade/:table?audit=<string>&placement=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		},
																		{
																			"key": "placement",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "TC: Request without audit param",
											"item": [
												{
													"name": "Drops a Facade",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.text()).to.eql('Missing required query parameter: audit');",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_facade/:table?placement=ugc_global:ugc",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																":table"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'facade+deletion'",
																	"disabled": true
																},
																{
																	"key": "placement",
																	"value": "ugc_global:ugc"
																}
															],
															"variable": [
																{
																	"key": "table",
																	"value": "<string>",
																	"description": "(Required) "
																}
															]
														},
														"description": "Returns a SuccessResponse if facade is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/_facade/:table?audit=<string>&placement=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		},
																		{
																			"key": "placement",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "TC: Drop facade",
											"item": [
												{
													"name": "Creates table /sor/1/_table/{table}",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table', 'table_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_eu:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_eu:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": []
												},
												{
													"name": "Drops a Facade before it is created",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 404\", function () {",
																	"        pm.response.to.have.status(404);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({",
																	"            message:`Unknown facade: ${pm.environment.get('table')} in ugc_us:ugc`,",
																	"            facade: pm.environment.get('table'),",
																	"            suppressed:[]",
																	"        });",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}?audit=comment:'facade+deletion'&placement=ugc_us:ugc",
															"host": [
																"{{baseurl_dc2}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'facade+deletion'"
																},
																{
																	"key": "placement",
																	"value": "ugc_us:ugc"
																}
															]
														},
														"description": "Returns a SuccessResponse if facade is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/_facade/:table?audit=<string>&placement=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		},
																		{
																			"key": "placement",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Creates a facade",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-Api-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}?options=placement:'ugc_us:ugc'&audit=audit=comment:'initial+facade+provisioning'",
															"host": [
																"{{baseurl_dc2}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_us:ugc'"
																},
																{
																	"key": "audit",
																	"value": "audit=comment:'initial+facade+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if facade is created"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/_facade/:table?options=<string>&audit=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		":table"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a Facade",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}?audit=comment:'facade+deletion'&placement=ugc_us:ugc",
															"host": [
																"{{baseurl_dc2}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'facade+deletion'"
																},
																{
																	"key": "placement",
																	"value": "ugc_us:ugc"
																}
															]
														},
														"description": "Returns a SuccessResponse if facade is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/_facade/:table?audit=<string>&placement=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		},
																		{
																			"key": "placement",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "TC: Request with not existing placement",
											"item": [
												{
													"name": "Creates table /sor/1/_table/{table}",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var uuid = require('uuid');",
																	"postman.setEnvironmentVariable('table', 'table_'+uuid.v4());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_eu:ugc'&audit=comment:'initial+provisioning'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "options",
																	"value": "placement:'ugc_eu:ugc'"
																},
																{
																	"key": "audit",
																	"value": "comment:'initial+provisioning'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is created"
													},
													"response": []
												},
												{
													"name": "Drops a Facade",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 400\", function () {",
																	"        pm.response.to.have.status(400);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.text()).to.eql('Unknown placement string: not_existing:placement');",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"value": "{{api_key}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}?audit=comment:'facade+deletion'&placement=not_existing:placement",
															"host": [
																"{{baseurl_dc2}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"{{table}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'facade+deletion'"
																},
																{
																	"key": "placement",
																	"value": "not_existing:placement"
																}
															]
														},
														"description": "Returns a SuccessResponse if facade is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/_facade/:table?audit=<string>&placement=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		},
																		{
																			"key": "placement",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												},
												{
													"name": "Drops a table",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																	"",
																	"if(!isLocal) {",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"",
																	"    pm.test(\"Body matches string\", function () {",
																	"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "X-BV-API-Key",
																"type": "text",
																"value": "{{api_key}}"
															}
														],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																"{{table}}"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "comment:'table_removal'"
																}
															]
														},
														"description": "Returns a SuccessResponse if table is dropped"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		":table"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "Drops a Facade",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_facade/:table?audit=<string>&placement=<string>",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_facade",
														":table"
													],
													"query": [
														{
															"key": "audit",
															"value": "<string>"
														},
														{
															"key": "placement",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "table",
															"value": "<string>",
															"description": "(Required) "
														}
													]
												},
												"description": "Returns a SuccessResponse if facade is dropped"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/_facade/:table?audit=<string>&placement=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																":table"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "<string>"
																},
																{
																	"key": "placement",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "{key}",
									"item": [
										{
											"name": "Creates or replaces a piece of content of a facade in the data store",
											"item": [
												{
													"name": "TC: Request without api-key",
													"item": [
														{
															"name": "Creates or replaces a piece of content of a facade in the data store",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 403\", function () {",
																			"    pm.response.to.have.status(403);",
																			"});",
																			"",
																			"pm.test(\"Body matches string\", function () {",
																			"    pm.expect(pm.response.json()).to.eql({\"reason\":\"not authorized\"});",
																			"});",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PUT",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "X-BV-API-Key",
																		"value": "{{api_key_no_rights}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_facade/{table}/{key}?audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{table}",
																		"{key}"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": "<string>",
																			"disabled": true
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	]
																},
																"description": "Creates or replaces a piece of content of a facade in the data store.  Overwrites the old\n version of the content, if it exists.  Expects a literal JSON representation\n of the object."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "PUT",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/sor/1/_facade/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"sor",
																				"1",
																				"_facade",
																				":table",
																				":key"
																			],
																			"query": [
																				{
																					"key": "changeId",
																					"value": "<string>"
																				},
																				{
																					"key": "audit",
																					"value": "<string>"
																				},
																				{
																					"key": "consistency",
																					"value": "STRONG"
																				},
																				{
																					"key": "tag",
																					"value": "<string>"
																				},
																				{
																					"key": "tag",
																					"value": "<string>"
																				},
																				{
																					"key": "debug",
																					"value": "<string>"
																				}
																			],
																			"variable": [
																				{
																					"key": "table"
																				},
																				{
																					"key": "key"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"success\": false,\n \"debug\": {}\n}"
																}
															]
														}
													]
												},
												{
													"name": "TC: Request without audit param",
													"item": [
														{
															"name": "Creates or replaces a piece of content of a facade in the data store",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 400\", function () {",
																			"    pm.response.to.have.status(400);",
																			"});",
																			"",
																			"pm.test(\"Body matches string\", function () {",
																			"    pm.expect(pm.response.text()).to.eql('Missing required query parameter: audit');",
																			"});",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PUT",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "X-BV-API-Key",
																		"value": "{{api_key}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_facade/{table}/{key}?consistency=STRONG&tag=postman&tag=postman1&debug=true",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{table}",
																		"{key}"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": "<string>",
																			"disabled": true
																		},
																		{
																			"key": "audit",
																			"value": "<string>",
																			"disabled": true
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": "postman"
																		},
																		{
																			"key": "tag",
																			"value": "postman1"
																		},
																		{
																			"key": "debug",
																			"value": "true"
																		}
																	]
																},
																"description": "Creates or replaces a piece of content of a facade in the data store.  Overwrites the old\n version of the content, if it exists.  Expects a literal JSON representation\n of the object."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "PUT",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/sor/1/_facade/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"sor",
																				"1",
																				"_facade",
																				":table",
																				":key"
																			],
																			"query": [
																				{
																					"key": "changeId",
																					"value": "<string>"
																				},
																				{
																					"key": "audit",
																					"value": "<string>"
																				},
																				{
																					"key": "consistency",
																					"value": "STRONG"
																				},
																				{
																					"key": "tag",
																					"value": "<string>"
																				},
																				{
																					"key": "tag",
																					"value": "<string>"
																				},
																				{
																					"key": "debug",
																					"value": "<string>"
																				}
																			],
																			"variable": [
																				{
																					"key": "table"
																				},
																				{
																					"key": "key"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"success\": false,\n \"debug\": {}\n}"
																}
															]
														}
													]
												},
												{
													"name": "TC: Request to not existing table",
													"item": [
														{
															"name": "Creates or replaces a piece of content of a facade in the data store",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 404\", function () {",
																			"    pm.response.to.have.status(404);",
																			"});",
																			"",
																			"pm.test(\"Body matches string\", function () {",
																			"    pm.expect(pm.response.json()).to.eql({\"message\":\"Unknown table: not_exiting_table\",\"table\":\"not_exiting_table\",\"suppressed\":[]});",
																			"});",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PUT",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "X-BV-APi-Key",
																		"value": "{{api_key}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
																},
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_facade/not_exiting_table/{{key}}?audit=comment:'create+replace+piece+of+data'&consistency=STRONG&tag=postman&tag=postman1&debug=true",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"not_exiting_table",
																		"{{key}}"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": "<string>",
																			"disabled": true
																		},
																		{
																			"key": "audit",
																			"value": "comment:'create+replace+piece+of+data'"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": "postman"
																		},
																		{
																			"key": "tag",
																			"value": "postman1"
																		},
																		{
																			"key": "debug",
																			"value": "true"
																		}
																	]
																},
																"description": "Creates or replaces a piece of content of a facade in the data store.  Overwrites the old\n version of the content, if it exists.  Expects a literal JSON representation\n of the object."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "PUT",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/sor/1/_facade/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"sor",
																				"1",
																				"_facade",
																				":table",
																				":key"
																			],
																			"query": [
																				{
																					"key": "changeId",
																					"value": "<string>"
																				},
																				{
																					"key": "audit",
																					"value": "<string>"
																				},
																				{
																					"key": "consistency",
																					"value": "STRONG"
																				},
																				{
																					"key": "tag",
																					"value": "<string>"
																				},
																				{
																					"key": "tag",
																					"value": "<string>"
																				},
																				{
																					"key": "debug",
																					"value": "<string>"
																				}
																			],
																			"variable": [
																				{
																					"key": "table"
																				},
																				{
																					"key": "key"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"success\": false,\n \"debug\": {}\n}"
																}
															]
														}
													]
												},
												{
													"name": "TC: Request to table instead of facade",
													"item": [
														{
															"name": "Creates table /sor/1/_table/{table}",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var uuid = require('uuid');",
																			"postman.setEnvironmentVariable('table', 'table_'+uuid.v4());"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																			"",
																			"if(!isLocal) {",
																			"    pm.test(\"Status code is 200\", function () {",
																			"        pm.response.to.have.status(200);",
																			"    });",
																			"",
																			"    pm.test(\"Body matches string\", function () {",
																			"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																			"    });",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PUT",
																"header": [
																	{
																		"key": "X-BV-API-Key",
																		"type": "text",
																		"value": "{{api_key}}"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_eu:ugc'&audit=comment:'initial+provisioning'",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "placement:'ugc_eu:ugc'"
																		},
																		{
																			"key": "audit",
																			"value": "comment:'initial+provisioning'"
																		}
																	]
																},
																"description": "Returns a SuccessResponse if table is created"
															},
															"response": []
														},
														{
															"name": "Creates or replaces a piece of content of a facade in the data store",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																			"",
																			"if(!isLocal) {",
																			"    pm.test(\"Status code is 403\", function () {",
																			"        pm.response.to.have.status(403);",
																			"    });",
																			"",
																			"    pm.test(\"Body matches string\", function () {",
																			"        pm.expect(pm.response.text()).to.eql('Access denied. Update intended for a facade, but the table would be updated.');",
																			"    });",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PUT",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "X-BV-API-Key",
																		"value": "{{api_key}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
																},
																"url": {
																	"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}/{{key}}?audit=comment:'update+piece+of+content'&consistency=STRONG&tag=postman&tag=postman1&debug=true",
																	"host": [
																		"{{baseurl_dc2}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{{table}}",
																		"{{key}}"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": "<string>",
																			"disabled": true
																		},
																		{
																			"key": "audit",
																			"value": "comment:'update+piece+of+content'"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": "postman"
																		},
																		{
																			"key": "tag",
																			"value": "postman1"
																		},
																		{
																			"key": "debug",
																			"value": "true"
																		}
																	]
																},
																"description": "Creates or replaces a piece of content of a facade in the data store.  Overwrites the old\n version of the content, if it exists.  Expects a literal JSON representation\n of the object."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "PUT",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/sor/1/_facade/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"sor",
																				"1",
																				"_facade",
																				":table",
																				":key"
																			],
																			"query": [
																				{
																					"key": "changeId",
																					"value": "<string>"
																				},
																				{
																					"key": "audit",
																					"value": "<string>"
																				},
																				{
																					"key": "consistency",
																					"value": "STRONG"
																				},
																				{
																					"key": "tag",
																					"value": "<string>"
																				},
																				{
																					"key": "tag",
																					"value": "<string>"
																				},
																				{
																					"key": "debug",
																					"value": "<string>"
																				}
																			],
																			"variable": [
																				{
																					"key": "table"
																				},
																				{
																					"key": "key"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"success\": false,\n \"debug\": {}\n}"
																}
															]
														},
														{
															"name": "Drops a table",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																			"",
																			"if(!isLocal) {",
																			"    pm.test(\"Status code is 200\", function () {",
																			"        pm.response.to.have.status(200);",
																			"    });",
																			"",
																			"    pm.test(\"Body matches string\", function () {",
																			"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																			"    });",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "X-BV-API-Key",
																		"type": "text",
																		"value": "{{api_key}}"
																	}
																],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "comment:'table_removal'"
																		}
																	]
																},
																"description": "Returns a SuccessResponse if table is dropped"
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "DELETE",
																		"header": [],
																		"url": {
																			"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																			"host": [
																				"{{baseurl_dc1}}"
																			],
																			"path": [
																				"sor",
																				"1",
																				"_table",
																				":table"
																			],
																			"query": [
																				{
																					"key": "audit",
																					"value": "<string>"
																				}
																			],
																			"variable": [
																				{
																					"key": "table"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"success\": false,\n \"debug\": {}\n}"
																}
															]
														}
													]
												},
												{
													"name": "TC: Request to facade of removed table",
													"item": [
														{
															"name": "Creates table /sor/1/_table/{table}",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var uuid = require('uuid');",
																			"postman.setEnvironmentVariable('table', 'table_'+uuid.v4());"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																			"",
																			"if(!isLocal) {",
																			"    pm.test(\"Status code is 200\", function () {",
																			"        pm.response.to.have.status(200);",
																			"    });",
																			"",
																			"    pm.test(\"Body matches string\", function () {",
																			"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																			"    });",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PUT",
																"header": [
																	{
																		"key": "X-BV-API-Key",
																		"type": "text",
																		"value": "{{api_key}}"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_eu:ugc'&audit=comment:'initial+provisioning'",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "placement:'ugc_eu:ugc'"
																		},
																		{
																			"key": "audit",
																			"value": "comment:'initial+provisioning'"
																		}
																	]
																},
																"description": "Returns a SuccessResponse if table is created"
															},
															"response": []
														},
														{
															"name": "Creates a facade",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																			"",
																			"if(!isLocal) {",
																			"    pm.test(\"Status code is 200\", function () {",
																			"        pm.response.to.have.status(200);",
																			"    });",
																			"",
																			"    pm.test(\"Body matches string\", function () {",
																			"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																			"    });",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PUT",
																"header": [
																	{
																		"key": "X-BV-Api-Key",
																		"value": "{{api_key}}",
																		"type": "text"
																	}
																],
																"url": {
																	"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}?options=placement:'ugc_us:ugc'&audit=audit=comment:'initial+facade+provisioning'",
																	"host": [
																		"{{baseurl_dc2}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "placement:'ugc_us:ugc'"
																		},
																		{
																			"key": "audit",
																			"value": "audit=comment:'initial+facade+provisioning'"
																		}
																	]
																},
																"description": "Returns a SuccessResponse if facade is created"
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "PUT",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/sor/1/_facade/:table?options=<string>&audit=<string>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"sor",
																				"1",
																				"_facade",
																				":table"
																			],
																			"query": [
																				{
																					"key": "options",
																					"value": "<string>"
																				},
																				{
																					"key": "audit",
																					"value": "<string>"
																				}
																			],
																			"variable": [
																				{
																					"key": "table"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"success\": false,\n \"debug\": {}\n}"
																}
															]
														},
														{
															"name": "Creates or replaces a piece of content of a facade in the data storebefore table removal",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																			"",
																			"if(!isLocal) {",
																			"    pm.test(\"Status code is 200\", function () {",
																			"        pm.response.to.have.status(200);",
																			"    });",
																			"",
																			"    pm.test(\"Body assertion\", function () {",
																			"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																			"",
																			"    });",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PUT",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "X-BV-API-Key",
																		"value": "{{api_key}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
																},
																"url": {
																	"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}/{{key}}?audit=comment:'update+piece+of+content'",
																	"host": [
																		"{{baseurl_dc2}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{{table}}",
																		"{{key}}"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": "<string>",
																			"disabled": true
																		},
																		{
																			"key": "audit",
																			"value": "comment:'update+piece+of+content'"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG",
																			"disabled": true
																		},
																		{
																			"key": "tag",
																			"value": "postman",
																			"disabled": true
																		},
																		{
																			"key": "tag",
																			"value": "postman1",
																			"disabled": true
																		},
																		{
																			"key": "debug",
																			"value": "true",
																			"disabled": true
																		}
																	]
																},
																"description": "Creates or replaces a piece of content of a facade in the data store.  Overwrites the old\n version of the content, if it exists.  Expects a literal JSON representation\n of the object."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "PUT",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/sor/1/_facade/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"sor",
																				"1",
																				"_facade",
																				":table",
																				":key"
																			],
																			"query": [
																				{
																					"key": "changeId",
																					"value": "<string>"
																				},
																				{
																					"key": "audit",
																					"value": "<string>"
																				},
																				{
																					"key": "consistency",
																					"value": "STRONG"
																				},
																				{
																					"key": "tag",
																					"value": "<string>"
																				},
																				{
																					"key": "tag",
																					"value": "<string>"
																				},
																				{
																					"key": "debug",
																					"value": "<string>"
																				}
																			],
																			"variable": [
																				{
																					"key": "table"
																				},
																				{
																					"key": "key"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"success\": false,\n \"debug\": {}\n}"
																}
															]
														},
														{
															"name": "Drops a table",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																			"",
																			"if(!isLocal) {",
																			"    pm.test(\"Status code is 200\", function () {",
																			"        pm.response.to.have.status(200);",
																			"    });",
																			"",
																			"    pm.test(\"Body matches string\", function () {",
																			"        pm.expect(pm.response.json()).to.eql({ \"success\": true });",
																			"    });",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "X-BV-API-Key",
																		"type": "text",
																		"value": "{{api_key}}"
																	}
																],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "comment:'table_removal'"
																		}
																	]
																},
																"description": "Returns a SuccessResponse if table is dropped"
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "DELETE",
																		"header": [],
																		"url": {
																			"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																			"host": [
																				"{{baseurl_dc1}}"
																			],
																			"path": [
																				"sor",
																				"1",
																				"_table",
																				":table"
																			],
																			"query": [
																				{
																					"key": "audit",
																					"value": "<string>"
																				}
																			],
																			"variable": [
																				{
																					"key": "table"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"success\": false,\n \"debug\": {}\n}"
																}
															]
														},
														{
															"name": "Creates or replaces a piece of content of a facade in the data store after table removal",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																			"",
																			"if(!isLocal) {",
																			"    pm.test(\"Status code is 404\", function () {",
																			"        pm.response.to.have.status(404);",
																			"    });",
																			"",
																			"    pm.test(\"Body matches string\", function () {",
																			"        pm.expect(pm.response.text()).to.eql(`{\"message\":\"Unknown table: ${pm.environment.get('table')}\",\"table\":\"${pm.environment.get('table')}\",\"suppressed\":[]}`);",
																			"    });",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PUT",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "X-BV-API-Key",
																		"value": "{{api_key}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
																},
																"url": {
																	"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}/{{key}}?audit=comment:'update+piece+of+content'&consistency=STRONG&tag=postman&tag=postman1&debug=true",
																	"host": [
																		"{{baseurl_dc2}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{{table}}",
																		"{{key}}"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": "<string>",
																			"disabled": true
																		},
																		{
																			"key": "audit",
																			"value": "comment:'update+piece+of+content'"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": "postman"
																		},
																		{
																			"key": "tag",
																			"value": "postman1"
																		},
																		{
																			"key": "debug",
																			"value": "true"
																		}
																	]
																},
																"description": "Creates or replaces a piece of content of a facade in the data store.  Overwrites the old\n version of the content, if it exists.  Expects a literal JSON representation\n of the object."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "PUT",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/sor/1/_facade/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"sor",
																				"1",
																				"_facade",
																				":table",
																				":key"
																			],
																			"query": [
																				{
																					"key": "changeId",
																					"value": "<string>"
																				},
																				{
																					"key": "audit",
																					"value": "<string>"
																				},
																				{
																					"key": "consistency",
																					"value": "STRONG"
																				},
																				{
																					"key": "tag",
																					"value": "<string>"
																				},
																				{
																					"key": "tag",
																					"value": "<string>"
																				},
																				{
																					"key": "debug",
																					"value": "<string>"
																				}
																			],
																			"variable": [
																				{
																					"key": "table"
																				},
																				{
																					"key": "key"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"success\": false,\n \"debug\": {}\n}"
																}
															]
														}
													]
												},
												{
													"name": "TC: Request to facade with all parameters populated",
													"item": [
														{
															"name": "Creates table /sor/1/_table/{table}",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var uuid = require('uuid');",
																			"postman.setEnvironmentVariable('table', 'table_'+uuid.v4());"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																			"",
																			"if(!isLocal) {",
																			"    pm.test(\"Status code is 200\", function () {",
																			"        pm.response.to.have.status(200);",
																			"    });",
																			"",
																			"    pm.test(\"Body matches string\", function () {",
																			"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																			"    });",
																			"}",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PUT",
																"header": [
																	{
																		"key": "X-BV-API-Key",
																		"type": "text",
																		"value": "{{api_key}}"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_eu:ugc'&audit=comment:'initial+provisioning'",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "placement:'ugc_eu:ugc'"
																		},
																		{
																			"key": "audit",
																			"value": "comment:'initial+provisioning'"
																		}
																	]
																},
																"description": "Returns a SuccessResponse if table is created"
															},
															"response": []
														},
														{
															"name": "Creates a facade",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																			"",
																			"if(!isLocal) {",
																			"    pm.test(\"Status code is 200\", function () {",
																			"        pm.response.to.have.status(200);",
																			"    });",
																			"",
																			"    pm.test(\"Body matches string\", function () {",
																			"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																			"    });",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PUT",
																"header": [
																	{
																		"key": "X-BV-Api-Key",
																		"value": "{{api_key}}",
																		"type": "text"
																	}
																],
																"url": {
																	"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}?options=placement:'ugc_us:ugc'&audit=audit=comment:'initial+facade+provisioning'",
																	"host": [
																		"{{baseurl_dc2}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "placement:'ugc_us:ugc'"
																		},
																		{
																			"key": "audit",
																			"value": "audit=comment:'initial+facade+provisioning'"
																		}
																	]
																},
																"description": "Returns a SuccessResponse if facade is created"
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "PUT",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/sor/1/_facade/:table?options=<string>&audit=<string>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"sor",
																				"1",
																				"_facade",
																				":table"
																			],
																			"query": [
																				{
																					"key": "options",
																					"value": "<string>"
																				},
																				{
																					"key": "audit",
																					"value": "<string>"
																				}
																			],
																			"variable": [
																				{
																					"key": "table"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"success\": false,\n \"debug\": {}\n}"
																}
															]
														},
														{
															"name": "Creates or replaces a piece of content of a facade in the data storebefore table removal",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																			"",
																			"if(!isLocal) {",
																			"    pm.test(\"Status code is 200\", function () {",
																			"        pm.response.to.have.status(200);",
																			"    });",
																			"",
																			"    pm.test(\"Body assertion\", function () {",
																			"        pm.expect(pm.response.json()).to.have.keys(\"success\",\"debug\");",
																			"        pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
																			"        pm.expect(pm.response.json().success).to.eql(true);",
																			"",
																			"    });",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PUT",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "X-BV-API-Key",
																		"value": "{{api_key}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
																},
																"url": {
																	"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}/{{key}}?audit=comment:'update+piece+of+content'&consistency=STRONG&tag=postman&tag=postman1&debug=true",
																	"host": [
																		"{{baseurl_dc2}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{{table}}",
																		"{{key}}"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": "<string>",
																			"disabled": true
																		},
																		{
																			"key": "audit",
																			"value": "comment:'update+piece+of+content'"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": "postman"
																		},
																		{
																			"key": "tag",
																			"value": "postman1"
																		},
																		{
																			"key": "debug",
																			"value": "true"
																		}
																	]
																},
																"description": "Creates or replaces a piece of content of a facade in the data store.  Overwrites the old\n version of the content, if it exists.  Expects a literal JSON representation\n of the object."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "PUT",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/sor/1/_facade/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"sor",
																				"1",
																				"_facade",
																				":table",
																				":key"
																			],
																			"query": [
																				{
																					"key": "changeId",
																					"value": "<string>"
																				},
																				{
																					"key": "audit",
																					"value": "<string>"
																				},
																				{
																					"key": "consistency",
																					"value": "STRONG"
																				},
																				{
																					"key": "tag",
																					"value": "<string>"
																				},
																				{
																					"key": "tag",
																					"value": "<string>"
																				},
																				{
																					"key": "debug",
																					"value": "<string>"
																				}
																			],
																			"variable": [
																				{
																					"key": "table"
																				},
																				{
																					"key": "key"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"success\": false,\n \"debug\": {}\n}"
																}
															]
														},
														{
															"name": "Drops a table",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																			"",
																			"if(!isLocal) {",
																			"    pm.test(\"Status code is 200\", function () {",
																			"        pm.response.to.have.status(200);",
																			"    });",
																			"",
																			"    pm.test(\"Body matches string\", function () {",
																			"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																			"    });",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "X-BV-API-Key",
																		"type": "text",
																		"value": "{{api_key}}"
																	}
																],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "comment:'table_removal'"
																		}
																	]
																},
																"description": "Returns a SuccessResponse if table is dropped"
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "DELETE",
																		"header": [],
																		"url": {
																			"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																			"host": [
																				"{{baseurl_dc1}}"
																			],
																			"path": [
																				"sor",
																				"1",
																				"_table",
																				":table"
																			],
																			"query": [
																				{
																					"key": "audit",
																					"value": "<string>"
																				}
																			],
																			"variable": [
																				{
																					"key": "table"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"success\": false,\n \"debug\": {}\n}"
																}
															]
														}
													]
												},
												{
													"name": "Creates or replaces a piece of content of a facade in the data store",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {",
																	"    pm.response.to.have.status(403);",
																	"});",
																	"",
																	"pm.test(\"Body matches string\", function () {",
																	"    pm.expect(pm.response.json()).to.eql({ reason: 'not authorized' } );",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_facade/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>"
																},
																{
																	"key": "audit",
																	"value": "<string>"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "debug",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table",
																	"value": "<string>",
																	"description": "(Required) "
																},
																{
																	"key": "key",
																	"value": "<string>",
																	"description": "(Required) "
																}
															]
														},
														"description": "Creates or replaces a piece of content of a facade in the data store.  Overwrites the old\n version of the content, if it exists.  Expects a literal JSON representation\n of the object."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/_facade/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		":table",
																		":key"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta.",
											"item": [
												{
													"name": "TC: Request with api-key without access",
													"item": [
														{
															"name": "Creates table /sor/1/_table/{table}",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var uuid = require('uuid');",
																			"postman.setEnvironmentVariable('table', 'table_'+uuid.v4());"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																			"",
																			"if(!isLocal) {",
																			"    pm.test(\"Status code is 200\", function () {",
																			"        pm.response.to.have.status(200);",
																			"    });",
																			"",
																			"    pm.test(\"Body matches string\", function () {",
																			"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																			"    });",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PUT",
																"header": [
																	{
																		"key": "X-BV-API-Key",
																		"type": "text",
																		"value": "{{api_key}}"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_eu:ugc'&audit=comment:'initial+provisioning'",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "placement:'ugc_eu:ugc'"
																		},
																		{
																			"key": "audit",
																			"value": "comment:'initial+provisioning'"
																		}
																	]
																},
																"description": "Returns a SuccessResponse if table is created"
															},
															"response": []
														},
														{
															"name": "Creates a facade",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																			"",
																			"if(!isLocal) {",
																			"    pm.test(\"Status code is 200\", function () {",
																			"        pm.response.to.have.status(200);",
																			"    });",
																			"",
																			"    pm.test(\"Body matches string\", function () {",
																			"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																			"    });",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PUT",
																"header": [
																	{
																		"key": "X-BV-Api-Key",
																		"value": "{{api_key}}",
																		"type": "text"
																	}
																],
																"url": {
																	"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}?options=placement:'ugc_us:ugc'&audit=audit=comment:'initial+facade+provisioning'",
																	"host": [
																		"{{baseurl_dc2}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "placement:'ugc_us:ugc'"
																		},
																		{
																			"key": "audit",
																			"value": "audit=comment:'initial+facade+provisioning'"
																		}
																	]
																},
																"description": "Returns a SuccessResponse if facade is created"
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "PUT",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/sor/1/_facade/:table?options=<string>&audit=<string>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"sor",
																				"1",
																				"_facade",
																				":table"
																			],
																			"query": [
																				{
																					"key": "options",
																					"value": "<string>"
																				},
																				{
																					"key": "audit",
																					"value": "<string>"
																				}
																			],
																			"variable": [
																				{
																					"key": "table"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"success\": false,\n \"debug\": {}\n}"
																}
															]
														},
														{
															"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta.",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																			"",
																			"if(!isLocal) {",
																			"    pm.test(\"Status code is 403\", function () {",
																			"        pm.response.to.have.status(403);",
																			"    });",
																			"",
																			"    pm.test(\"Body matches string\", function () {",
																			"        pm.expect(pm.response.json()).to.eql({\"reason\":\"not authorized\"});",
																			"    });",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/x.json-delta"
																	},
																	{
																		"key": "X-BV-Api-Key",
																		"value": "{{api_key_no_rights}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "\"<string>\""
																},
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_facade/{{table}}/{{key}}?audit=comment:'modify+info+in+facade'&consistency=STRONG&tag=postman&tag=postman1&debug=false",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{{table}}",
																		"{{key}}"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": "<string>",
																			"disabled": true
																		},
																		{
																			"key": "audit",
																			"value": "comment:'modify+info+in+facade'"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": "postman"
																		},
																		{
																			"key": "tag",
																			"value": "postman1"
																		},
																		{
																			"key": "debug",
																			"value": "false"
																		}
																	]
																},
																"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "POST",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/sor/1/_facade/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"sor",
																				"1",
																				"_facade",
																				":table",
																				":key"
																			],
																			"query": [
																				{
																					"key": "changeId",
																					"value": "<string>"
																				},
																				{
																					"key": "audit",
																					"value": "<string>"
																				},
																				{
																					"key": "consistency",
																					"value": "STRONG"
																				},
																				{
																					"key": "tag",
																					"value": "<string>"
																				},
																				{
																					"key": "tag",
																					"value": "<string>"
																				},
																				{
																					"key": "debug",
																					"value": "<string>"
																				}
																			],
																			"variable": [
																				{
																					"key": "table"
																				},
																				{
																					"key": "key"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"success\": false,\n \"debug\": {}\n}"
																}
															]
														},
														{
															"name": "Drops a table",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																			"",
																			"if(!isLocal) {",
																			"    pm.test(\"Status code is 200\", function () {",
																			"        pm.response.to.have.status(200);",
																			"    });",
																			"",
																			"    pm.test(\"Body matches string\", function () {",
																			"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																			"    });",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "X-BV-API-Key",
																		"type": "text",
																		"value": "{{api_key}}"
																	}
																],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "comment:'table_removal'"
																		}
																	]
																},
																"description": "Returns a SuccessResponse if table is dropped"
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "DELETE",
																		"header": [],
																		"url": {
																			"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																			"host": [
																				"{{baseurl_dc1}}"
																			],
																			"path": [
																				"sor",
																				"1",
																				"_table",
																				":table"
																			],
																			"query": [
																				{
																					"key": "audit",
																					"value": "<string>"
																				}
																			],
																			"variable": [
																				{
																					"key": "table"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"success\": false,\n \"debug\": {}\n}"
																}
															]
														}
													]
												},
												{
													"name": "TC: Request with all parameters and debug set to true",
													"item": [
														{
															"name": "Creates table /sor/1/_table/{table}",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var uuid = require('uuid');",
																			"postman.setEnvironmentVariable('table', 'table_'+uuid.v4());"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																			"",
																			"if(!isLocal) {",
																			"    pm.test(\"Status code is 200\", function () {",
																			"        pm.response.to.have.status(200);",
																			"    });",
																			"",
																			"    pm.test(\"Body matches string\", function () {",
																			"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																			"    });",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PUT",
																"header": [
																	{
																		"key": "X-BV-API-Key",
																		"type": "text",
																		"value": "{{api_key}}"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_eu:ugc'&audit=comment:'initial+provisioning'",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "placement:'ugc_eu:ugc'"
																		},
																		{
																			"key": "audit",
																			"value": "comment:'initial+provisioning'"
																		}
																	]
																},
																"description": "Returns a SuccessResponse if table is created"
															},
															"response": []
														},
														{
															"name": "Creates a facade",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																			"",
																			"if(!isLocal) {",
																			"    pm.test(\"Status code is 200\", function () {",
																			"        pm.response.to.have.status(200);",
																			"    });",
																			"",
																			"    pm.test(\"Body matches string\", function () {",
																			"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																			"    });",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PUT",
																"header": [
																	{
																		"key": "X-BV-Api-Key",
																		"value": "{{api_key}}",
																		"type": "text"
																	}
																],
																"url": {
																	"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}?options=placement:'ugc_us:ugc'&audit=audit=comment:'initial+facade+provisioning'",
																	"host": [
																		"{{baseurl_dc2}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "placement:'ugc_us:ugc'"
																		},
																		{
																			"key": "audit",
																			"value": "audit=comment:'initial+facade+provisioning'"
																		}
																	]
																},
																"description": "Returns a SuccessResponse if facade is created"
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "PUT",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/sor/1/_facade/:table?options=<string>&audit=<string>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"sor",
																				"1",
																				"_facade",
																				":table"
																			],
																			"query": [
																				{
																					"key": "options",
																					"value": "<string>"
																				},
																				{
																					"key": "audit",
																					"value": "<string>"
																				}
																			],
																			"variable": [
																				{
																					"key": "table"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"success\": false,\n \"debug\": {}\n}"
																}
															]
														},
														{
															"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta.",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																			"",
																			"if(!isLocal) {",
																			"    pm.test(\"Status code is 200\", function () {",
																			"        pm.response.to.have.status(200);",
																			"    });",
																			"",
																			"    pm.test(\"Body matches string\", function () {",
																			"        pm.expect(pm.response.json()).to.have.keys(\"success\",\"debug\");",
																			"        pm.expect(pm.response.json().success).to.eql(true);",
																			"        pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
																			"    });",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/x.json-delta"
																	},
																	{
																		"key": "X-BV-Api-Key",
																		"value": "{{api_key}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
																},
																"url": {
																	"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}/{{key}}?audit=comment:'modify+info+in+facade'&consistency=STRONG&tag=postman&tag=postman1&debug=true",
																	"host": [
																		"{{baseurl_dc2}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{{table}}",
																		"{{key}}"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": "<string>",
																			"disabled": true
																		},
																		{
																			"key": "audit",
																			"value": "comment:'modify+info+in+facade'"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": "postman"
																		},
																		{
																			"key": "tag",
																			"value": "postman1"
																		},
																		{
																			"key": "debug",
																			"value": "true"
																		}
																	]
																},
																"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "POST",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/sor/1/_facade/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"sor",
																				"1",
																				"_facade",
																				":table",
																				":key"
																			],
																			"query": [
																				{
																					"key": "changeId",
																					"value": "<string>"
																				},
																				{
																					"key": "audit",
																					"value": "<string>"
																				},
																				{
																					"key": "consistency",
																					"value": "STRONG"
																				},
																				{
																					"key": "tag",
																					"value": "<string>"
																				},
																				{
																					"key": "tag",
																					"value": "<string>"
																				},
																				{
																					"key": "debug",
																					"value": "<string>"
																				}
																			],
																			"variable": [
																				{
																					"key": "table"
																				},
																				{
																					"key": "key"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"success\": false,\n \"debug\": {}\n}"
																}
															]
														},
														{
															"name": "Drops a table",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																			"",
																			"if(!isLocal) {",
																			"    pm.test(\"Status code is 200\", function () {",
																			"        pm.response.to.have.status(200);",
																			"    });",
																			"",
																			"    pm.test(\"Body matches string\", function () {",
																			"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																			"    });",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "X-BV-API-Key",
																		"type": "text",
																		"value": "{{api_key}}"
																	}
																],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "comment:'table_removal'"
																		}
																	]
																},
																"description": "Returns a SuccessResponse if table is dropped"
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "DELETE",
																		"header": [],
																		"url": {
																			"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																			"host": [
																				"{{baseurl_dc1}}"
																			],
																			"path": [
																				"sor",
																				"1",
																				"_table",
																				":table"
																			],
																			"query": [
																				{
																					"key": "audit",
																					"value": "<string>"
																				}
																			],
																			"variable": [
																				{
																					"key": "table"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"success\": false,\n \"debug\": {}\n}"
																}
															]
														}
													]
												},
												{
													"name": "TC: Request with all parameters and debug set to false",
													"item": [
														{
															"name": "Creates table /sor/1/_table/{table}",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var uuid = require('uuid');",
																			"postman.setEnvironmentVariable('table', 'table_'+uuid.v4());"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																			"",
																			"if(!isLocal) {",
																			"    pm.test(\"Status code is 200\", function () {",
																			"        pm.response.to.have.status(200);",
																			"    });",
																			"",
																			"    pm.test(\"Body matches string\", function () {",
																			"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																			"    });",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PUT",
																"header": [
																	{
																		"key": "X-BV-API-Key",
																		"type": "text",
																		"value": "{{api_key}}"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_eu:ugc'&audit=comment:'initial+provisioning'",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "placement:'ugc_eu:ugc'"
																		},
																		{
																			"key": "audit",
																			"value": "comment:'initial+provisioning'"
																		}
																	]
																},
																"description": "Returns a SuccessResponse if table is created"
															},
															"response": []
														},
														{
															"name": "Creates a facade",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																			"",
																			"if(!isLocal) {",
																			"    pm.test(\"Status code is 200\", function () {",
																			"        pm.response.to.have.status(200);",
																			"    });",
																			"",
																			"    pm.test(\"Body matches string\", function () {",
																			"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																			"    });",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PUT",
																"header": [
																	{
																		"key": "X-BV-Api-Key",
																		"value": "{{api_key}}",
																		"type": "text"
																	}
																],
																"url": {
																	"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}?options=placement:'ugc_us:ugc'&audit=audit=comment:'initial+facade+provisioning'",
																	"host": [
																		"{{baseurl_dc2}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "placement:'ugc_us:ugc'"
																		},
																		{
																			"key": "audit",
																			"value": "audit=comment:'initial+facade+provisioning'"
																		}
																	]
																},
																"description": "Returns a SuccessResponse if facade is created"
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "PUT",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/sor/1/_facade/:table?options=<string>&audit=<string>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"sor",
																				"1",
																				"_facade",
																				":table"
																			],
																			"query": [
																				{
																					"key": "options",
																					"value": "<string>"
																				},
																				{
																					"key": "audit",
																					"value": "<string>"
																				}
																			],
																			"variable": [
																				{
																					"key": "table"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"success\": false,\n \"debug\": {}\n}"
																}
															]
														},
														{
															"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta.",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																			"",
																			"if(!isLocal) {",
																			"    pm.test(\"Status code is 200\", function () {",
																			"        pm.response.to.have.status(200);",
																			"    });",
																			"",
																			"    pm.test(\"Body matches string\", function () {",
																			"        pm.expect(pm.response.json()).to.eql({ \"success\": true });",
																			"    });",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/x.json-delta"
																	},
																	{
																		"key": "X-BV-Api-Key",
																		"value": "{{api_key}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
																},
																"url": {
																	"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}/{{key}}?audit=comment:'modify+info+in+facade'&consistency=STRONG&tag=postman&tag=postman1&debug=false",
																	"host": [
																		"{{baseurl_dc2}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{{table}}",
																		"{{key}}"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": "<string>",
																			"disabled": true
																		},
																		{
																			"key": "audit",
																			"value": "comment:'modify+info+in+facade'"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": "postman"
																		},
																		{
																			"key": "tag",
																			"value": "postman1"
																		},
																		{
																			"key": "debug",
																			"value": "false"
																		}
																	]
																},
																"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "POST",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/sor/1/_facade/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"sor",
																				"1",
																				"_facade",
																				":table",
																				":key"
																			],
																			"query": [
																				{
																					"key": "changeId",
																					"value": "<string>"
																				},
																				{
																					"key": "audit",
																					"value": "<string>"
																				},
																				{
																					"key": "consistency",
																					"value": "STRONG"
																				},
																				{
																					"key": "tag",
																					"value": "<string>"
																				},
																				{
																					"key": "tag",
																					"value": "<string>"
																				},
																				{
																					"key": "debug",
																					"value": "<string>"
																				}
																			],
																			"variable": [
																				{
																					"key": "table"
																				},
																				{
																					"key": "key"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"success\": false,\n \"debug\": {}\n}"
																}
															]
														},
														{
															"name": "Drops a table",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																			"",
																			"if(!isLocal) {",
																			"    pm.test(\"Status code is 200\", function () {",
																			"        pm.response.to.have.status(200);",
																			"    });",
																			"",
																			"    pm.test(\"Body matches string\", function () {",
																			"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																			"    });",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "X-BV-API-Key",
																		"type": "text",
																		"value": "{{api_key}}"
																	}
																],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "comment:'table_removal'"
																		}
																	]
																},
																"description": "Returns a SuccessResponse if table is dropped"
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "DELETE",
																		"header": [],
																		"url": {
																			"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																			"host": [
																				"{{baseurl_dc1}}"
																			],
																			"path": [
																				"sor",
																				"1",
																				"_table",
																				":table"
																			],
																			"query": [
																				{
																					"key": "audit",
																					"value": "<string>"
																				}
																			],
																			"variable": [
																				{
																					"key": "table"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"success\": false,\n \"debug\": {}\n}"
																}
															]
														}
													]
												},
												{
													"name": "TC: Request with correct data to wrong datacenter",
													"item": [
														{
															"name": "Creates table /sor/1/_table/{table}",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var uuid = require('uuid');",
																			"postman.setEnvironmentVariable('table', 'table_'+uuid.v4());"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																			"",
																			"if(!isLocal) {",
																			"    pm.test(\"Status code is 200\", function () {",
																			"        pm.response.to.have.status(200);",
																			"    });",
																			"",
																			"    pm.test(\"Body matches string\", function () {",
																			"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																			"    });",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PUT",
																"header": [
																	{
																		"key": "X-BV-API-Key",
																		"type": "text",
																		"value": "{{api_key}}"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_eu:ugc'&audit=comment:'initial+provisioning'",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "placement:'ugc_eu:ugc'"
																		},
																		{
																			"key": "audit",
																			"value": "comment:'initial+provisioning'"
																		}
																	]
																},
																"description": "Returns a SuccessResponse if table is created"
															},
															"response": []
														},
														{
															"name": "Creates a facade",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																			"",
																			"if(!isLocal) {",
																			"    pm.test(\"Status code is 200\", function () {",
																			"        pm.response.to.have.status(200);",
																			"    });",
																			"",
																			"    pm.test(\"Body matches string\", function () {",
																			"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																			"    });",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PUT",
																"header": [
																	{
																		"key": "X-BV-Api-Key",
																		"value": "{{api_key}}",
																		"type": "text"
																	}
																],
																"url": {
																	"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}?options=placement:'ugc_us:ugc'&audit=audit=comment:'initial+facade+provisioning'",
																	"host": [
																		"{{baseurl_dc2}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "placement:'ugc_us:ugc'"
																		},
																		{
																			"key": "audit",
																			"value": "audit=comment:'initial+facade+provisioning'"
																		}
																	]
																},
																"description": "Returns a SuccessResponse if facade is created"
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "PUT",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/sor/1/_facade/:table?options=<string>&audit=<string>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"sor",
																				"1",
																				"_facade",
																				":table"
																			],
																			"query": [
																				{
																					"key": "options",
																					"value": "<string>"
																				},
																				{
																					"key": "audit",
																					"value": "<string>"
																				}
																			],
																			"variable": [
																				{
																					"key": "table"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"success\": false,\n \"debug\": {}\n}"
																}
															]
														},
														{
															"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta.",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																			"",
																			"if(!isLocal) {",
																			"    pm.test(\"Status code is 403\", function () {",
																			"        pm.response.to.have.status(403);",
																			"    });",
																			"",
																			"    pm.test(\"Body matches string\", function () {",
																			"        pm.expect(pm.response.text()).to.eql(\"Access denied. Update intended for a facade, but the table would be updated.\");",
																			"    });",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/x.json-delta"
																	},
																	{
																		"key": "X-BV-Api-Key",
																		"value": "{{api_key}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
																},
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_facade/{{table}}/{{key}}?audit=comment:'modify+info+in+facade'&consistency=STRONG&tag=postman&tag=postman1&debug=true",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{{table}}",
																		"{{key}}"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": "<string>",
																			"disabled": true
																		},
																		{
																			"key": "audit",
																			"value": "comment:'modify+info+in+facade'"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": "postman"
																		},
																		{
																			"key": "tag",
																			"value": "postman1"
																		},
																		{
																			"key": "debug",
																			"value": "true"
																		}
																	]
																},
																"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "POST",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/sor/1/_facade/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"sor",
																				"1",
																				"_facade",
																				":table",
																				":key"
																			],
																			"query": [
																				{
																					"key": "changeId",
																					"value": "<string>"
																				},
																				{
																					"key": "audit",
																					"value": "<string>"
																				},
																				{
																					"key": "consistency",
																					"value": "STRONG"
																				},
																				{
																					"key": "tag",
																					"value": "<string>"
																				},
																				{
																					"key": "tag",
																					"value": "<string>"
																				},
																				{
																					"key": "debug",
																					"value": "<string>"
																				}
																			],
																			"variable": [
																				{
																					"key": "table"
																				},
																				{
																					"key": "key"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"success\": false,\n \"debug\": {}\n}"
																}
															]
														},
														{
															"name": "Drops a table",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																			"",
																			"if(!isLocal) {",
																			"    pm.test(\"Status code is 200\", function () {",
																			"        pm.response.to.have.status(200);",
																			"    });",
																			"",
																			"    pm.test(\"Body matches string\", function () {",
																			"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																			"    });",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "X-BV-API-Key",
																		"type": "text",
																		"value": "{{api_key}}"
																	}
																],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "comment:'table_removal'"
																		}
																	]
																},
																"description": "Returns a SuccessResponse if table is dropped"
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "DELETE",
																		"header": [],
																		"url": {
																			"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																			"host": [
																				"{{baseurl_dc1}}"
																			],
																			"path": [
																				"sor",
																				"1",
																				"_table",
																				":table"
																			],
																			"query": [
																				{
																					"key": "audit",
																					"value": "<string>"
																				}
																			],
																			"variable": [
																				{
																					"key": "table"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"success\": false,\n \"debug\": {}\n}"
																}
															]
														}
													]
												},
												{
													"name": "TC: Request with correct data to not existing table",
													"item": [
														{
															"name": "Creates table /sor/1/_table/{table}",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var uuid = require('uuid');",
																			"postman.setEnvironmentVariable('table', 'table_'+uuid.v4());"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																			"",
																			"if(!isLocal) {",
																			"    pm.test(\"Status code is 200\", function () {",
																			"        pm.response.to.have.status(200);",
																			"    });",
																			"",
																			"    pm.test(\"Body matches string\", function () {",
																			"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																			"    });",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PUT",
																"header": [
																	{
																		"key": "X-BV-API-Key",
																		"type": "text",
																		"value": "{{api_key}}"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_eu:ugc'&audit=comment:'initial+provisioning'",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "placement:'ugc_eu:ugc'"
																		},
																		{
																			"key": "audit",
																			"value": "comment:'initial+provisioning'"
																		}
																	]
																},
																"description": "Returns a SuccessResponse if table is created"
															},
															"response": []
														},
														{
															"name": "Creates a facade",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																			"",
																			"if(!isLocal) {",
																			"    pm.test(\"Status code is 200\", function () {",
																			"        pm.response.to.have.status(200);",
																			"    });",
																			"",
																			"    pm.test(\"Body matches string\", function () {",
																			"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																			"    });",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PUT",
																"header": [
																	{
																		"key": "X-BV-Api-Key",
																		"value": "{{api_key}}",
																		"type": "text"
																	}
																],
																"url": {
																	"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}?options=placement:'ugc_us:ugc'&audit=audit=comment:'initial+facade+provisioning'",
																	"host": [
																		"{{baseurl_dc2}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "placement:'ugc_us:ugc'"
																		},
																		{
																			"key": "audit",
																			"value": "audit=comment:'initial+facade+provisioning'"
																		}
																	]
																},
																"description": "Returns a SuccessResponse if facade is created"
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "PUT",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/sor/1/_facade/:table?options=<string>&audit=<string>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"sor",
																				"1",
																				"_facade",
																				":table"
																			],
																			"query": [
																				{
																					"key": "options",
																					"value": "<string>"
																				},
																				{
																					"key": "audit",
																					"value": "<string>"
																				}
																			],
																			"variable": [
																				{
																					"key": "table"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"success\": false,\n \"debug\": {}\n}"
																}
															]
														},
														{
															"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta.",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																			"",
																			"if(!isLocal) {",
																			"    pm.test(\"Status code is 404\", function () {",
																			"        pm.response.to.have.status(404);",
																			"    });",
																			"",
																			"    pm.test(\"Body matches string\", function () {",
																			"        pm.expect(pm.response.json()).to.eql({\"message\":\"Unknown table: not_existing_table\",\"table\":\"not_existing_table\",\"suppressed\":[]});",
																			"    });",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/x.json-delta"
																	},
																	{
																		"key": "X-BV-Api-Key",
																		"value": "{{api_key}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
																},
																"url": {
																	"raw": "{{baseurl_dc2}}/sor/1/_facade/not_existing_table/{{key}}?audit=comment:'modify+info+in+facade'&consistency=STRONG&tag=postman&tag=postman1&debug=true",
																	"host": [
																		"{{baseurl_dc2}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"not_existing_table",
																		"{{key}}"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": "<string>",
																			"disabled": true
																		},
																		{
																			"key": "audit",
																			"value": "comment:'modify+info+in+facade'"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": "postman"
																		},
																		{
																			"key": "tag",
																			"value": "postman1"
																		},
																		{
																			"key": "debug",
																			"value": "true"
																		}
																	]
																},
																"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "POST",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/sor/1/_facade/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"sor",
																				"1",
																				"_facade",
																				":table",
																				":key"
																			],
																			"query": [
																				{
																					"key": "changeId",
																					"value": "<string>"
																				},
																				{
																					"key": "audit",
																					"value": "<string>"
																				},
																				{
																					"key": "consistency",
																					"value": "STRONG"
																				},
																				{
																					"key": "tag",
																					"value": "<string>"
																				},
																				{
																					"key": "tag",
																					"value": "<string>"
																				},
																				{
																					"key": "debug",
																					"value": "<string>"
																				}
																			],
																			"variable": [
																				{
																					"key": "table"
																				},
																				{
																					"key": "key"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"success\": false,\n \"debug\": {}\n}"
																}
															]
														},
														{
															"name": "Drops a table",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																			"",
																			"if(!isLocal) {",
																			"    pm.test(\"Status code is 200\", function () {",
																			"        pm.response.to.have.status(200);",
																			"    });",
																			"",
																			"    pm.test(\"Body matches string\", function () {",
																			"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																			"    });",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "X-BV-API-Key",
																		"type": "text",
																		"value": "{{api_key}}"
																	}
																],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "comment:'table_removal'"
																		}
																	]
																},
																"description": "Returns a SuccessResponse if table is dropped"
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "DELETE",
																		"header": [],
																		"url": {
																			"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																			"host": [
																				"{{baseurl_dc1}}"
																			],
																			"path": [
																				"sor",
																				"1",
																				"_table",
																				":table"
																			],
																			"query": [
																				{
																					"key": "audit",
																					"value": "<string>"
																				}
																			],
																			"variable": [
																				{
																					"key": "table"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"success\": false,\n \"debug\": {}\n}"
																}
															]
														}
													]
												},
												{
													"name": "TC: Request with correct data to not existing key",
													"item": [
														{
															"name": "Creates table /sor/1/_table/{table}",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var uuid = require('uuid');",
																			"postman.setEnvironmentVariable('table', 'table_'+uuid.v4());"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																			"",
																			"if(!isLocal) {",
																			"    pm.test(\"Status code is 200\", function () {",
																			"        pm.response.to.have.status(200);",
																			"    });",
																			"",
																			"    pm.test(\"Body matches string\", function () {",
																			"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																			"    });",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PUT",
																"header": [
																	{
																		"key": "X-BV-API-Key",
																		"type": "text",
																		"value": "{{api_key}}"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_eu:ugc'&audit=comment:'initial+provisioning'",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "placement:'ugc_eu:ugc'"
																		},
																		{
																			"key": "audit",
																			"value": "comment:'initial+provisioning'"
																		}
																	]
																},
																"description": "Returns a SuccessResponse if table is created"
															},
															"response": []
														},
														{
															"name": "Creates a facade",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																			"",
																			"if(!isLocal) {",
																			"    pm.test(\"Status code is 200\", function () {",
																			"        pm.response.to.have.status(200);",
																			"    });",
																			"",
																			"    pm.test(\"Body matches string\", function () {",
																			"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																			"    });",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PUT",
																"header": [
																	{
																		"key": "X-BV-Api-Key",
																		"value": "{{api_key}}",
																		"type": "text"
																	}
																],
																"url": {
																	"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}?options=placement:'ugc_us:ugc'&audit=audit=comment:'initial+facade+provisioning'",
																	"host": [
																		"{{baseurl_dc2}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "placement:'ugc_us:ugc'"
																		},
																		{
																			"key": "audit",
																			"value": "audit=comment:'initial+facade+provisioning'"
																		}
																	]
																},
																"description": "Returns a SuccessResponse if facade is created"
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "PUT",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/sor/1/_facade/:table?options=<string>&audit=<string>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"sor",
																				"1",
																				"_facade",
																				":table"
																			],
																			"query": [
																				{
																					"key": "options",
																					"value": "<string>"
																				},
																				{
																					"key": "audit",
																					"value": "<string>"
																				}
																			],
																			"variable": [
																				{
																					"key": "table"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"success\": false,\n \"debug\": {}\n}"
																}
															]
														},
														{
															"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta.",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																			"",
																			"if(!isLocal) {",
																			"    pm.test(\"Status code is 200\", function () {",
																			"        pm.response.to.have.status(200);",
																			"    });",
																			"",
																			"    pm.test(\"Body matches string\", function () {",
																			"        pm.expect(pm.response.json()).to.have.keys(\"success\",\"debug\");",
																			"        pm.expect(pm.response.json().success).to.eql(true);",
																			"        pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
																			"    });",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/x.json-delta"
																	},
																	{
																		"key": "X-BV-Api-Key",
																		"value": "{{api_key}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
																},
																"url": {
																	"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}/not_existing_key?audit=comment:'modify+info+in+facade'&consistency=STRONG&tag=postman&tag=postman1&debug=true",
																	"host": [
																		"{{baseurl_dc2}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{{table}}",
																		"not_existing_key"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": "<string>",
																			"disabled": true
																		},
																		{
																			"key": "audit",
																			"value": "comment:'modify+info+in+facade'"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": "postman"
																		},
																		{
																			"key": "tag",
																			"value": "postman1"
																		},
																		{
																			"key": "debug",
																			"value": "true"
																		}
																	]
																},
																"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "POST",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/sor/1/_facade/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"sor",
																				"1",
																				"_facade",
																				":table",
																				":key"
																			],
																			"query": [
																				{
																					"key": "changeId",
																					"value": "<string>"
																				},
																				{
																					"key": "audit",
																					"value": "<string>"
																				},
																				{
																					"key": "consistency",
																					"value": "STRONG"
																				},
																				{
																					"key": "tag",
																					"value": "<string>"
																				},
																				{
																					"key": "tag",
																					"value": "<string>"
																				},
																				{
																					"key": "debug",
																					"value": "<string>"
																				}
																			],
																			"variable": [
																				{
																					"key": "table"
																				},
																				{
																					"key": "key"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"success\": false,\n \"debug\": {}\n}"
																}
															]
														},
														{
															"name": "Drops a table",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																			"",
																			"if(!isLocal) {",
																			"    pm.test(\"Status code is 200\", function () {",
																			"        pm.response.to.have.status(200);",
																			"    });",
																			"",
																			"    pm.test(\"Body matches string\", function () {",
																			"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																			"    });",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "X-BV-API-Key",
																		"type": "text",
																		"value": "{{api_key}}"
																	}
																],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "comment:'table_removal'"
																		}
																	]
																},
																"description": "Returns a SuccessResponse if table is dropped"
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "DELETE",
																		"header": [],
																		"url": {
																			"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																			"host": [
																				"{{baseurl_dc1}}"
																			],
																			"path": [
																				"sor",
																				"1",
																				"_table",
																				":table"
																			],
																			"query": [
																				{
																					"key": "audit",
																					"value": "<string>"
																				}
																			],
																			"variable": [
																				{
																					"key": "table"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"success\": false,\n \"debug\": {}\n}"
																}
															]
														}
													]
												},
												{
													"name": "TC: Request with wrong changeId",
													"item": [
														{
															"name": "Creates table /sor/1/_table/{table}",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var uuid = require('uuid');",
																			"postman.setEnvironmentVariable('table', 'table_'+uuid.v4());"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																			"",
																			"if(!isLocal) {",
																			"    pm.test(\"Status code is 200\", function () {",
																			"        pm.response.to.have.status(200);",
																			"    });",
																			"",
																			"    pm.test(\"Body matches string\", function () {",
																			"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																			"    });",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PUT",
																"header": [
																	{
																		"key": "X-BV-API-Key",
																		"type": "text",
																		"value": "{{api_key}}"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_eu:ugc'&audit=comment:'initial+provisioning'",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "placement:'ugc_eu:ugc'"
																		},
																		{
																			"key": "audit",
																			"value": "comment:'initial+provisioning'"
																		}
																	]
																},
																"description": "Returns a SuccessResponse if table is created"
															},
															"response": []
														},
														{
															"name": "Creates a facade",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																			"",
																			"if(!isLocal) {",
																			"    pm.test(\"Status code is 200\", function () {",
																			"        pm.response.to.have.status(200);",
																			"    });",
																			"",
																			"    pm.test(\"Body matches string\", function () {",
																			"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																			"    });",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PUT",
																"header": [
																	{
																		"key": "X-BV-Api-Key",
																		"value": "{{api_key}}",
																		"type": "text"
																	}
																],
																"url": {
																	"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}?options=placement:'ugc_us:ugc'&audit=audit=comment:'initial+facade+provisioning'",
																	"host": [
																		"{{baseurl_dc2}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "placement:'ugc_us:ugc'"
																		},
																		{
																			"key": "audit",
																			"value": "audit=comment:'initial+facade+provisioning'"
																		}
																	]
																},
																"description": "Returns a SuccessResponse if facade is created"
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "PUT",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/sor/1/_facade/:table?options=<string>&audit=<string>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"sor",
																				"1",
																				"_facade",
																				":table"
																			],
																			"query": [
																				{
																					"key": "options",
																					"value": "<string>"
																				},
																				{
																					"key": "audit",
																					"value": "<string>"
																				}
																			],
																			"variable": [
																				{
																					"key": "table"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"success\": false,\n \"debug\": {}\n}"
																}
															]
														},
														{
															"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta.",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																			"",
																			"if(!isLocal) {",
																			"    pm.test(\"Status code is 400\", function () {",
																			"        pm.response.to.have.status(400);",
																			"    });",
																			"",
																			"    pm.test(\"Body matches string\", function () {",
																			"        pm.expect(pm.response.text()).to.eql(\"Invalid uuid parameter (must be a RFC 4122 version 1 time-based uuid): someIncorrectUUID\");",
																			"    });",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/x.json-delta"
																	},
																	{
																		"key": "X-BV-Api-Key",
																		"value": "{{api_key}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
																},
																"url": {
																	"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}/{{key}}?changeId=someIncorrectUUID&audit=comment:'modify+info+in+facade'&consistency=STRONG&tag=postman&tag=postman1&debug=true",
																	"host": [
																		"{{baseurl_dc2}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{{table}}",
																		"{{key}}"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": "someIncorrectUUID"
																		},
																		{
																			"key": "audit",
																			"value": "comment:'modify+info+in+facade'"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": "postman"
																		},
																		{
																			"key": "tag",
																			"value": "postman1"
																		},
																		{
																			"key": "debug",
																			"value": "true"
																		}
																	]
																},
																"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "POST",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/sor/1/_facade/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"sor",
																				"1",
																				"_facade",
																				":table",
																				":key"
																			],
																			"query": [
																				{
																					"key": "changeId",
																					"value": "<string>"
																				},
																				{
																					"key": "audit",
																					"value": "<string>"
																				},
																				{
																					"key": "consistency",
																					"value": "STRONG"
																				},
																				{
																					"key": "tag",
																					"value": "<string>"
																				},
																				{
																					"key": "tag",
																					"value": "<string>"
																				},
																				{
																					"key": "debug",
																					"value": "<string>"
																				}
																			],
																			"variable": [
																				{
																					"key": "table"
																				},
																				{
																					"key": "key"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"success\": false,\n \"debug\": {}\n}"
																}
															]
														},
														{
															"name": "Drops a table",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																			"",
																			"if(!isLocal) {",
																			"    pm.test(\"Status code is 200\", function () {",
																			"        pm.response.to.have.status(200);",
																			"    });",
																			"",
																			"    pm.test(\"Body matches string\", function () {",
																			"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																			"    });",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "X-BV-API-Key",
																		"type": "text",
																		"value": "{{api_key}}"
																	}
																],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "comment:'table_removal'"
																		}
																	]
																},
																"description": "Returns a SuccessResponse if table is dropped"
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "DELETE",
																		"header": [],
																		"url": {
																			"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																			"host": [
																				"{{baseurl_dc1}}"
																			],
																			"path": [
																				"sor",
																				"1",
																				"_table",
																				":table"
																			],
																			"query": [
																				{
																					"key": "audit",
																					"value": "<string>"
																				}
																			],
																			"variable": [
																				{
																					"key": "table"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"success\": false,\n \"debug\": {}\n}"
																}
															]
														}
													]
												},
												{
													"name": "TC: Request without audit param",
													"item": [
														{
															"name": "Creates table /sor/1/_table/{table}",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var uuid = require('uuid');",
																			"postman.setEnvironmentVariable('table', 'table_'+uuid.v4());"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																			"",
																			"if(!isLocal) {",
																			"    pm.test(\"Status code is 200\", function () {",
																			"        pm.response.to.have.status(200);",
																			"    });",
																			"",
																			"    pm.test(\"Body matches string\", function () {",
																			"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																			"    });",
																			"}",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PUT",
																"header": [
																	{
																		"key": "X-BV-API-Key",
																		"type": "text",
																		"value": "{{api_key}}"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_eu:ugc'&audit=comment:'initial+provisioning'",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "placement:'ugc_eu:ugc'"
																		},
																		{
																			"key": "audit",
																			"value": "comment:'initial+provisioning'"
																		}
																	]
																},
																"description": "Returns a SuccessResponse if table is created"
															},
															"response": []
														},
														{
															"name": "Creates a facade",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																			"",
																			"if(!isLocal) {",
																			"    pm.test(\"Status code is 200\", function () {",
																			"        pm.response.to.have.status(200);",
																			"    });",
																			"",
																			"    pm.test(\"Body matches string\", function () {",
																			"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																			"    });",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PUT",
																"header": [
																	{
																		"key": "X-BV-Api-Key",
																		"value": "{{api_key}}",
																		"type": "text"
																	}
																],
																"url": {
																	"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}?options=placement:'ugc_us:ugc'&audit=audit=comment:'initial+facade+provisioning'",
																	"host": [
																		"{{baseurl_dc2}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "placement:'ugc_us:ugc'"
																		},
																		{
																			"key": "audit",
																			"value": "audit=comment:'initial+facade+provisioning'"
																		}
																	]
																},
																"description": "Returns a SuccessResponse if facade is created"
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "PUT",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/sor/1/_facade/:table?options=<string>&audit=<string>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"sor",
																				"1",
																				"_facade",
																				":table"
																			],
																			"query": [
																				{
																					"key": "options",
																					"value": "<string>"
																				},
																				{
																					"key": "audit",
																					"value": "<string>"
																				}
																			],
																			"variable": [
																				{
																					"key": "table"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"success\": false,\n \"debug\": {}\n}"
																}
															]
														},
														{
															"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta.",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																			"",
																			"if(!isLocal) {",
																			"    pm.test(\"Status code is 400\", function () {",
																			"        pm.response.to.have.status(400);",
																			"    });",
																			"",
																			"    pm.test(\"Body matches string\", function () {",
																			"        pm.expect(pm.response.text()).to.eql(\"Missing required query parameter: audit\");",
																			"    });",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/x.json-delta"
																	},
																	{
																		"key": "X-BV-Api-Key",
																		"value": "{{api_key}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
																},
																"url": {
																	"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}/{{key}}?consistency=STRONG&tag=postman&tag=postman1&debug=true",
																	"host": [
																		"{{baseurl_dc2}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{{table}}",
																		"{{key}}"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": "someIncorrectUUID",
																			"disabled": true
																		},
																		{
																			"key": "audit",
																			"value": "comment:'modify+info+in+facade'",
																			"disabled": true
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": "postman"
																		},
																		{
																			"key": "tag",
																			"value": "postman1"
																		},
																		{
																			"key": "debug",
																			"value": "true"
																		}
																	]
																},
																"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "POST",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/sor/1/_facade/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"sor",
																				"1",
																				"_facade",
																				":table",
																				":key"
																			],
																			"query": [
																				{
																					"key": "changeId",
																					"value": "<string>"
																				},
																				{
																					"key": "audit",
																					"value": "<string>"
																				},
																				{
																					"key": "consistency",
																					"value": "STRONG"
																				},
																				{
																					"key": "tag",
																					"value": "<string>"
																				},
																				{
																					"key": "tag",
																					"value": "<string>"
																				},
																				{
																					"key": "debug",
																					"value": "<string>"
																				}
																			],
																			"variable": [
																				{
																					"key": "table"
																				},
																				{
																					"key": "key"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"success\": false,\n \"debug\": {}\n}"
																}
															]
														},
														{
															"name": "Drops a table",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																			"",
																			"if(!isLocal) {",
																			"    pm.test(\"Status code is 200\", function () {",
																			"        pm.response.to.have.status(200);",
																			"    });",
																			"",
																			"    pm.test(\"Body matches string\", function () {",
																			"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																			"    });",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "X-BV-API-Key",
																		"type": "text",
																		"value": "{{api_key}}"
																	}
																],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "comment:'table_removal'"
																		}
																	]
																},
																"description": "Returns a SuccessResponse if table is dropped"
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "DELETE",
																		"header": [],
																		"url": {
																			"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																			"host": [
																				"{{baseurl_dc1}}"
																			],
																			"path": [
																				"sor",
																				"1",
																				"_table",
																				":table"
																			],
																			"query": [
																				{
																					"key": "audit",
																					"value": "<string>"
																				}
																			],
																			"variable": [
																				{
																					"key": "table"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"success\": false,\n \"debug\": {}\n}"
																}
															]
														}
													]
												},
												{
													"name": "Creates, modifies or deletes a piece of content in the data store by applying a delta.",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/x.json-delta"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "\"<string>\""
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_facade/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>"
																},
																{
																	"key": "audit",
																	"value": "<string>"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "debug",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table",
																	"value": "<string>",
																	"description": "(Required) "
																},
																{
																	"key": "key",
																	"value": "<string>",
																	"description": "(Required) "
																}
															]
														},
														"description": "Creates, modifies or deletes a piece of content in the data store by\n applying a delta.  Expects a delta in the format produced by the\n {@link Deltas} class and {@link Delta#toString()}."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/_facade/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		":table",
																		":key"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "Deletes a piece of content from a facade in the data store.",
											"item": [
												{
													"name": "TC: Request with api-key without access",
													"item": [
														{
															"name": "Creates table /sor/1/_table/{table}",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var uuid = require('uuid');",
																			"postman.setEnvironmentVariable('table', 'table_'+uuid.v4());"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																			"",
																			"    if(!isLocal) {",
																			"    pm.test(\"Status code is 200\", function () {",
																			"        pm.response.to.have.status(200);",
																			"    });",
																			"",
																			"    pm.test(\"Body matches string\", function () {",
																			"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																			"    });",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PUT",
																"header": [
																	{
																		"key": "X-BV-API-Key",
																		"type": "text",
																		"value": "{{api_key}}"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_eu:ugc'&audit=comment:'initial+provisioning'",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "placement:'ugc_eu:ugc'"
																		},
																		{
																			"key": "audit",
																			"value": "comment:'initial+provisioning'"
																		}
																	]
																},
																"description": "Returns a SuccessResponse if table is created"
															},
															"response": []
														},
														{
															"name": "Creates a facade",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																			"",
																			"if(!isLocal) {",
																			"    pm.test(\"Status code is 200\", function () {",
																			"        pm.response.to.have.status(200);",
																			"    });",
																			"",
																			"    pm.test(\"Body matches string\", function () {",
																			"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																			"    });",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PUT",
																"header": [
																	{
																		"key": "X-BV-Api-Key",
																		"value": "{{api_key}}",
																		"type": "text"
																	}
																],
																"url": {
																	"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}?options=placement:'ugc_us:ugc'&audit=audit=comment:'initial+facade+provisioning'",
																	"host": [
																		"{{baseurl_dc2}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "placement:'ugc_us:ugc'"
																		},
																		{
																			"key": "audit",
																			"value": "audit=comment:'initial+facade+provisioning'"
																		}
																	]
																},
																"description": "Returns a SuccessResponse if facade is created"
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "PUT",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/sor/1/_facade/:table?options=<string>&audit=<string>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"sor",
																				"1",
																				"_facade",
																				":table"
																			],
																			"query": [
																				{
																					"key": "options",
																					"value": "<string>"
																				},
																				{
																					"key": "audit",
																					"value": "<string>"
																				}
																			],
																			"variable": [
																				{
																					"key": "table"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"success\": false,\n \"debug\": {}\n}"
																}
															]
														},
														{
															"name": "Deletes a piece of content from a facade in the data store.",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																			"",
																			"if(!isLocal) {",
																			"    pm.test(\"Status code is 403\", function () {",
																			"        pm.response.to.have.status(403);",
																			"    });",
																			"",
																			"    pm.test(\"Body matches string\", function () {",
																			"        pm.expect(pm.response.json()).to.eql({\"reason\": \"not authorized\"});",
																			"    });",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "X-BV-API-Key",
																		"value": "{{api_key_no_rights}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
																},
																"url": {
																	"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}/{{key}}?audit=comment:'delete+piece+of+content+from+facade'&consistency=STRONG&tag=<string>&tag=<string>&debug=false",
																	"host": [
																		"{{baseurl_dc2}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{{table}}",
																		"{{key}}"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": "<string>",
																			"disabled": true
																		},
																		{
																			"key": "audit",
																			"value": "comment:'delete+piece+of+content+from+facade'"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "debug",
																			"value": "false"
																		}
																	]
																},
																"description": "Deletes a piece of content from a facade in the data store."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "DELETE",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/sor/1/_facade/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"sor",
																				"1",
																				"_facade",
																				":table",
																				":key"
																			],
																			"query": [
																				{
																					"key": "changeId",
																					"value": "<string>"
																				},
																				{
																					"key": "audit",
																					"value": "<string>"
																				},
																				{
																					"key": "consistency",
																					"value": "STRONG"
																				},
																				{
																					"key": "tag",
																					"value": "<string>"
																				},
																				{
																					"key": "tag",
																					"value": "<string>"
																				},
																				{
																					"key": "debug",
																					"value": "<string>"
																				}
																			],
																			"variable": [
																				{
																					"key": "table"
																				},
																				{
																					"key": "key"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"success\": false,\n \"debug\": {}\n}"
																}
															]
														},
														{
															"name": "Drops a table",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																			"",
																			"if(!isLocal) {",
																			"    pm.test(\"Status code is 200\", function () {",
																			"        pm.response.to.have.status(200);",
																			"    });",
																			"",
																			"    pm.test(\"Body matches string\", function () {",
																			"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																			"    });",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "X-BV-API-Key",
																		"type": "text",
																		"value": "{{api_key}}"
																	}
																],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "comment:'table_removal'"
																		}
																	]
																},
																"description": "Returns a SuccessResponse if table is dropped"
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "DELETE",
																		"header": [],
																		"url": {
																			"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																			"host": [
																				"{{baseurl_dc1}}"
																			],
																			"path": [
																				"sor",
																				"1",
																				"_table",
																				":table"
																			],
																			"query": [
																				{
																					"key": "audit",
																					"value": "<string>"
																				}
																			],
																			"variable": [
																				{
																					"key": "table"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"success\": false,\n \"debug\": {}\n}"
																}
															]
														}
													]
												},
												{
													"name": "TC: Request without audit param",
													"item": [
														{
															"name": "Creates table /sor/1/_table/{table}",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var uuid = require('uuid');",
																			"postman.setEnvironmentVariable('table', 'table_'+uuid.v4());"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																			"",
																			"if(!isLocal) {",
																			"    pm.test(\"Status code is 200\", function () {",
																			"        pm.response.to.have.status(200);",
																			"    });",
																			"",
																			"    pm.test(\"Body matches string\", function () {",
																			"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																			"    });",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PUT",
																"header": [
																	{
																		"key": "X-BV-API-Key",
																		"type": "text",
																		"value": "{{api_key}}"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_eu:ugc'&audit=comment:'initial+provisioning'",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "placement:'ugc_eu:ugc'"
																		},
																		{
																			"key": "audit",
																			"value": "comment:'initial+provisioning'"
																		}
																	]
																},
																"description": "Returns a SuccessResponse if table is created"
															},
															"response": []
														},
														{
															"name": "Creates a facade",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																			"",
																			"if(!isLocal) {",
																			"    pm.test(\"Status code is 200\", function () {",
																			"        pm.response.to.have.status(200);",
																			"    });",
																			"",
																			"    pm.test(\"Body matches string\", function () {",
																			"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																			"    });",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PUT",
																"header": [
																	{
																		"key": "X-BV-Api-Key",
																		"value": "{{api_key}}",
																		"type": "text"
																	}
																],
																"url": {
																	"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}?options=placement:'ugc_us:ugc'&audit=audit=comment:'initial+facade+provisioning'",
																	"host": [
																		"{{baseurl_dc2}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "placement:'ugc_us:ugc'"
																		},
																		{
																			"key": "audit",
																			"value": "audit=comment:'initial+facade+provisioning'"
																		}
																	]
																},
																"description": "Returns a SuccessResponse if facade is created"
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "PUT",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/sor/1/_facade/:table?options=<string>&audit=<string>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"sor",
																				"1",
																				"_facade",
																				":table"
																			],
																			"query": [
																				{
																					"key": "options",
																					"value": "<string>"
																				},
																				{
																					"key": "audit",
																					"value": "<string>"
																				}
																			],
																			"variable": [
																				{
																					"key": "table"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"success\": false,\n \"debug\": {}\n}"
																}
															]
														},
														{
															"name": "Deletes a piece of content from a facade in the data store.",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																			"",
																			"if(!isLocal) {",
																			"    pm.test(\"Status code is 400\", function () {",
																			"        pm.response.to.have.status(400);",
																			"    });",
																			"",
																			"    pm.test(\"Body matches string\", function () {",
																			"        pm.expect(pm.response.text()).to.eql('Missing required query parameter: audit');",
																			"    });",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "X-BV-API-Key",
																		"value": "{{api_key}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
																},
																"url": {
																	"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}/{{key}}?consistency=STRONG&tag=postman&tag=postman1&debug=false",
																	"host": [
																		"{{baseurl_dc2}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{{table}}",
																		"{{key}}"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": "<string>",
																			"disabled": true
																		},
																		{
																			"key": "audit",
																			"value": "comment:'delete+piece+of+content+from+facade'",
																			"disabled": true
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": "postman"
																		},
																		{
																			"key": "tag",
																			"value": "postman1"
																		},
																		{
																			"key": "debug",
																			"value": "false"
																		}
																	]
																},
																"description": "Deletes a piece of content from a facade in the data store."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "DELETE",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/sor/1/_facade/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"sor",
																				"1",
																				"_facade",
																				":table",
																				":key"
																			],
																			"query": [
																				{
																					"key": "changeId",
																					"value": "<string>"
																				},
																				{
																					"key": "audit",
																					"value": "<string>"
																				},
																				{
																					"key": "consistency",
																					"value": "STRONG"
																				},
																				{
																					"key": "tag",
																					"value": "<string>"
																				},
																				{
																					"key": "tag",
																					"value": "<string>"
																				},
																				{
																					"key": "debug",
																					"value": "<string>"
																				}
																			],
																			"variable": [
																				{
																					"key": "table"
																				},
																				{
																					"key": "key"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"success\": false,\n \"debug\": {}\n}"
																}
															]
														},
														{
															"name": "Drops a table",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																			"",
																			"if(!isLocal) {",
																			"    pm.test(\"Status code is 200\", function () {",
																			"        pm.response.to.have.status(200);",
																			"    });",
																			"",
																			"    pm.test(\"Body matches string\", function () {",
																			"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																			"    });",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "X-BV-API-Key",
																		"type": "text",
																		"value": "{{api_key}}"
																	}
																],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "comment:'table_removal'"
																		}
																	]
																},
																"description": "Returns a SuccessResponse if table is dropped"
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "DELETE",
																		"header": [],
																		"url": {
																			"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																			"host": [
																				"{{baseurl_dc1}}"
																			],
																			"path": [
																				"sor",
																				"1",
																				"_table",
																				":table"
																			],
																			"query": [
																				{
																					"key": "audit",
																					"value": "<string>"
																				}
																			],
																			"variable": [
																				{
																					"key": "table"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"success\": false,\n \"debug\": {}\n}"
																}
															]
														}
													]
												},
												{
													"name": "TC: Request to delete piece of data from facade",
													"item": [
														{
															"name": "Creates table /sor/1/_table/{table}",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var uuid = require('uuid');",
																			"postman.setEnvironmentVariable('table', 'table_'+uuid.v4());"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																			"",
																			"if(!isLocal) {",
																			"    pm.test(\"Status code is 200\", function () {",
																			"        pm.response.to.have.status(200);",
																			"    });",
																			"",
																			"    pm.test(\"Body matches string\", function () {",
																			"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																			"    });",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PUT",
																"header": [
																	{
																		"key": "X-BV-API-Key",
																		"type": "text",
																		"value": "{{api_key}}"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_eu:ugc'&audit=comment:'initial+provisioning'",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "placement:'ugc_eu:ugc'"
																		},
																		{
																			"key": "audit",
																			"value": "comment:'initial+provisioning'"
																		}
																	]
																},
																"description": "Returns a SuccessResponse if table is created"
															},
															"response": []
														},
														{
															"name": "Creates a facade",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																			"",
																			"if(!isLocal) {",
																			"    pm.test(\"Status code is 200\", function () {",
																			"        pm.response.to.have.status(200);",
																			"    });",
																			"",
																			"    pm.test(\"Body matches string\", function () {",
																			"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																			"    });",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PUT",
																"header": [
																	{
																		"key": "X-BV-Api-Key",
																		"value": "{{api_key}}",
																		"type": "text"
																	}
																],
																"url": {
																	"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}?options=placement:'ugc_us:ugc'&audit=audit=comment:'initial+facade+provisioning'",
																	"host": [
																		"{{baseurl_dc2}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "placement:'ugc_us:ugc'"
																		},
																		{
																			"key": "audit",
																			"value": "audit=comment:'initial+facade+provisioning'"
																		}
																	]
																},
																"description": "Returns a SuccessResponse if facade is created"
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "PUT",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/sor/1/_facade/:table?options=<string>&audit=<string>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"sor",
																				"1",
																				"_facade",
																				":table"
																			],
																			"query": [
																				{
																					"key": "options",
																					"value": "<string>"
																				},
																				{
																					"key": "audit",
																					"value": "<string>"
																				}
																			],
																			"variable": [
																				{
																					"key": "table"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"success\": false,\n \"debug\": {}\n}"
																}
															]
														},
														{
															"name": "Deletes a piece of content from a facade in the data store.",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																			"",
																			"if(!isLocal) {",
																			"    pm.test(\"Status code is 200\", function () {",
																			"        pm.response.to.have.status(200);",
																			"    });",
																			"",
																			"    pm.test(\"Body matches string\", function () {",
																			"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																			"    });",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "X-BV-API-Key",
																		"value": "{{api_key}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
																},
																"url": {
																	"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}/{{key}}?audit=comment:'delete+piece+of+content+from+facade'&consistency=STRONG&tag=postman&tag=postman1&debug=false",
																	"host": [
																		"{{baseurl_dc2}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{{table}}",
																		"{{key}}"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": "<string>",
																			"disabled": true
																		},
																		{
																			"key": "audit",
																			"value": "comment:'delete+piece+of+content+from+facade'"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": "postman"
																		},
																		{
																			"key": "tag",
																			"value": "postman1"
																		},
																		{
																			"key": "debug",
																			"value": "false"
																		}
																	]
																},
																"description": "Deletes a piece of content from a facade in the data store."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "DELETE",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/sor/1/_facade/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"sor",
																				"1",
																				"_facade",
																				":table",
																				":key"
																			],
																			"query": [
																				{
																					"key": "changeId",
																					"value": "<string>"
																				},
																				{
																					"key": "audit",
																					"value": "<string>"
																				},
																				{
																					"key": "consistency",
																					"value": "STRONG"
																				},
																				{
																					"key": "tag",
																					"value": "<string>"
																				},
																				{
																					"key": "tag",
																					"value": "<string>"
																				},
																				{
																					"key": "debug",
																					"value": "<string>"
																				}
																			],
																			"variable": [
																				{
																					"key": "table"
																				},
																				{
																					"key": "key"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"success\": false,\n \"debug\": {}\n}"
																}
															]
														},
														{
															"name": "Drops a table",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																			"",
																			"if(!isLocal) {",
																			"    pm.test(\"Status code is 200\", function () {",
																			"        pm.response.to.have.status(200);",
																			"    });",
																			"",
																			"    pm.test(\"Body matches string\", function () {",
																			"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																			"    });",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "X-BV-API-Key",
																		"type": "text",
																		"value": "{{api_key}}"
																	}
																],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "comment:'table_removal'"
																		}
																	]
																},
																"description": "Returns a SuccessResponse if table is dropped"
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "DELETE",
																		"header": [],
																		"url": {
																			"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																			"host": [
																				"{{baseurl_dc1}}"
																			],
																			"path": [
																				"sor",
																				"1",
																				"_table",
																				":table"
																			],
																			"query": [
																				{
																					"key": "audit",
																					"value": "<string>"
																				}
																			],
																			"variable": [
																				{
																					"key": "table"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"success\": false,\n \"debug\": {}\n}"
																}
															]
														}
													]
												},
												{
													"name": "TC: Request to delete piece of data from facade with wrong datacenter",
													"item": [
														{
															"name": "Creates table /sor/1/_table/{table}",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var uuid = require('uuid');",
																			"postman.setEnvironmentVariable('table', 'table_'+uuid.v4());"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																			"",
																			"if(!isLocal) {",
																			"    pm.test(\"Status code is 200\", function () {",
																			"        pm.response.to.have.status(200);",
																			"    });",
																			"",
																			"    pm.test(\"Body matches string\", function () {",
																			"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																			"    });",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PUT",
																"header": [
																	{
																		"key": "X-BV-API-Key",
																		"type": "text",
																		"value": "{{api_key}}"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_eu:ugc'&audit=comment:'initial+provisioning'",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "placement:'ugc_eu:ugc'"
																		},
																		{
																			"key": "audit",
																			"value": "comment:'initial+provisioning'"
																		}
																	]
																},
																"description": "Returns a SuccessResponse if table is created"
															},
															"response": []
														},
														{
															"name": "Creates a facade",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																			"",
																			"if(!isLocal) {",
																			"    pm.test(\"Status code is 200\", function () {",
																			"        pm.response.to.have.status(200);",
																			"    });",
																			"",
																			"    pm.test(\"Body matches string\", function () {",
																			"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																			"    });",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PUT",
																"header": [
																	{
																		"key": "X-BV-Api-Key",
																		"value": "{{api_key}}",
																		"type": "text"
																	}
																],
																"url": {
																	"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}?options=placement:'ugc_us:ugc'&audit=audit=comment:'initial+facade+provisioning'",
																	"host": [
																		"{{baseurl_dc2}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "placement:'ugc_us:ugc'"
																		},
																		{
																			"key": "audit",
																			"value": "audit=comment:'initial+facade+provisioning'"
																		}
																	]
																},
																"description": "Returns a SuccessResponse if facade is created"
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "PUT",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/sor/1/_facade/:table?options=<string>&audit=<string>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"sor",
																				"1",
																				"_facade",
																				":table"
																			],
																			"query": [
																				{
																					"key": "options",
																					"value": "<string>"
																				},
																				{
																					"key": "audit",
																					"value": "<string>"
																				}
																			],
																			"variable": [
																				{
																					"key": "table"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"success\": false,\n \"debug\": {}\n}"
																}
															]
														},
														{
															"name": "Deletes a piece of content from a facade in the data store.",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																			"",
																			"if(!isLocal) {",
																			"    pm.test(\"Status code is 403\", function () {",
																			"        pm.response.to.have.status(403);",
																			"    });",
																			"",
																			"    pm.test(\"Body matches string\", function () {",
																			"        pm.expect(pm.response.text()).to.eql('Access denied. Update intended for a facade, but the table would be updated.');",
																			"    });",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "X-BV-API-Key",
																		"value": "{{api_key}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
																},
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_facade/{{table}}/{{key}}?audit=comment:'delete+piece+of+content+from+facade'&consistency=STRONG&tag=postman&tag=postman1&debug=false",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{{table}}",
																		"{{key}}"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": "<string>",
																			"disabled": true
																		},
																		{
																			"key": "audit",
																			"value": "comment:'delete+piece+of+content+from+facade'"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": "postman"
																		},
																		{
																			"key": "tag",
																			"value": "postman1"
																		},
																		{
																			"key": "debug",
																			"value": "false"
																		}
																	]
																},
																"description": "Deletes a piece of content from a facade in the data store."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "DELETE",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/sor/1/_facade/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"sor",
																				"1",
																				"_facade",
																				":table",
																				":key"
																			],
																			"query": [
																				{
																					"key": "changeId",
																					"value": "<string>"
																				},
																				{
																					"key": "audit",
																					"value": "<string>"
																				},
																				{
																					"key": "consistency",
																					"value": "STRONG"
																				},
																				{
																					"key": "tag",
																					"value": "<string>"
																				},
																				{
																					"key": "tag",
																					"value": "<string>"
																				},
																				{
																					"key": "debug",
																					"value": "<string>"
																				}
																			],
																			"variable": [
																				{
																					"key": "table"
																				},
																				{
																					"key": "key"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"success\": false,\n \"debug\": {}\n}"
																}
															]
														},
														{
															"name": "Drops a table",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																			"",
																			"if(!isLocal) {",
																			"    pm.test(\"Status code is 200\", function () {",
																			"        pm.response.to.have.status(200);",
																			"    });",
																			"",
																			"    pm.test(\"Body matches string\", function () {",
																			"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																			"    });",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "X-BV-API-Key",
																		"type": "text",
																		"value": "{{api_key}}"
																	}
																],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "comment:'table_removal'"
																		}
																	]
																},
																"description": "Returns a SuccessResponse if table is dropped"
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "DELETE",
																		"header": [],
																		"url": {
																			"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																			"host": [
																				"{{baseurl_dc1}}"
																			],
																			"path": [
																				"sor",
																				"1",
																				"_table",
																				":table"
																			],
																			"query": [
																				{
																					"key": "audit",
																					"value": "<string>"
																				}
																			],
																			"variable": [
																				{
																					"key": "table"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"success\": false,\n \"debug\": {}\n}"
																}
															]
														}
													]
												},
												{
													"name": "TC: Request to delete piece of data from facade with debug set true",
													"item": [
														{
															"name": "Creates table /sor/1/_table/{table}",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var uuid = require('uuid');",
																			"postman.setEnvironmentVariable('table', 'table_'+uuid.v4());"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																			"",
																			"if(!isLocal) {",
																			"    pm.test(\"Status code is 200\", function () {",
																			"        pm.response.to.have.status(200);",
																			"    });",
																			"",
																			"    pm.test(\"Body matches string\", function () {",
																			"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																			"    });",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PUT",
																"header": [
																	{
																		"key": "X-BV-API-Key",
																		"type": "text",
																		"value": "{{api_key}}"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_eu:ugc'&audit=comment:'initial+provisioning'",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "placement:'ugc_eu:ugc'"
																		},
																		{
																			"key": "audit",
																			"value": "comment:'initial+provisioning'"
																		}
																	]
																},
																"description": "Returns a SuccessResponse if table is created"
															},
															"response": []
														},
														{
															"name": "Creates a facade",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																			"",
																			"if(!isLocal) {",
																			"    pm.test(\"Status code is 200\", function () {",
																			"        pm.response.to.have.status(200);",
																			"    });",
																			"",
																			"    pm.test(\"Body matches string\", function () {",
																			"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																			"    });",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PUT",
																"header": [
																	{
																		"key": "X-BV-Api-Key",
																		"value": "{{api_key}}",
																		"type": "text"
																	}
																],
																"url": {
																	"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}?options=placement:'ugc_us:ugc'&audit=audit=comment:'initial+facade+provisioning'",
																	"host": [
																		"{{baseurl_dc2}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "options",
																			"value": "placement:'ugc_us:ugc'"
																		},
																		{
																			"key": "audit",
																			"value": "audit=comment:'initial+facade+provisioning'"
																		}
																	]
																},
																"description": "Returns a SuccessResponse if facade is created"
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "PUT",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/sor/1/_facade/:table?options=<string>&audit=<string>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"sor",
																				"1",
																				"_facade",
																				":table"
																			],
																			"query": [
																				{
																					"key": "options",
																					"value": "<string>"
																				},
																				{
																					"key": "audit",
																					"value": "<string>"
																				}
																			],
																			"variable": [
																				{
																					"key": "table"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"success\": false,\n \"debug\": {}\n}"
																}
															]
														},
														{
															"name": "Deletes a piece of content from a facade in the data store.",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const isLocal = pm.environment.get(\"baseurl_dc2\").includes('localhost');",
																			"",
																			"if(!isLocal) {",
																			"    pm.test(\"Status code is 200\", function () {",
																			"        pm.response.to.have.status(200);",
																			"    });",
																			"",
																			"    pm.test(\"Body matches string\", function () {",
																			"        pm.expect(pm.response.json()).to.have.keys(\"success\",\"debug\");",
																			"        pm.expect(pm.response.json().success).to.eql(true);",
																			"        pm.expect(pm.response.json().debug).to.have.keys(\"changeId\");",
																			"    });",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "X-BV-API-Key",
																		"value": "{{api_key}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
																},
																"url": {
																	"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}/{{key}}?audit=comment:'delete+piece+of+content+from+facade'&consistency=STRONG&tag=postman&tag=postman1&debug=true",
																	"host": [
																		"{{baseurl_dc2}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"{{table}}",
																		"{{key}}"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": "<string>",
																			"disabled": true
																		},
																		{
																			"key": "audit",
																			"value": "comment:'delete+piece+of+content+from+facade'"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": "postman"
																		},
																		{
																			"key": "tag",
																			"value": "postman1"
																		},
																		{
																			"key": "debug",
																			"value": "true"
																		}
																	]
																},
																"description": "Deletes a piece of content from a facade in the data store."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "DELETE",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/sor/1/_facade/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"sor",
																				"1",
																				"_facade",
																				":table",
																				":key"
																			],
																			"query": [
																				{
																					"key": "changeId",
																					"value": "<string>"
																				},
																				{
																					"key": "audit",
																					"value": "<string>"
																				},
																				{
																					"key": "consistency",
																					"value": "STRONG"
																				},
																				{
																					"key": "tag",
																					"value": "<string>"
																				},
																				{
																					"key": "tag",
																					"value": "<string>"
																				},
																				{
																					"key": "debug",
																					"value": "<string>"
																				}
																			],
																			"variable": [
																				{
																					"key": "table"
																				},
																				{
																					"key": "key"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"success\": false,\n \"debug\": {}\n}"
																}
															]
														},
														{
															"name": "Drops a table",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost');",
																			"",
																			"if(!isLocal) {",
																			"    pm.test(\"Status code is 200\", function () {",
																			"        pm.response.to.have.status(200);",
																			"    });",
																			"",
																			"    pm.test(\"Body matches string\", function () {",
																			"        pm.expect(pm.response.json()).to.eql({\"success\":true});",
																			"    });",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "X-BV-API-Key",
																		"type": "text",
																		"value": "{{api_key}}"
																	}
																],
																"url": {
																	"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
																	"host": [
																		"{{baseurl_dc1}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_table",
																		"{{table}}"
																	],
																	"query": [
																		{
																			"key": "audit",
																			"value": "comment:'table_removal'"
																		}
																	]
																},
																"description": "Returns a SuccessResponse if table is dropped"
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "DELETE",
																		"header": [],
																		"url": {
																			"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
																			"host": [
																				"{{baseurl_dc1}}"
																			],
																			"path": [
																				"sor",
																				"1",
																				"_table",
																				":table"
																			],
																			"query": [
																				{
																					"key": "audit",
																					"value": "<string>"
																				}
																			],
																			"variable": [
																				{
																					"key": "table"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"success\": false,\n \"debug\": {}\n}"
																}
															]
														}
													]
												},
												{
													"name": "TC: Request to delete piece of data from facade where table doesn't exist",
													"item": [
														{
															"name": "Deletes a piece of content from a facade in the data store.",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 404\", function () {",
																			"    pm.response.to.have.status(404);",
																			"});",
																			"",
																			"pm.test(\"Body matches string\", function () {",
																			"    pm.expect(pm.response.json()).to.eql({\"message\": \"Unknown table: not_existing_table\",\"table\": \"not_existing_table\",\"suppressed\": []});",
																			"});",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "X-BV-API-Key",
																		"value": "{{api_key}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\"author\":\"Bob\",\"title\":\"Best Ever!\",\"rating\":5}"
																},
																"url": {
																	"raw": "{{baseurl_dc2}}/sor/1/_facade/not_existing_table/{{key}}?audit=comment:'delete+piece+of+content+from+facade'&consistency=STRONG&tag=postman&tag=postman1&debug=false",
																	"host": [
																		"{{baseurl_dc2}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		"not_existing_table",
																		"{{key}}"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": "<string>",
																			"disabled": true
																		},
																		{
																			"key": "audit",
																			"value": "comment:'delete+piece+of+content+from+facade'"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": "postman"
																		},
																		{
																			"key": "tag",
																			"value": "postman1"
																		},
																		{
																			"key": "debug",
																			"value": "false"
																		}
																	]
																},
																"description": "Deletes a piece of content from a facade in the data store."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "DELETE",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/sor/1/_facade/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"sor",
																				"1",
																				"_facade",
																				":table",
																				":key"
																			],
																			"query": [
																				{
																					"key": "changeId",
																					"value": "<string>"
																				},
																				{
																					"key": "audit",
																					"value": "<string>"
																				},
																				{
																					"key": "consistency",
																					"value": "STRONG"
																				},
																				{
																					"key": "tag",
																					"value": "<string>"
																				},
																				{
																					"key": "tag",
																					"value": "<string>"
																				},
																				{
																					"key": "debug",
																					"value": "<string>"
																				}
																			],
																			"variable": [
																				{
																					"key": "table"
																				},
																				{
																					"key": "key"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n \"success\": false,\n \"debug\": {}\n}"
																}
															]
														}
													]
												},
												{
													"name": "Deletes a piece of content from a facade in the data store.",
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"id\": \"<string>\",\n    \"authenticationId\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_facade/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																":table",
																":key"
															],
															"query": [
																{
																	"key": "changeId",
																	"value": "<string>"
																},
																{
																	"key": "audit",
																	"value": "<string>"
																},
																{
																	"key": "consistency",
																	"value": "STRONG"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "debug",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table",
																	"value": "<string>",
																	"description": "(Required) "
																},
																{
																	"key": "key",
																	"value": "<string>",
																	"description": "(Required) "
																}
															]
														},
														"description": "Deletes a piece of content from a facade in the data store."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/sor/1/_facade/:table/:key?changeId=<string>&audit=<string>&consistency=STRONG&tag=<string>&tag=<string>&debug=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sor",
																		"1",
																		"_facade",
																		":table",
																		":key"
																	],
																	"query": [
																		{
																			"key": "changeId",
																			"value": "<string>"
																		},
																		{
																			"key": "audit",
																			"value": "<string>"
																		},
																		{
																			"key": "consistency",
																			"value": "STRONG"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "tag",
																			"value": "<string>"
																		},
																		{
																			"key": "debug",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "table"
																		},
																		{
																			"key": "key"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"success\": false,\n \"debug\": {}\n}"
														}
													]
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "Does update all for Facade",
							"item": [
								{
									"name": "TC: Request without api-key",
									"item": [
										{
											"name": "Does update all for Facade",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json().reason).to.be.oneOf([`not authorized to update table ${pm.environment.get('table')}`, 'not authorized']);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key_no_rights}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n         {\n            \"table\": \"{{table}}\",\n            \"key\": \"demo1\",\n            \"delta\": \"{\\\"field1\\\":\\\"value1\\\",\\\"field2\\\":\\\"value2\\\",\\\"field3\\\":\\\"value3\\\"}\",\n            \"consistency\": \"STRONG\",\n            \"audit\": {\n              \"comment\": \"Adding demo1 document\"\n            }\n          },\n          {\n            \"table\": \"{{table}}\",\n            \"key\": \"demo2\",\n            \"delta\": \"{\\\"field1\\\":\\\"value1.1\\\",\\\"field5\\\":\\\"value5\\\",\\\"field32\\\":\\\"value33\\\"}\",\n            \"consistency\": \"STRONG\",\n            \"audit\": {\n            \"comment\": \"Update and Add\"\n        }\n      }\n]"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_facade/_stream",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_facade",
														"_stream"
													],
													"query": [
														{
															"key": "tag",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "tag",
															"value": "<string>",
															"disabled": true
														}
													]
												},
												"description": "Facade-equivalent operation for \"_stream\"\n See (@link #updateAll(java.io.InputStream, BooleanParam, Subject)}"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/_facade/_stream?tag=<string>&tag=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"_stream"
															],
															"query": [
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Request to not existing facade",
									"item": [
										{
											"name": "Creates table /sor/1/_table/{table}",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"postman.setEnvironmentVariable('table', 'table_'+uuid.v4());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "placement:'ugc_global:ugc'"
														},
														{
															"key": "audit",
															"value": "comment:'initial+provisioning'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is created"
											},
											"response": []
										},
										{
											"name": "Does update all for Facade",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.text()).to.eql('Access denied. Update intended for a facade, but the table would be updated.');",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n         {\n            \"table\": \"{{table}}\",\n            \"key\": \"demo1\",\n            \"delta\": \"{\\\"field1\\\":\\\"value1\\\",\\\"field2\\\":\\\"value2\\\",\\\"field3\\\":\\\"value3\\\"}\",\n            \"consistency\": \"STRONG\",\n            \"audit\": {\n              \"comment\": \"Adding demo1 document\"\n            }\n          },\n          {\n            \"table\": \"{{table}}\",\n            \"key\": \"demo2\",\n            \"delta\": \"{\\\"field1\\\":\\\"value1.1\\\",\\\"field5\\\":\\\"value5\\\",\\\"field32\\\":\\\"value33\\\"}\",\n            \"consistency\": \"STRONG\",\n            \"audit\": {\n            \"comment\": \"Update and Add\"\n        }\n      }\n]"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_facade/_stream",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_facade",
														"_stream"
													],
													"query": [
														{
															"key": "tag",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "tag",
															"value": "<string>",
															"disabled": true
														}
													]
												},
												"description": "Facade-equivalent operation for \"_stream\"\n See (@link #updateAll(java.io.InputStream, BooleanParam, Subject)}"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/_facade/_stream?tag=<string>&tag=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"_stream"
															],
															"query": [
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Drops a table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "comment:'table_removal'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is dropped"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Request facade update with wrong/correct placement",
									"item": [
										{
											"name": "Creates table /sor/1/_table/{table}",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"postman.setEnvironmentVariable('table', 'table_'+uuid.v4());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost'); ",
															"",
															"(isLocal ? pm.test.skip : pm.test)(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"(isLocal ? pm.test.skip : pm.test)(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"type\":\"create_table_test\",\n    \"client\":\"iuliia_customer\",\n    \"test_field\":\"postman\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_eu:ugc'&audit=comment:'initial+provisioning'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "placement:'ugc_eu:ugc'"
														},
														{
															"key": "audit",
															"value": "comment:'initial+provisioning'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is created"
											},
											"response": []
										},
										{
											"name": "Creates a facade",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost'); ",
															"",
															"(isLocal ? pm.test.skip : pm.test)(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"(isLocal ? pm.test.skip : pm.test)(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-BV-Api-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}?options=placement:'ugc_us:ugc'&audit=audit=comment:'initial+facade+provisioning'",
													"host": [
														"{{baseurl_dc2}}"
													],
													"path": [
														"sor",
														"1",
														"_facade",
														"{{table}}"
													],
													"query": [
														{
															"key": "options",
															"value": "placement:'ugc_us:ugc'"
														},
														{
															"key": "audit",
															"value": "audit=comment:'initial+facade+provisioning'"
														}
													]
												},
												"description": "Returns a SuccessResponse if facade is created"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/_facade/:table?options=<string>&audit=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																":table"
															],
															"query": [
																{
																	"key": "options",
																	"value": "<string>"
																},
																{
																	"key": "audit",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Does update all for Facade in correct datacenter",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost'); ",
															"",
															"(isLocal ? pm.test.skip : pm.test)(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"(isLocal ? pm.test.skip : pm.test)(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\": true});",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n         {\n            \"table\": \"{{table}}\",\n            \"key\": \"demo1\",\n            \"delta\": \"{\\\"field1\\\":\\\"value1\\\",\\\"field2\\\":\\\"value2\\\",\\\"field3\\\":\\\"value3\\\"}\",\n            \"consistency\": \"STRONG\",\n            \"audit\": {\n              \"comment\": \"Adding demo1 document\"\n            }\n          },\n          {\n            \"table\": \"{{table}}\",\n            \"key\": \"demo2\",\n            \"delta\": \"{\\\"field1\\\":\\\"value1.1\\\",\\\"field5\\\":\\\"value5\\\",\\\"field32\\\":\\\"value33\\\"}\",\n            \"consistency\": \"STRONG\",\n            \"audit\": {\n            \"comment\": \"Update and Add\"\n        }\n      }\n]"
												},
												"url": {
													"raw": "{{baseurl_dc2}}/sor/1/_facade/_stream",
													"host": [
														"{{baseurl_dc2}}"
													],
													"path": [
														"sor",
														"1",
														"_facade",
														"_stream"
													],
													"query": [
														{
															"key": "tag",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "tag",
															"value": "<string>",
															"disabled": true
														}
													]
												},
												"description": "Facade-equivalent operation for \"_stream\"\n See (@link #updateAll(java.io.InputStream, BooleanParam, Subject)}"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/_facade/_stream?tag=<string>&tag=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"_stream"
															],
															"query": [
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Does update all for Facade in a wrong datacenter",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost'); ",
															"",
															"(isLocal ? pm.test.skip : pm.test)(\"Status code is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"});",
															"",
															"(isLocal ? pm.test.skip : pm.test)(\"Body matches string\", function () {",
															"    pm.expect(pm.response.text()).to.eql('Access denied. Update intended for a facade, but the table would be updated.');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n         {\n            \"table\": \"{{table}}\",\n            \"key\": \"demo1\",\n            \"delta\": \"{\\\"field1\\\":\\\"value1\\\",\\\"field2\\\":\\\"value2\\\",\\\"field3\\\":\\\"value3\\\"}\",\n            \"consistency\": \"STRONG\",\n            \"audit\": {\n              \"comment\": \"Adding demo1 document\"\n            }\n          },\n          {\n            \"table\": \"{{table}}\",\n            \"key\": \"demo2\",\n            \"delta\": \"{\\\"field1\\\":\\\"value1.1\\\",\\\"field5\\\":\\\"value5\\\",\\\"field32\\\":\\\"value33\\\"}\",\n            \"consistency\": \"STRONG\",\n            \"audit\": {\n            \"comment\": \"Update and Add\"\n        }\n      }\n]"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_facade/_stream",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_facade",
														"_stream"
													],
													"query": [
														{
															"key": "tag",
															"value": "<string>",
															"disabled": true
														},
														{
															"key": "tag",
															"value": "<string>",
															"disabled": true
														}
													]
												},
												"description": "Facade-equivalent operation for \"_stream\"\n See (@link #updateAll(java.io.InputStream, BooleanParam, Subject)}"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/sor/1/_facade/_stream?tag=<string>&tag=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sor",
																"1",
																"_facade",
																"_stream"
															],
															"query": [
																{
																	"key": "tag",
																	"value": "<string>"
																},
																{
																	"key": "tag",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Drops a table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost'); ",
															"",
															"(isLocal ? pm.test.skip : pm.test)(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"(isLocal ? pm.test.skip : pm.test)(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-BV-API-Key",
														"type": "text",
														"value": "{{api_key}}"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"sor",
														"1",
														"_table",
														"{{table}}"
													],
													"query": [
														{
															"key": "audit",
															"value": "comment:'table_removal'"
														}
													]
												},
												"description": "Returns a SuccessResponse if table is dropped"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
															"host": [
																"{{baseurl_dc1}}"
															],
															"path": [
																"sor",
																"1",
																"_table",
																":table"
															],
															"query": [
																{
																	"key": "audit",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "table"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": false,\n \"debug\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "Does update all for Facade",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-BV-API-Key",
												"value": "{{api_key}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\"<object>\""
										},
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/_facade/_stream?tag=postman&tag=postman1",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"_facade",
												"_stream"
											],
											"query": [
												{
													"key": "tag",
													"value": "postman"
												},
												{
													"key": "tag",
													"value": "postman1"
												}
											]
										},
										"description": "Facade-equivalent operation for \"_stream\"\n See (@link #updateAll(java.io.InputStream, BooleanParam, Subject)}"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sor/1/_facade/_stream?tag=<string>&tag=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sor",
														"1",
														"_facade",
														"_stream"
													],
													"query": [
														{
															"key": "tag",
															"value": "<string>"
														},
														{
															"key": "tag",
															"value": "<string>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"success\": false,\n \"debug\": {}\n}"
										}
									]
								}
							]
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "bus/1 test cases",
			"item": [
				{
					"name": "{subscription}",
					"item": [
						{
							"name": "Unsubscribe",
							"item": [
								{
									"name": "TC: Request without permissions",
									"item": [
										{
											"name": "Subscribe operation.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"postman.setEnvironmentVariable('subscription', 'postman_'+uuid.v4()+'_test_subscription');",
															"",
															"pm.environment.set(\"ttl\", \"86400\");",
															"pm.environment.set(\"eventTtl\", \"86400\");",
															"pm.environment.set(\"ignoreSuppressedEvents\", false);",
															"pm.environment.set(\"includeDefaultJoinFilter\", false);",
															"pm.environment.set(\"partitioned\", true);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({'success':true}); ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-condition"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "intrinsic(\"~table\":\"{{table}}\")"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}?ttl={{ttl}}&eventTtl={{eventTtl}}&ignoreSuppressedEvents={{ignoreSuppressedEvents}}&includeDefaultJoinFilter={{includeDefaultJoinFilter}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													],
													"query": [
														{
															"key": "ttl",
															"value": "{{ttl}}"
														},
														{
															"key": "eventTtl",
															"value": "{{eventTtl}}"
														},
														{
															"key": "ignoreSuppressedEvents",
															"value": "{{ignoreSuppressedEvents}}"
														},
														{
															"key": "includeDefaultJoinFilter",
															"value": "{{includeDefaultJoinFilter}}"
														}
													]
												},
												"description": "Returns a SuccessResponse."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription?ttl={{ttl}}&eventTtl={{eventTtl}}&ignoreSuppressedEvents={{ignoreSuppressedEvents}}&includeDefaultJoinFilter={{includeDefaultJoinFilter}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"query": [
																{
																	"key": "ttl",
																	"value": "{{ttl}}"
																},
																{
																	"key": "eventTtl",
																	"value": "{{eventTtl}}"
																},
																{
																	"key": "ignoreSuppressedEvents",
																	"value": "{{ignoreSuppressedEvents}}"
																},
																{
																	"key": "includeDefaultJoinFilter",
																	"value": "{{includeDefaultJoinFilter}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": true,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Gets a Subscription.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"name\", \"tableFilter\",\"expiresAt\",\"eventTtl\");",
															"    pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"subscription\"));",
															"    pm.expect(pm.response.json().eventTtl).to.eql(parseInt(pm.environment.get(\"eventTtl\")*1000));",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													]
												},
												"description": "Returns a Subscription."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"expiresAt\": \"2004-07-30T23:17:47.534Z\",\n \"name\": \"nostrud irure et dolor\",\n \"eventTtl\": {\n  \"seconds\": 79588479,\n  \"zero\": false,\n  \"negative\": false,\n  \"units\": [\n   {\n    \"duration\": {\n     \"value\": \"<Circular reference to #/components/schemas/Duration detected>\"\n    },\n    \"durationEstimated\": false,\n    \"timeBased\": false,\n    \"dateBased\": false\n   },\n   {\n    \"duration\": {\n     \"value\": \"<Circular reference to #/components/schemas/Duration detected>\"\n    },\n    \"durationEstimated\": false,\n    \"timeBased\": false,\n    \"dateBased\": false\n   }\n  ],\n  \"nano\": 54804863\n },\n \"tableFilter\": {}\n}"
												}
											]
										},
										{
											"name": "Unsubscribe operation.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const retryRequest = () => {",
															"    return new Promise((resolve, reject) => {",
															"        pm.sendRequest({",
															"            url: `${pm.environment.get(\"baseurl_dc1\")}/bus/1/${pm.environment.get(\"subscription\")}`,",
															"            method: 'DELETE',",
															"            header: {",
															"                \"X-BV-API-Key\": pm.environment.get(\"api_key_no_rights\"),",
															"            }",
															"        }, async (error, response) => {",
															"            if (error) {",
															"                reject(error);",
															"            }",
															"            resolve(response);",
															"        });",
															"    });",
															"};",
															"",
															"pm.test(\"Status code is 403\", asyncTest(async function () {",
															"    if(pm.response.status !== 403) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"        response = await retryRequest();",
															"        return response.code === 403;",
															"        }, \"Error retrying unsubscribe checking status \");",
															"    }",
															"    pm.expect(response).to.have.status(403);",
															"}));",
															"",
															"pm.test(\"Body matches string\", asyncTest(async function () {",
															"    if(pm.response.status !== 403) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.code === 403;",
															"        });",
															"    }",
															"    pm.expect(pm.response.json().reason).to.be.oneOf([`not authorized to update table ${pm.environment.get('table')}`, 'not authorized']);",
															"}));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key_no_rights}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}?partitioned={{partitioned}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														}
													]
												},
												"description": "Returns an Iterator of Subscription."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription?partitioned={{partitioned}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": true,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Gets a Subscription.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"name\", \"tableFilter\",\"expiresAt\",\"eventTtl\");",
															"    pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"subscription\"));",
															"    pm.expect(pm.response.json().eventTtl).to.eql(parseInt(pm.environment.get(\"eventTtl\")*1000));",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													]
												},
												"description": "Returns a Subscription."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"expiresAt\": \"2004-07-30T23:17:47.534Z\",\n \"name\": \"nostrud irure et dolor\",\n \"eventTtl\": {\n  \"seconds\": 79588479,\n  \"zero\": false,\n  \"negative\": false,\n  \"units\": [\n   {\n    \"duration\": {\n     \"value\": \"<Circular reference to #/components/schemas/Duration detected>\"\n    },\n    \"durationEstimated\": false,\n    \"timeBased\": false,\n    \"dateBased\": false\n   },\n   {\n    \"duration\": {\n     \"value\": \"<Circular reference to #/components/schemas/Duration detected>\"\n    },\n    \"durationEstimated\": false,\n    \"timeBased\": false,\n    \"dateBased\": false\n   }\n  ],\n  \"nano\": 54804863\n },\n \"tableFilter\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Request with permissions and partitioned=true",
									"item": [
										{
											"name": "Subscribe operation.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"postman.setEnvironmentVariable('subscription', 'postman_'+uuid.v4()+'_test_subscription');",
															"",
															"pm.environment.set(\"ttl\", \"86400\");",
															"pm.environment.set(\"eventTtl\", \"86400\");",
															"pm.environment.set(\"ignoreSuppressedEvents\", false);",
															"pm.environment.set(\"includeDefaultJoinFilter\", false);",
															"pm.environment.set(\"partitioned\", true);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({'success':true}); ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-condition"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "intrinsic(\"~table\":\"{{table}}\")"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}?ttl={{ttl}}&eventTtl={{eventTtl}}&ignoreSuppressedEvents={{ignoreSuppressedEvents}}&includeDefaultJoinFilter={{includeDefaultJoinFilter}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													],
													"query": [
														{
															"key": "ttl",
															"value": "{{ttl}}"
														},
														{
															"key": "eventTtl",
															"value": "{{eventTtl}}"
														},
														{
															"key": "ignoreSuppressedEvents",
															"value": "{{ignoreSuppressedEvents}}"
														},
														{
															"key": "includeDefaultJoinFilter",
															"value": "{{includeDefaultJoinFilter}}"
														}
													]
												},
												"description": "Returns a SuccessResponse."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription?ttl={{ttl}}&eventTtl={{eventTtl}}&ignoreSuppressedEvents={{ignoreSuppressedEvents}}&includeDefaultJoinFilter={{includeDefaultJoinFilter}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"query": [
																{
																	"key": "ttl",
																	"value": "{{ttl}}"
																},
																{
																	"key": "eventTtl",
																	"value": "{{eventTtl}}"
																},
																{
																	"key": "ignoreSuppressedEvents",
																	"value": "{{ignoreSuppressedEvents}}"
																},
																{
																	"key": "includeDefaultJoinFilter",
																	"value": "{{includeDefaultJoinFilter}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": true,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Gets a Subscription.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {    ",
															"    pm.expect(pm.response.json()).to.have.keys(\"name\", \"tableFilter\",\"expiresAt\",\"eventTtl\");",
															"    pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"subscription\"));",
															"    pm.expect(pm.response.json().eventTtl).to.eql(parseInt(pm.environment.get(\"eventTtl\")*1000));",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													]
												},
												"description": "Returns a Subscription."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"expiresAt\": \"2004-07-30T23:17:47.534Z\",\n \"name\": \"nostrud irure et dolor\",\n \"eventTtl\": {\n  \"seconds\": 79588479,\n  \"zero\": false,\n  \"negative\": false,\n  \"units\": [\n   {\n    \"duration\": {\n     \"value\": \"<Circular reference to #/components/schemas/Duration detected>\"\n    },\n    \"durationEstimated\": false,\n    \"timeBased\": false,\n    \"dateBased\": false\n   },\n   {\n    \"duration\": {\n     \"value\": \"<Circular reference to #/components/schemas/Duration detected>\"\n    },\n    \"durationEstimated\": false,\n    \"timeBased\": false,\n    \"dateBased\": false\n   }\n  ],\n  \"nano\": 54804863\n },\n \"tableFilter\": {}\n}"
												}
											]
										},
										{
											"name": "Unsubscribe operation.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const retryRequest = () => {",
															"    return new Promise((resolve, reject) => {",
															"        pm.sendRequest({",
															"            url: `${pm.environment.get(\"baseurl_dc1\")}/bus/1/${pm.environment.get(\"subscription\")}?partitioned=true`,",
															"            method: 'DELETE',",
															"            header: {",
															"                \"X-BV-API-Key\": pm.environment.get(\"api_key\"),",
															"            }",
															"        },async (error, response) => {",
															"            if (error) {",
															"                reject(error);",
															"            }",
															"            resolve(response);",
															"        });",
															"    });",
															"};",
															"",
															"pm.test(\"Status code is 200\", asyncTest(async function () {",
															"    if(pm.response.status !== 200) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.code === 200;",
															"        }, \"Error retrying unsubscribe checking status \");",
															"    }",
															"    pm.expect(response).to.have.status(200);",
															"}));",
															"",
															"pm.test(\"Body matches string\", asyncTest(async function () {",
															"    if(pm.response.status !== 200) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.code === 200;",
															"        }, \"Error retrying unsubscribe checking success\");",
															"    }",
															"    pm.expect(response.json().success).eql(true);",
															"}));",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}?partitioned={{partitioned}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														}
													]
												},
												"description": "Returns an Iterator of Subscription."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription?partitioned={{partitioned}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": true,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Gets a Subscription.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"message\", \"subscription\",\"suppressed\");",
															"    pm.expect(pm.response.json().message).to.eql(pm.environment.get(\"subscription\"));",
															"    pm.expect(pm.response.json().subscription).to.eql(pm.environment.get(\"subscription\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													]
												},
												"description": "Returns a Subscription."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"expiresAt\": \"2004-07-30T23:17:47.534Z\",\n \"name\": \"nostrud irure et dolor\",\n \"eventTtl\": {\n  \"seconds\": 79588479,\n  \"zero\": false,\n  \"negative\": false,\n  \"units\": [\n   {\n    \"duration\": {\n     \"value\": \"<Circular reference to #/components/schemas/Duration detected>\"\n    },\n    \"durationEstimated\": false,\n    \"timeBased\": false,\n    \"dateBased\": false\n   },\n   {\n    \"duration\": {\n     \"value\": \"<Circular reference to #/components/schemas/Duration detected>\"\n    },\n    \"durationEstimated\": false,\n    \"timeBased\": false,\n    \"dateBased\": false\n   }\n  ],\n  \"nano\": 54804863\n },\n \"tableFilter\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "TC: Request with permissions and partitioned = false",
									"item": [
										{
											"name": "Subscribe operation.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var uuid = require('uuid');",
															"postman.setEnvironmentVariable('subscription', 'postman_'+uuid.v4()+'_test_subscription');",
															"",
															"pm.environment.set(\"ttl\", \"86400\");",
															"pm.environment.set(\"eventTtl\", \"86400\");",
															"pm.environment.set(\"ignoreSuppressedEvents\", false);",
															"pm.environment.set(\"includeDefaultJoinFilter\", false);",
															"pm.environment.set(\"partitioned\", false);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.eql({'success':true}); ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x.json-condition"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "intrinsic(\"~table\":\"{{table}}\")"
												},
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}?ttl={{ttl}}&eventTtl={{eventTtl}}&ignoreSuppressedEvents={{ignoreSuppressedEvents}}&includeDefaultJoinFilter={{includeDefaultJoinFilter}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													],
													"query": [
														{
															"key": "ttl",
															"value": "{{ttl}}"
														},
														{
															"key": "eventTtl",
															"value": "{{eventTtl}}"
														},
														{
															"key": "ignoreSuppressedEvents",
															"value": "{{ignoreSuppressedEvents}}"
														},
														{
															"key": "includeDefaultJoinFilter",
															"value": "{{includeDefaultJoinFilter}}"
														}
													]
												},
												"description": "Returns a SuccessResponse."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription?ttl={{ttl}}&eventTtl={{eventTtl}}&ignoreSuppressedEvents={{ignoreSuppressedEvents}}&includeDefaultJoinFilter={{includeDefaultJoinFilter}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"query": [
																{
																	"key": "ttl",
																	"value": "{{ttl}}"
																},
																{
																	"key": "eventTtl",
																	"value": "{{eventTtl}}"
																},
																{
																	"key": "ignoreSuppressedEvents",
																	"value": "{{ignoreSuppressedEvents}}"
																},
																{
																	"key": "includeDefaultJoinFilter",
																	"value": "{{includeDefaultJoinFilter}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": true,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Gets a Subscription.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"name\", \"tableFilter\",\"expiresAt\",\"eventTtl\");",
															"    pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"subscription\"));",
															"    pm.expect(pm.response.json().eventTtl).to.eql(parseInt(pm.environment.get(\"eventTtl\")*1000));",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													]
												},
												"description": "Returns a Subscription."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"expiresAt\": \"2004-07-30T23:17:47.534Z\",\n \"name\": \"nostrud irure et dolor\",\n \"eventTtl\": {\n  \"seconds\": 79588479,\n  \"zero\": false,\n  \"negative\": false,\n  \"units\": [\n   {\n    \"duration\": {\n     \"value\": \"<Circular reference to #/components/schemas/Duration detected>\"\n    },\n    \"durationEstimated\": false,\n    \"timeBased\": false,\n    \"dateBased\": false\n   },\n   {\n    \"duration\": {\n     \"value\": \"<Circular reference to #/components/schemas/Duration detected>\"\n    },\n    \"durationEstimated\": false,\n    \"timeBased\": false,\n    \"dateBased\": false\n   }\n  ],\n  \"nano\": 54804863\n },\n \"tableFilter\": {}\n}"
												}
											]
										},
										{
											"name": "Unsubscribe operation.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const retryRequest = () => {",
															"    return new Promise((resolve, reject) => {",
															"        pm.sendRequest({",
															"            url: `${pm.environment.get(\"baseurl_dc1\")}/bus/1/${pm.environment.get(\"subscription\")}`,",
															"            method: 'DELETE',",
															"            header: {",
															"                \"X-BV-API-Key\": pm.environment.get(\"api_key\"),",
															"            }",
															"        }, async (error, response) => {",
															"            if (error) {",
															"                reject(error);",
															"            }",
															"            resolve(response);",
															"        });",
															"    });",
															"};",
															"",
															"pm.test(\"Status code is 200\", asyncTest(async function () {",
															"    if(pm.response.status !== 200) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.code === 200;",
															"        }, \"Error retrying unsubscribe checking status \");",
															"    }",
															"    pm.expect(response).to.have.status(200);",
															"}));",
															"",
															"pm.test(\"Body matches string\", asyncTest(async function () {",
															"    if(pm.response.status !== 200) {",
															"        await waitUntil(setTimeout, clearTimeout, async () => {",
															"            response = await retryRequest();",
															"            return response.code === 200;",
															"        }, \"Error retrying unsubscribe checking success\");",
															"    }",
															"    pm.expect(response.json().success).eql(true);",
															"}));",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}?partitioned={{partitioned}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														}
													]
												},
												"description": "Returns an Iterator of Subscription."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription?partitioned={{partitioned}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"query": [
																{
																	"key": "partitioned",
																	"value": "{{partitioned}}"
																}
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"success\": true,\n \"debug\": {}\n}"
												}
											]
										},
										{
											"name": "Gets a Subscription.",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.json()).to.have.keys(\"message\", \"subscription\",\"suppressed\");",
															"    pm.expect(pm.response.json().message).to.eql(pm.environment.get(\"subscription\"));",
															"    pm.expect(pm.response.json().subscription).to.eql(pm.environment.get(\"subscription\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-BV-API-Key",
														"value": "{{api_key}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseurl_dc1}}/bus/1/{{subscription}}",
													"host": [
														"{{baseurl_dc1}}"
													],
													"path": [
														"bus",
														"1",
														"{{subscription}}"
													]
												},
												"description": "Returns a Subscription."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/bus/1/:subscription",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"bus",
																"1",
																":subscription"
															],
															"variable": [
																{
																	"key": "subscription"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"expiresAt\": \"2004-07-30T23:17:47.534Z\",\n \"name\": \"nostrud irure et dolor\",\n \"eventTtl\": {\n  \"seconds\": 79588479,\n  \"zero\": false,\n  \"negative\": false,\n  \"units\": [\n   {\n    \"duration\": {\n     \"value\": \"<Circular reference to #/components/schemas/Duration detected>\"\n    },\n    \"durationEstimated\": false,\n    \"timeBased\": false,\n    \"dateBased\": false\n   },\n   {\n    \"duration\": {\n     \"value\": \"<Circular reference to #/components/schemas/Duration detected>\"\n    },\n    \"durationEstimated\": false,\n    \"timeBased\": false,\n    \"dateBased\": false\n   }\n  ],\n  \"nano\": 54804863\n },\n \"tableFilter\": {}\n}"
												}
											]
										}
									]
								},
								{
									"name": "Unsubscribe operation.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"partitioned\", true);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": {{subscription}}    \n}"
										},
										"url": {
											"raw": "{{baseurl_dc1}}/bus/1/:subscription?partitioned={{partitioned}}",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"bus",
												"1",
												":subscription"
											],
											"query": [
												{
													"key": "partitioned",
													"value": "{{partitioned}}"
												}
											],
											"variable": [
												{
													"key": "subscription",
													"value": "{{subscription}}",
													"type": "text",
													"enabled": true
												}
											]
										},
										"description": "Returns an Iterator of Subscription."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/bus/1/:subscription?partitioned={{partitioned}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"bus",
														"1",
														":subscription"
													],
													"query": [
														{
															"key": "partitioned",
															"value": "{{partitioned}}"
														}
													],
													"variable": [
														{
															"key": "subscription"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"success\": true,\n \"debug\": {}\n}"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Imports an arbitrary size stream of deltas and/or JSON objects",
			"item": [
				{
					"name": "TC: Request with api key without access",
					"item": [
						{
							"name": "Imports an arbitrary size stream of deltas and/or JSON objects",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.json().reason).to.be.oneOf([`not authorized to update table ${pm.environment.get('table')}`, 'not authorized']);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-BV-API-Key",
										"value": "{{api_key_no_rights}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n         {\n            \"~id\": \"1\",\n            \"~table\": \"{{table}}\",\n            \"table\": \"{{table}}\",\n            \"key\": \"demo1\",\n            \"delta\": \"{\\\"field1\\\":\\\"value1\\\",\\\"field2\\\":\\\"value2\\\",\\\"field3\\\":\\\"value3\\\"}\",\n            \"consistency\": \"STRONG\",\n            \"audit\": {\n              \"comment\": \"Adding demo1 document\"\n            }\n          },\n          {\n            \"~id\": \"2\",\n            \"~table\": \"{{table}}\",\n            \"table\": \"{{table}}\",\n            \"key\": \"demo2\",\n            \"delta\": \"{\\\"field1\\\":\\\"value1.1\\\",\\\"field5\\\":\\\"value5\\\",\\\"field32\\\":\\\"value33\\\"}\",\n            \"consistency\": \"STRONG\",\n            \"audit\": {\n            \"comment\": \"Update and Add\"\n        }\n      }\n]"
								},
								"url": {
									"raw": "{{baseurl_dc1}}/sor/1?audit=comment:'imports+stream+of+deltas'&consistency=STRONG&facade=false",
									"host": [
										"{{baseurl_dc1}}"
									],
									"path": [
										"sor",
										"1"
									],
									"query": [
										{
											"key": "changeId",
											"value": "<string>",
											"disabled": true
										},
										{
											"key": "audit",
											"value": "comment:'imports+stream+of+deltas'"
										},
										{
											"key": "consistency",
											"value": "STRONG"
										},
										{
											"key": "facade",
											"value": "false"
										}
									]
								},
								"description": "Imports an arbitrary size stream of deltas and/or JSON objects.  Two formats are supported: array syntax\n     * ('[' object ',' object ',' ... ']') and whitespace-separated objects (object whitespace object whitespace ...)\n     * Each piece of content must have top-level \"~id\" and \"~table\" attributes that determines the table and object\n     * key in the SoR."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sor/1?changeId=<string>&audit=<string>&consistency=STRONG&facade=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sor",
												"1"
											],
											"query": [
												{
													"key": "changeId",
													"value": "<string>"
												},
												{
													"key": "audit",
													"value": "<string>"
												},
												{
													"key": "consistency",
													"value": "STRONG"
												},
												{
													"key": "facade",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"success\": false,\n \"debug\": {}\n}"
								}
							]
						}
					]
				},
				{
					"name": "TC: Request without audit param",
					"item": [
						{
							"name": "Imports an arbitrary size stream of deltas and/or JSON objects",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.eql(\"Missing required query parameter: audit\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-BV-API-Key",
										"value": "{{api_key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n         {\n            \"table\": \"{{table}}\",\n            \"key\": \"demo1\",\n            \"delta\": \"{\\\"field1\\\":\\\"value1\\\",\\\"field2\\\":\\\"value2\\\",\\\"field3\\\":\\\"value3\\\"}\",\n            \"consistency\": \"STRONG\",\n            \"audit\": {\n              \"comment\": \"Adding demo1 document\"\n            }\n          },\n          {\n            \"table\": \"{{table}}\",\n            \"key\": \"demo2\",\n            \"delta\": \"{\\\"field1\\\":\\\"value1.1\\\",\\\"field5\\\":\\\"value5\\\",\\\"field32\\\":\\\"value33\\\"}\",\n            \"consistency\": \"STRONG\",\n            \"audit\": {\n            \"comment\": \"Update and Add\"\n        }\n      }\n]"
								},
								"url": {
									"raw": "{{baseurl_dc1}}/sor/1?consistency=STRONG&facade=false",
									"host": [
										"{{baseurl_dc1}}"
									],
									"path": [
										"sor",
										"1"
									],
									"query": [
										{
											"key": "changeId",
											"value": "<string>",
											"disabled": true
										},
										{
											"key": "audit",
											"value": "comment:'imports+stream+of+deltas'",
											"disabled": true
										},
										{
											"key": "consistency",
											"value": "STRONG"
										},
										{
											"key": "facade",
											"value": "false"
										}
									]
								},
								"description": "Imports an arbitrary size stream of deltas and/or JSON objects.  Two formats are supported: array syntax\n     * ('[' object ',' object ',' ... ']') and whitespace-separated objects (object whitespace object whitespace ...)\n     * Each piece of content must have top-level \"~id\" and \"~table\" attributes that determines the table and object\n     * key in the SoR."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sor/1?changeId=<string>&audit=<string>&consistency=STRONG&facade=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sor",
												"1"
											],
											"query": [
												{
													"key": "changeId",
													"value": "<string>"
												},
												{
													"key": "audit",
													"value": "<string>"
												},
												{
													"key": "consistency",
													"value": "STRONG"
												},
												{
													"key": "facade",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"success\": false,\n \"debug\": {}\n}"
								}
							]
						}
					]
				},
				{
					"name": "TC: Request with wrong changeId param",
					"item": [
						{
							"name": "Imports an arbitrary size stream of deltas and/or JSON objects",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.eql(\"Invalid uuid parameter (must be a RFC 4122 version 1 time-based uuid): wrong_changeId\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-BV-API-Key",
										"value": "{{api_key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n         {\n            \"~id\": \"1\",\n            \"~table\": \"{{table}}\",\n            \"table\": \"{{table}}\",\n            \"key\": \"demo1\",\n            \"delta\": \"{\\\"field1\\\":\\\"value1\\\",\\\"field2\\\":\\\"value2\\\",\\\"field3\\\":\\\"value3\\\"}\",\n            \"consistency\": \"STRONG\",\n            \"audit\": {\n              \"comment\": \"Adding demo1 document\"\n            }\n          },\n          {\n            \"~id\": \"1\",\n            \"~table\": \"{{table}}\",\n            \"table\": \"{{table}}\",\n            \"key\": \"demo2\",\n            \"delta\": \"{\\\"field1\\\":\\\"value1.1\\\",\\\"field5\\\":\\\"value5\\\",\\\"field32\\\":\\\"value33\\\"}\",\n            \"consistency\": \"STRONG\",\n            \"audit\": {\n            \"comment\": \"Update and Add\"\n        }\n      }\n]"
								},
								"url": {
									"raw": "{{baseurl_dc1}}/sor/1?changeId=wrong_changeId&audit=comment:'imports+stream+of+deltas'&consistency=STRONG&facade=false",
									"host": [
										"{{baseurl_dc1}}"
									],
									"path": [
										"sor",
										"1"
									],
									"query": [
										{
											"key": "changeId",
											"value": "wrong_changeId"
										},
										{
											"key": "audit",
											"value": "comment:'imports+stream+of+deltas'"
										},
										{
											"key": "consistency",
											"value": "STRONG"
										},
										{
											"key": "facade",
											"value": "false"
										}
									]
								},
								"description": "Imports an arbitrary size stream of deltas and/or JSON objects.  Two formats are supported: array syntax\n     * ('[' object ',' object ',' ... ']') and whitespace-separated objects (object whitespace object whitespace ...)\n     * Each piece of content must have top-level \"~id\" and \"~table\" attributes that determines the table and object\n     * key in the SoR."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sor/1?changeId=<string>&audit=<string>&consistency=STRONG&facade=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sor",
												"1"
											],
											"query": [
												{
													"key": "changeId",
													"value": "<string>"
												},
												{
													"key": "audit",
													"value": "<string>"
												},
												{
													"key": "consistency",
													"value": "STRONG"
												},
												{
													"key": "facade",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"success\": false,\n \"debug\": {}\n}"
								}
							]
						}
					]
				},
				{
					"name": "TC: Request to table without facade, with audit, consistency are set",
					"item": [
						{
							"name": "Creates a table",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var uuid = require('uuid');",
											"postman.setEnvironmentVariable('table', 'postman_'+uuid.v4());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-BV-API-Key",
										"type": "text",
										"value": "{{api_key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
									"host": [
										"{{baseurl_dc1}}"
									],
									"path": [
										"sor",
										"1",
										"_table",
										"{{table}}"
									],
									"query": [
										{
											"key": "options",
											"value": "placement:'ugc_global:ugc'"
										},
										{
											"key": "audit",
											"value": "comment:'initial+provisioning'"
										}
									]
								},
								"description": "Returns a SuccessResponse if table is created"
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"_table",
												":table"
											],
											"query": [
												{
													"key": "options",
													"value": "<string>"
												},
												{
													"key": "audit",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "table"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"success\": false,\n \"debug\": {}\n}"
								}
							]
						},
						{
							"name": "Imports an arbitrary size stream of deltas and/or JSON objects",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.json()).to.eql({ success: true });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-BV-API-Key",
										"value": "{{api_key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n         {\n            \"~id\": \"1\",\n            \"~table\": \"{{table}}\",\n            \"table\": \"{{table}}\",\n            \"key\": \"demo1\",\n            \"delta\": \"{\\\"field1\\\":\\\"value1\\\",\\\"field2\\\":\\\"value2\\\",\\\"field3\\\":\\\"value3\\\"}\",\n            \"consistency\": \"STRONG\",\n            \"audit\": {\n              \"comment\": \"Adding demo1 document\"\n            }\n          },\n          {\n            \"~id\": \"2\",\n            \"~table\": \"{{table}}\",\n            \"table\": \"{{table}}\",\n            \"key\": \"demo2\",\n            \"delta\": \"{\\\"field1\\\":\\\"value1.1\\\",\\\"field5\\\":\\\"value5\\\",\\\"field32\\\":\\\"value33\\\"}\",\n            \"consistency\": \"STRONG\",\n            \"audit\": {\n            \"comment\": \"Update and Add\"\n        }\n      }\n]"
								},
								"url": {
									"raw": "{{baseurl_dc1}}/sor/1?audit=comment:'imports+stream+of+deltas'&consistency=STRONG&facade=false",
									"host": [
										"{{baseurl_dc1}}"
									],
									"path": [
										"sor",
										"1"
									],
									"query": [
										{
											"key": "changeId",
											"value": "<string>",
											"disabled": true
										},
										{
											"key": "audit",
											"value": "comment:'imports+stream+of+deltas'"
										},
										{
											"key": "consistency",
											"value": "STRONG"
										},
										{
											"key": "facade",
											"value": "false"
										}
									]
								},
								"description": "Imports an arbitrary size stream of deltas and/or JSON objects.  Two formats are supported: array syntax\n     * ('[' object ',' object ',' ... ']') and whitespace-separated objects (object whitespace object whitespace ...)\n     * Each piece of content must have top-level \"~id\" and \"~table\" attributes that determines the table and object\n     * key in the SoR."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sor/1?changeId=<string>&audit=<string>&consistency=STRONG&facade=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sor",
												"1"
											],
											"query": [
												{
													"key": "changeId",
													"value": "<string>"
												},
												{
													"key": "audit",
													"value": "<string>"
												},
												{
													"key": "consistency",
													"value": "STRONG"
												},
												{
													"key": "facade",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"success\": false,\n \"debug\": {}\n}"
								}
							]
						},
						{
							"name": "Drops a table",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-BV-API-Key",
										"type": "text",
										"value": "{{api_key}}"
									}
								],
								"url": {
									"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
									"host": [
										"{{baseurl_dc1}}"
									],
									"path": [
										"sor",
										"1",
										"_table",
										"{{table}}"
									],
									"query": [
										{
											"key": "audit",
											"value": "comment:'table_removal'"
										}
									]
								},
								"description": "Returns a SuccessResponse if table is dropped"
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"_table",
												":table"
											],
											"query": [
												{
													"key": "audit",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "table"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"success\": false,\n \"debug\": {}\n}"
								}
							]
						}
					]
				},
				{
					"name": "TC: Request to table without facade, with all params without ~id and ~table",
					"item": [
						{
							"name": "Creates a table",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var uuid = require('uuid');",
											"postman.setEnvironmentVariable('table', 'postman_'+uuid.v4());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-BV-API-Key",
										"type": "text",
										"value": "{{api_key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
									"host": [
										"{{baseurl_dc1}}"
									],
									"path": [
										"sor",
										"1",
										"_table",
										"{{table}}"
									],
									"query": [
										{
											"key": "options",
											"value": "placement:'ugc_global:ugc'"
										},
										{
											"key": "audit",
											"value": "comment:'initial+provisioning'"
										}
									]
								},
								"description": "Returns a SuccessResponse if table is created"
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"_table",
												":table"
											],
											"query": [
												{
													"key": "options",
													"value": "<string>"
												},
												{
													"key": "audit",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "table"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"success\": false,\n \"debug\": {}\n}"
								}
							]
						},
						{
							"name": "Imports an arbitrary size stream of deltas and/or JSON objects",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.eql(\"Unable to cast value to String: null\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-BV-API-Key",
										"value": "{{api_key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n         {\n            \"table\": \"{{table}}\",\n            \"key\": \"demo1\",\n            \"delta\": \"{\\\"field1\\\":\\\"value1\\\",\\\"field2\\\":\\\"value2\\\",\\\"field3\\\":\\\"value3\\\"}\",\n            \"consistency\": \"STRONG\",\n            \"audit\": {\n              \"comment\": \"Adding demo1 document\"\n            }\n          },\n          {\n            \"~id\": \"2\",\n            \"~table\": \"{{table}}\",\n            \"table\": \"{{table}}\",\n            \"key\": \"demo2\",\n            \"delta\": \"{\\\"field1\\\":\\\"value1.1\\\",\\\"field5\\\":\\\"value5\\\",\\\"field32\\\":\\\"value33\\\"}\",\n            \"consistency\": \"STRONG\",\n            \"audit\": {\n            \"comment\": \"Update and Add\"\n        }\n      }\n]"
								},
								"url": {
									"raw": "{{baseurl_dc1}}/sor/1?audit=comment:'imports+stream+of+deltas'&consistency=STRONG&facade=false",
									"host": [
										"{{baseurl_dc1}}"
									],
									"path": [
										"sor",
										"1"
									],
									"query": [
										{
											"key": "changeId",
											"value": "<string>",
											"disabled": true
										},
										{
											"key": "audit",
											"value": "comment:'imports+stream+of+deltas'"
										},
										{
											"key": "consistency",
											"value": "STRONG"
										},
										{
											"key": "facade",
											"value": "false"
										}
									]
								},
								"description": "Imports an arbitrary size stream of deltas and/or JSON objects.  Two formats are supported: array syntax\n     * ('[' object ',' object ',' ... ']') and whitespace-separated objects (object whitespace object whitespace ...)\n     * Each piece of content must have top-level \"~id\" and \"~table\" attributes that determines the table and object\n     * key in the SoR."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sor/1?changeId=<string>&audit=<string>&consistency=STRONG&facade=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sor",
												"1"
											],
											"query": [
												{
													"key": "changeId",
													"value": "<string>"
												},
												{
													"key": "audit",
													"value": "<string>"
												},
												{
													"key": "consistency",
													"value": "STRONG"
												},
												{
													"key": "facade",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"success\": false,\n \"debug\": {}\n}"
								}
							]
						},
						{
							"name": "Drops a table",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-BV-API-Key",
										"type": "text",
										"value": "{{api_key}}"
									}
								],
								"url": {
									"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
									"host": [
										"{{baseurl_dc1}}"
									],
									"path": [
										"sor",
										"1",
										"_table",
										"{{table}}"
									],
									"query": [
										{
											"key": "audit",
											"value": "comment:'table_removal'"
										}
									]
								},
								"description": "Returns a SuccessResponse if table is dropped"
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"_table",
												":table"
											],
											"query": [
												{
													"key": "audit",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "table"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"success\": false,\n \"debug\": {}\n}"
								}
							]
						}
					]
				},
				{
					"name": "TC: Request to table without facade, with all params with application/x.json-deltas content",
					"item": [
						{
							"name": "Creates a table",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var uuid = require('uuid');",
											"postman.setEnvironmentVariable('table', 'postman_'+uuid.v4());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-BV-API-Key",
										"type": "text",
										"value": "{{api_key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
									"host": [
										"{{baseurl_dc1}}"
									],
									"path": [
										"sor",
										"1",
										"_table",
										"{{table}}"
									],
									"query": [
										{
											"key": "options",
											"value": "placement:'ugc_global:ugc'"
										},
										{
											"key": "audit",
											"value": "comment:'initial+provisioning'"
										}
									]
								},
								"description": "Returns a SuccessResponse if table is created"
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"_table",
												":table"
											],
											"query": [
												{
													"key": "options",
													"value": "<string>"
												},
												{
													"key": "audit",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "table"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"success\": false,\n \"debug\": {}\n}"
								}
							]
						},
						{
							"name": "Imports an arbitrary size stream of deltas and/or JSON objects",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-BV-API-Key",
										"value": "{{api_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/x.json-deltas",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"~id\": \"1\",\n    \"~table\": \"{{table}}\",\n    \"table\": \"{{table}}\",\n    \"key\": \"demo1\",\n    \"delta\": \"{\\\"field1\\\":\\\"value1\\\",\\\"field2\\\":\\\"value2\\\",\\\"field3\\\":\\\"value3\\\"}\",\n    \"consistency\": \"STRONG\",\n    \"audit\": {\n        \"comment\": \"Adding demo1 document\"\n    }\n} \n{\n    \"~id\": \"2\",\n    \"~table\": \"{{table}}\",\n    \"table\": \"{{table}}\",\n    \"key\": \"demo2\",\n    \"delta\": \"{\\\"field1\\\":\\\"value1.1\\\",\\\"field5\\\":\\\"value5\\\",\\\"field32\\\":\\\"value33\\\"}\",\n    \"consistency\": \"STRONG\",\n    \"audit\": {\n        \"comment\": \"Update and Add\"\n    }\n}\n"
								},
								"url": {
									"raw": "{{baseurl_dc1}}/sor/1?audit=comment:'imports+stream+of+deltas'&consistency=STRONG&facade=false",
									"host": [
										"{{baseurl_dc1}}"
									],
									"path": [
										"sor",
										"1"
									],
									"query": [
										{
											"key": "changeId",
											"value": "<string>",
											"disabled": true
										},
										{
											"key": "audit",
											"value": "comment:'imports+stream+of+deltas'"
										},
										{
											"key": "consistency",
											"value": "STRONG"
										},
										{
											"key": "facade",
											"value": "false"
										}
									]
								},
								"description": "Imports an arbitrary size stream of deltas and/or JSON objects.  Two formats are supported: array syntax\n     * ('[' object ',' object ',' ... ']') and whitespace-separated objects (object whitespace object whitespace ...)\n     * Each piece of content must have top-level \"~id\" and \"~table\" attributes that determines the table and object\n     * key in the SoR."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sor/1?changeId=<string>&audit=<string>&consistency=STRONG&facade=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sor",
												"1"
											],
											"query": [
												{
													"key": "changeId",
													"value": "<string>"
												},
												{
													"key": "audit",
													"value": "<string>"
												},
												{
													"key": "consistency",
													"value": "STRONG"
												},
												{
													"key": "facade",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"success\": false,\n \"debug\": {}\n}"
								}
							]
						},
						{
							"name": "Drops a table",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-BV-API-Key",
										"type": "text",
										"value": "{{api_key}}"
									}
								],
								"url": {
									"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
									"host": [
										"{{baseurl_dc1}}"
									],
									"path": [
										"sor",
										"1",
										"_table",
										"{{table}}"
									],
									"query": [
										{
											"key": "audit",
											"value": "comment:'table_removal'"
										}
									]
								},
								"description": "Returns a SuccessResponse if table is dropped"
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"_table",
												":table"
											],
											"query": [
												{
													"key": "audit",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "table"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"success\": false,\n \"debug\": {}\n}"
								}
							]
						}
					]
				},
				{
					"name": "TC: Request to table with facade, with audit, consistency are set",
					"item": [
						{
							"name": "Creates a table",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var uuid = require('uuid');",
											"postman.setEnvironmentVariable('table', 'postman_'+uuid.v4());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-BV-API-Key",
										"type": "text",
										"value": "{{api_key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_global:ugc'&audit=comment:'initial+provisioning'",
									"host": [
										"{{baseurl_dc1}}"
									],
									"path": [
										"sor",
										"1",
										"_table",
										"{{table}}"
									],
									"query": [
										{
											"key": "options",
											"value": "placement:'ugc_global:ugc'"
										},
										{
											"key": "audit",
											"value": "comment:'initial+provisioning'"
										}
									]
								},
								"description": "Returns a SuccessResponse if table is created"
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"_table",
												":table"
											],
											"query": [
												{
													"key": "options",
													"value": "<string>"
												},
												{
													"key": "audit",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "table"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"success\": false,\n \"debug\": {}\n}"
								}
							]
						},
						{
							"name": "Creates a facade",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost'); ",
											"",
											"(isLocal ? pm.test.skip : pm.test)(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"(isLocal ? pm.test.skip : pm.test)(\"Body matches string\", function () {",
											"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-BV-Api-Key",
										"value": "{{api_key}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}?options=placement:'ugc_us:ugc'&audit=audit=comment:'initial+facade+provisioning'",
									"host": [
										"{{baseurl_dc2}}"
									],
									"path": [
										"sor",
										"1",
										"_facade",
										"{{table}}"
									],
									"query": [
										{
											"key": "options",
											"value": "placement:'ugc_us:ugc'"
										},
										{
											"key": "audit",
											"value": "audit=comment:'initial+facade+provisioning'"
										}
									]
								},
								"description": "Returns a SuccessResponse if facade is created"
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sor/1/_facade/:table?options=<string>&audit=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sor",
												"1",
												"_facade",
												":table"
											],
											"query": [
												{
													"key": "options",
													"value": "<string>"
												},
												{
													"key": "audit",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "table"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"success\": false,\n \"debug\": {}\n}"
								}
							]
						},
						{
							"name": "Imports an arbitrary size stream of deltas and/or JSON objects",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.eql(\"Access denied. Update intended for a facade, but the table would be updated.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-BV-API-Key",
										"value": "{{api_key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n         {\n            \"~id\": \"1\",\n            \"~table\": \"{{table}}\",\n            \"table\": \"{{table}}\",\n            \"key\": \"demo1\",\n            \"delta\": \"{\\\"field1\\\":\\\"value1\\\",\\\"field2\\\":\\\"value2\\\",\\\"field3\\\":\\\"value3\\\"}\",\n            \"consistency\": \"STRONG\",\n            \"audit\": {\n              \"comment\": \"Adding demo1 document\"\n            }\n          },\n          {\n            \"~id\": \"2\",\n            \"~table\": \"{{table}}\",\n            \"table\": \"{{table}}\",\n            \"key\": \"demo2\",\n            \"delta\": \"{\\\"field1\\\":\\\"value1.1\\\",\\\"field5\\\":\\\"value5\\\",\\\"field32\\\":\\\"value33\\\"}\",\n            \"consistency\": \"STRONG\",\n            \"audit\": {\n            \"comment\": \"Update and Add\"\n        }\n      }\n]"
								},
								"url": {
									"raw": "{{baseurl_dc1}}/sor/1?audit=comment:'imports+stream+of+deltas'&consistency=STRONG&facade=true",
									"host": [
										"{{baseurl_dc1}}"
									],
									"path": [
										"sor",
										"1"
									],
									"query": [
										{
											"key": "changeId",
											"value": "<string>",
											"disabled": true
										},
										{
											"key": "audit",
											"value": "comment:'imports+stream+of+deltas'"
										},
										{
											"key": "consistency",
											"value": "STRONG"
										},
										{
											"key": "facade",
											"value": "true"
										}
									]
								},
								"description": "Imports an arbitrary size stream of deltas and/or JSON objects.  Two formats are supported: array syntax\n     * ('[' object ',' object ',' ... ']') and whitespace-separated objects (object whitespace object whitespace ...)\n     * Each piece of content must have top-level \"~id\" and \"~table\" attributes that determines the table and object\n     * key in the SoR."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sor/1?changeId=<string>&audit=<string>&consistency=STRONG&facade=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sor",
												"1"
											],
											"query": [
												{
													"key": "changeId",
													"value": "<string>"
												},
												{
													"key": "audit",
													"value": "<string>"
												},
												{
													"key": "consistency",
													"value": "STRONG"
												},
												{
													"key": "facade",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"success\": false,\n \"debug\": {}\n}"
								}
							]
						},
						{
							"name": "Drops a table",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-BV-API-Key",
										"type": "text",
										"value": "{{api_key}}"
									}
								],
								"url": {
									"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
									"host": [
										"{{baseurl_dc1}}"
									],
									"path": [
										"sor",
										"1",
										"_table",
										"{{table}}"
									],
									"query": [
										{
											"key": "audit",
											"value": "comment:'table_removal'"
										}
									]
								},
								"description": "Returns a SuccessResponse if table is dropped"
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"_table",
												":table"
											],
											"query": [
												{
													"key": "audit",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "table"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"success\": false,\n \"debug\": {}\n}"
								}
							]
						}
					]
				},
				{
					"name": "TC: Request to table with facade is true, with audit, consistency are set. To datacenter with facade",
					"item": [
						{
							"name": "Creates a table",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var uuid = require('uuid');",
											"postman.setEnvironmentVariable('table', 'postman_'+uuid.v4());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost'); ",
											"",
											"(isLocal ? pm.test.skip : pm.test)(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"(isLocal ? pm.test.skip : pm.test)(\"Body matches string\", function () {",
											"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-BV-API-Key",
										"type": "text",
										"value": "{{api_key}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"customer\": \"postman\",\n    \"test_table\":\"{{table}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?options=placement:'ugc_eu:ugc'&audit=comment:'initial+provisioning'",
									"host": [
										"{{baseurl_dc1}}"
									],
									"path": [
										"sor",
										"1",
										"_table",
										"{{table}}"
									],
									"query": [
										{
											"key": "options",
											"value": "placement:'ugc_eu:ugc'"
										},
										{
											"key": "audit",
											"value": "comment:'initial+provisioning'"
										}
									]
								},
								"description": "Returns a SuccessResponse if table is created"
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/_table/:table?options=<string>&audit=<string>",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"_table",
												":table"
											],
											"query": [
												{
													"key": "options",
													"value": "<string>"
												},
												{
													"key": "audit",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "table"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"success\": false,\n \"debug\": {}\n}"
								}
							]
						},
						{
							"name": "Creates a facade",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost'); ",
											"",
											"(isLocal ? pm.test.skip : pm.test)(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"(isLocal ? pm.test.skip : pm.test)(\"Body matches string\", function () {",
											"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-BV-Api-Key",
										"value": "{{api_key}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseurl_dc2}}/sor/1/_facade/{{table}}?options=placement:'ugc_us:ugc'&audit=audit=comment:'initial+facade+provisioning'",
									"host": [
										"{{baseurl_dc2}}"
									],
									"path": [
										"sor",
										"1",
										"_facade",
										"{{table}}"
									],
									"query": [
										{
											"key": "options",
											"value": "placement:'ugc_us:ugc'"
										},
										{
											"key": "audit",
											"value": "audit=comment:'initial+facade+provisioning'"
										}
									]
								},
								"description": "Returns a SuccessResponse if facade is created"
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sor/1/_facade/:table?options=<string>&audit=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sor",
												"1",
												"_facade",
												":table"
											],
											"query": [
												{
													"key": "options",
													"value": "<string>"
												},
												{
													"key": "audit",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "table"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"success\": false,\n \"debug\": {}\n}"
								}
							]
						},
						{
							"name": "Imports an arbitrary size stream of deltas and/or JSON objects",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost'); ",
											"",
											"(isLocal ? pm.test.skip : pm.test)(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"(isLocal ? pm.test.skip : pm.test)(\"Body matches string\", function () {",
											"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-BV-API-Key",
										"value": "{{api_key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n         {\n            \"~id\": \"1\",\n            \"~table\": \"{{table}}\",\n            \"table\": \"{{table}}\",\n            \"key\": \"demo1\",\n            \"delta\": \"{\\\"field1\\\":\\\"value1\\\",\\\"field2\\\":\\\"value2\\\",\\\"field3\\\":\\\"value3\\\"}\",\n            \"consistency\": \"STRONG\",\n            \"audit\": {\n              \"comment\": \"Adding demo1 document\"\n            }\n          },\n          {\n            \"~id\": \"2\",\n            \"~table\": \"{{table}}\",\n            \"table\": \"{{table}}\",\n            \"key\": \"demo2\",\n            \"delta\": \"{\\\"field1\\\":\\\"value1.1\\\",\\\"field5\\\":\\\"value5\\\",\\\"field32\\\":\\\"value33\\\"}\",\n            \"consistency\": \"STRONG\",\n            \"audit\": {\n            \"comment\": \"Update and Add\"\n        }\n      }\n]"
								},
								"url": {
									"raw": "{{baseurl_dc2}}/sor/1?audit=comment:'imports+stream+of+deltas'&consistency=STRONG&facade=true",
									"host": [
										"{{baseurl_dc2}}"
									],
									"path": [
										"sor",
										"1"
									],
									"query": [
										{
											"key": "changeId",
											"value": "<string>",
											"disabled": true
										},
										{
											"key": "audit",
											"value": "comment:'imports+stream+of+deltas'"
										},
										{
											"key": "consistency",
											"value": "STRONG"
										},
										{
											"key": "facade",
											"value": "true"
										}
									]
								},
								"description": "Imports an arbitrary size stream of deltas and/or JSON objects.  Two formats are supported: array syntax\n     * ('[' object ',' object ',' ... ']') and whitespace-separated objects (object whitespace object whitespace ...)\n     * Each piece of content must have top-level \"~id\" and \"~table\" attributes that determines the table and object\n     * key in the SoR."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sor/1?changeId=<string>&audit=<string>&consistency=STRONG&facade=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sor",
												"1"
											],
											"query": [
												{
													"key": "changeId",
													"value": "<string>"
												},
												{
													"key": "audit",
													"value": "<string>"
												},
												{
													"key": "consistency",
													"value": "STRONG"
												},
												{
													"key": "facade",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"success\": false,\n \"debug\": {}\n}"
								}
							]
						},
						{
							"name": "Imports an arbitrary size stream of deltas and/or JSON objects Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost'); ",
											"",
											"(isLocal ? pm.test.skip : pm.test)(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"(isLocal ? pm.test.skip : pm.test)(\"Body matches string\", function () {",
											"    pm.expect(pm.response.json()).to.eql({\"success\":true});",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-BV-API-Key",
										"value": "{{api_key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/x.json-deltas",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"~id\": \"1\",\n\"~table\": \"{{table}}\",\n\"table\": \"{{table}}\",\n\"key\": \"demo1\",\n\"delta\": \"{\\\"field1\\\":\\\"value1\\\",\\\"field2\\\":\\\"value2\\\",\\\"field3\\\":\\\"value3\\\"}\",\n\"consistency\": \"STRONG\",\n\"audit\": {\n\"comment\": \"Adding demo1 document\"\n}} \n{\n\"~id\": \"2\",\n            \"~table\": \"{{table}}\",\n            \"table\": \"{{table}}\",\n            \"key\": \"demo2\",\n            \"delta\": \"{\\\"field1\\\":\\\"value1.1\\\",\\\"field5\\\":\\\"value5\\\",\\\"field32\\\":\\\"value33\\\"}\",\n            \"consistency\": \"STRONG\",\n            \"audit\": {\n            \"comment\": \"Update and Add\"\n        }\n      }",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{baseurl_dc2}}/sor/1?audit=comment:'imports+stream+of+deltas'&consistency=STRONG&facade=true",
									"host": [
										"{{baseurl_dc2}}"
									],
									"path": [
										"sor",
										"1"
									],
									"query": [
										{
											"key": "changeId",
											"value": "<string>",
											"disabled": true
										},
										{
											"key": "audit",
											"value": "comment:'imports+stream+of+deltas'"
										},
										{
											"key": "consistency",
											"value": "STRONG"
										},
										{
											"key": "facade",
											"value": "true"
										}
									]
								},
								"description": "Imports an arbitrary size stream of deltas and/or JSON objects.  Two formats are supported: array syntax\n     * ('[' object ',' object ',' ... ']') and whitespace-separated objects (object whitespace object whitespace ...)\n     * Each piece of content must have top-level \"~id\" and \"~table\" attributes that determines the table and object\n     * key in the SoR."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sor/1?changeId=<string>&audit=<string>&consistency=STRONG&facade=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sor",
												"1"
											],
											"query": [
												{
													"key": "changeId",
													"value": "<string>"
												},
												{
													"key": "audit",
													"value": "<string>"
												},
												{
													"key": "consistency",
													"value": "STRONG"
												},
												{
													"key": "facade",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"success\": false,\n \"debug\": {}\n}"
								}
							]
						},
						{
							"name": "Drops a table",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const isLocal = pm.environment.get(\"baseurl_dc1\").includes('localhost'); ",
											"",
											"(isLocal ? pm.test.skip : pm.test)(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"(isLocal ? pm.test.skip : pm.test)(\"Body matches string\", function () {",
											"    pm.expect(pm.response.json()).to.eql({ \"success\": true });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-BV-API-Key",
										"type": "text",
										"value": "{{api_key}}"
									}
								],
								"url": {
									"raw": "{{baseurl_dc1}}/sor/1/_table/{{table}}?audit=comment:'table_removal'",
									"host": [
										"{{baseurl_dc1}}"
									],
									"path": [
										"sor",
										"1",
										"_table",
										"{{table}}"
									],
									"query": [
										{
											"key": "audit",
											"value": "comment:'table_removal'"
										}
									]
								},
								"description": "Returns a SuccessResponse if table is dropped"
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseurl_dc1}}/sor/1/_table/:table?audit=<string>",
											"host": [
												"{{baseurl_dc1}}"
											],
											"path": [
												"sor",
												"1",
												"_table",
												":table"
											],
											"query": [
												{
													"key": "audit",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "table"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"success\": false,\n \"debug\": {}\n}"
								}
							]
						}
					]
				},
				{
					"name": "Imports an arbitrary size stream of deltas and/or JSON objects",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"<string>\",\n    \"authenticationId\": \"<string>\"\n}"
						},
						"url": {
							"raw": "{{baseurl_dc1}}/sor/1?changeId=<string>&audit=<string>&consistency=STRONG&facade=<string>",
							"host": [
								"{{baseurl_dc1}}"
							],
							"path": [
								"sor",
								"1"
							],
							"query": [
								{
									"key": "changeId",
									"value": "<string>"
								},
								{
									"key": "audit",
									"value": "<string>"
								},
								{
									"key": "consistency",
									"value": "STRONG"
								},
								{
									"key": "facade",
									"value": "<string>"
								}
							]
						},
						"description": "Imports an arbitrary size stream of deltas and/or JSON objects.  Two formats are supported: array syntax\n     * ('[' object ',' object ',' ... ']') and whitespace-separated objects (object whitespace object whitespace ...)\n     * Each piece of content must have top-level \"~id\" and \"~table\" attributes that determines the table and object\n     * key in the SoR."
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/sor/1?changeId=<string>&audit=<string>&consistency=STRONG&facade=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sor",
										"1"
									],
									"query": [
										{
											"key": "changeId",
											"value": "<string>"
										},
										{
											"key": "audit",
											"value": "<string>"
										},
										{
											"key": "consistency",
											"value": "STRONG"
										},
										{
											"key": "facade",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"success\": false,\n \"debug\": {}\n}"
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"/**",
					" * Waits until the given predicate returns a truthy value. Calls and awaits the predicate",
					" * function at the given interval time. Can be used to poll until a certain condition is true.",
					" *",
					" * @example",
					" * ```js",
					" * import { fixture, waitUntil } from '@open-wc/testing-helpers';",
					" *",
					" * const element = await fixture(html`<my-element></my-element>`);",
					" *",
					" * await waitUntil(() => element.someAsyncProperty, 'element should become ready');",
					" *",
					"",
					" *",
					" * @param {() => boolean | Promise<boolean>} predicate - predicate function which is called each poll interval.",
					" *   The predicate is awaited, so it can return a promise.",
					" * @param {string} [message] an optional message to display when the condition timed out",
					" * @param {{ interval?: number, timeout?: number }} [options] timeout and polling interval",
					" */",
					"waitUntil = (setTimeout, clearTimeout, predicate, message, options = {}) => {",
					"  const { interval = 1000, timeout = 20000 } = options;",
					"",
					"  return new Promise((resolve, reject) => {",
					"    let timeoutId;",
					"    let failTimeoutId;",
					"",
					"    failTimeoutId = setTimeout(() => {",
					"      clearTimeout(timeoutId);",
					"      pm.expect.fail(message ? `Timeout: ${message}` : `waitUntil timed out after ${timeout}ms`);",
					"    }, timeout);",
					"",
					"    async function nextInterval() {",
					"      try {",
					"        const result = await predicate();",
					"        if (result) {",
					"          clearTimeout(failTimeoutId);",
					"          resolve();",
					"        } else {",
					"          timeoutId = setTimeout(function() {",
					"            nextInterval();",
					"          }, interval);",
					"        }",
					"      } catch (error) {",
					"        clearTimeout(failTimeoutId);",
					"        reject(error);",
					"      }",
					"    }",
					"    nextInterval();",
					"  });",
					"};",
					"",
					"asyncTest = (cb) => {",
					"    return (done) => {",
					"        try {",
					"            cb().then(() => done()).catch((err) => done(err));",
					"        } catch (err) {",
					"            done(err);",
					"        }",
					"    };",
					"}",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "change_id1",
			"value": "0f396790-7517-11eb-9892-0ac49ed803e6"
		}
	]
}